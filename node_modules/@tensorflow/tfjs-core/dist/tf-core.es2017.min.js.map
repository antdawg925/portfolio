{"version":3,"file":"tf-core.es2017.min.js","sources":["../../../../tfjs-core/src/backends/backend.ts","../../../../tfjs-core/src/util_base.ts","../../../../tfjs-core/src/environment.ts","../../../../tfjs-core/src/global_util.ts","../../../../tfjs-core/src/kernel_names.ts","../../../../tfjs-core/src/log.ts","../../../../tfjs-core/src/kernel_registry.ts","../../../../node_modules/long/src/long.js","../../../../tfjs-core/src/hash_util.ts","../../../../tfjs-core/src/util.ts","../../../../tfjs-core/src/profiler.ts","../../../../tfjs-core/src/tensor_format.ts","../../../../tfjs-core/src/tensor.ts","../../../../tfjs-core/src/types.ts","../../../../tfjs-core/src/tensor_util.ts","../../../../tfjs-core/src/engine.ts","../../../../tfjs-core/src/tape.ts","../../../../tfjs-core/src/device_util.ts","../../../../tfjs-core/src/flags.ts","../../../../tfjs-core/src/tensor_util_env.ts","../../../../tfjs-core/src/ops/operation.ts","../../../../tfjs-core/src/ops/complex.ts","../../../../tfjs-core/src/ops/tensor_ops_util.ts","../../../../tfjs-core/src/ops/tensor.ts","../../../../tfjs-core/src/io/types.ts","../../../../tfjs-core/src/io/io_utils.ts","../../../../tfjs-core/src/io/router_registry.ts","../../../../tfjs-core/src/io/indexed_db.ts","../../../../tfjs-core/src/io/local_storage.ts","../../../../tfjs-core/src/io/model_management.ts","../../../../tfjs-core/src/platforms/platform_browser.ts","../../../../tfjs-core/src/platforms/platform_node.ts","../../../../tfjs-core/src/ops/buffer.ts","../../../../tfjs-core/src/ops/cast.ts","../../../../tfjs-core/src/ops/clone.ts","../../../../tfjs-core/src/ops/print.ts","../../../../tfjs-core/src/base_side_effects.ts","../../../../tfjs-core/src/io/browser_files.ts","../../../../tfjs-core/src/io/progress.ts","../../../../tfjs-core/src/io/weights_loader.ts","../../../../tfjs-core/src/io/http.ts","../../../../tfjs-core/src/io/passthrough.ts","../../../../tfjs-core/src/ops/mat_mul.ts","../../../../tfjs-core/src/ops/one_hot.ts","../../../../tfjs-core/src/globals.ts","../../../../tfjs-core/src/ops/imag.ts","../../../../tfjs-core/src/ops/neg.ts","../../../../tfjs-core/src/ops/real.ts","../../../../tfjs-core/src/ops/transpose.ts","../../../../tfjs-core/src/ops/confusion_matrix.ts","../../../../tfjs-core/src/ops/broadcast_util.ts","../../../../tfjs-core/src/ops/tensor3d.ts","../../../../tfjs-core/src/ops/browser.ts","../../../../tfjs-core/src/ops/gather_nd_util.ts","../../../../tfjs-core/src/ops/scatter_nd_util.ts","../../../../tfjs-core/src/ops/slice_util.ts","../../../../tfjs-core/src/serialization.ts","../../../../tfjs-core/src/test_util.ts","../../../../tfjs-core/src/ops/add.ts","../../../../tfjs-core/src/ops/floorDiv.ts","../../../../tfjs-core/src/ops/div.ts","../../../../tfjs-core/src/ops/mul.ts","../../../../tfjs-core/src/ops/abs.ts","../../../../tfjs-core/src/ops/acos.ts","../../../../tfjs-core/src/ops/acosh.ts","../../../../tfjs-core/src/ops/add_n.ts","../../../../tfjs-core/src/ops/all.ts","../../../../tfjs-core/src/ops/any.ts","../../../../tfjs-core/src/ops/arg_max.ts","../../../../tfjs-core/src/ops/arg_min.ts","../../../../tfjs-core/src/ops/asin.ts","../../../../tfjs-core/src/ops/asinh.ts","../../../../tfjs-core/src/ops/atan.ts","../../../../tfjs-core/src/ops/atan2.ts","../../../../tfjs-core/src/ops/atanh.ts","../../../../tfjs-core/src/ops/conv_util.ts","../../../../tfjs-core/src/ops/reshape.ts","../../../../tfjs-core/src/ops/avg_pool.ts","../../../../tfjs-core/src/ops/avg_pool_3d.ts","../../../../tfjs-core/src/ops/concat.ts","../../../../tfjs-core/src/ops/sigmoid.ts","../../../../tfjs-core/src/ops/slice.ts","../../../../tfjs-core/src/ops/tanh.ts","../../../../tfjs-core/src/ops/basic_lstm_cell.ts","../../../../tfjs-core/src/ops/batch_to_space_nd.ts","../../../../tfjs-core/src/ops/batchnorm.ts","../../../../tfjs-core/src/ops/batchnorm_util.ts","../../../../tfjs-core/src/ops/batchnorm2d.ts","../../../../tfjs-core/src/ops/batchnorm3d.ts","../../../../tfjs-core/src/ops/batchnorm4d.ts","../../../../tfjs-core/src/ops/bincount.ts","../../../../tfjs-core/src/ops/broadcast_args.ts","../../../../tfjs-core/src/ops/broadcast_to.ts","../../../../tfjs-core/src/ops/ceil.ts","../../../../tfjs-core/src/ops/clip_by_value.ts","../../../../tfjs-core/src/ops/concat_1d.ts","../../../../tfjs-core/src/ops/concat_2d.ts","../../../../tfjs-core/src/ops/concat_3d.ts","../../../../tfjs-core/src/ops/concat_4d.ts","../../../../tfjs-core/src/ops/conv2d.ts","../../../../tfjs-core/src/ops/conv1d.ts","../../../../tfjs-core/src/ops/conv2d_backprop_input.ts","../../../../tfjs-core/src/ops/conv2d_transpose.ts","../../../../tfjs-core/src/ops/conv3d.ts","../../../../tfjs-core/src/ops/conv3d_backprop_input.ts","../../../../tfjs-core/src/ops/conv3d_transpose.ts","../../../../tfjs-core/src/ops/cos.ts","../../../../tfjs-core/src/ops/cosh.ts","../../../../tfjs-core/src/ops/cumprod.ts","../../../../tfjs-core/src/ops/cumsum.ts","../../../../tfjs-core/src/ops/dense_bincount.ts","../../../../tfjs-core/src/ops/depth_to_space.ts","../../../../tfjs-core/src/ops/depthwise_conv2d.ts","../../../../tfjs-core/src/ops/diag.ts","../../../../tfjs-core/src/ops/dilation2d.ts","../../../../tfjs-core/src/ops/equal.ts","../../../../tfjs-core/src/ops/where.ts","../../../../tfjs-core/src/ops/zeros_like.ts","../../../../tfjs-core/src/ops/div_no_nan.ts","../../../../tfjs-core/src/ops/dot.ts","../../../../tfjs-core/src/ops/einsum.ts","../../../../tfjs-core/src/ops/elu.ts","../../../../tfjs-core/src/ops/erf.ts","../../../../tfjs-core/src/ops/axis_util.ts","../../../../tfjs-core/src/ops/max.ts","../../../../tfjs-core/src/ops/min.ts","../../../../tfjs-core/src/ops/pow.ts","../../../../tfjs-core/src/ops/scalar.ts","../../../../tfjs-core/src/ops/sqrt.ts","../../../../tfjs-core/src/ops/square.ts","../../../../tfjs-core/src/ops/sum.ts","../../../../tfjs-core/src/ops/norm.ts","../../../../tfjs-core/src/ops/euclidean_norm.ts","../../../../tfjs-core/src/ops/exp.ts","../../../../tfjs-core/src/ops/expand_dims.ts","../../../../tfjs-core/src/ops/expm1.ts","../../../../tfjs-core/src/ops/tile.ts","../../../../tfjs-core/src/ops/eye.ts","../../../../tfjs-core/src/ops/fill.ts","../../../../tfjs-core/src/ops/floor.ts","../../../../tfjs-core/src/ops/gather.ts","../../../../tfjs-core/src/ops/greater.ts","../../../../tfjs-core/src/ops/greater_equal.ts","../../../../tfjs-core/src/ops/is_finite.ts","../../../../tfjs-core/src/ops/is_inf.ts","../../../../tfjs-core/src/ops/is_nan.ts","../../../../tfjs-core/src/ops/leaky_relu.ts","../../../../tfjs-core/src/ops/less.ts","../../../../tfjs-core/src/ops/less_equal.ts","../../../../tfjs-core/src/ops/local_response_normalization.ts","../../../../tfjs-core/src/ops/log.ts","../../../../tfjs-core/src/ops/log1p.ts","../../../../tfjs-core/src/gradients.ts","../../../../tfjs-core/src/ops/softplus.ts","../../../../tfjs-core/src/ops/log_sigmoid.ts","../../../../tfjs-core/src/ops/sub.ts","../../../../tfjs-core/src/ops/log_softmax.ts","../../../../tfjs-core/src/ops/log_sum_exp.ts","../../../../tfjs-core/src/ops/logical_and.ts","../../../../tfjs-core/src/ops/logical_not.ts","../../../../tfjs-core/src/ops/logical_or.ts","../../../../tfjs-core/src/ops/logical_xor.ts","../../../../tfjs-core/src/ops/search_sorted.ts","../../../../tfjs-core/src/ops/max_pool.ts","../../../../tfjs-core/src/ops/max_pool_3d.ts","../../../../tfjs-core/src/ops/max_pool_with_argmax.ts","../../../../tfjs-core/src/ops/maximum.ts","../../../../tfjs-core/src/ops/mean.ts","../../../../tfjs-core/src/ops/zeros.ts","../../../../tfjs-core/src/ops/ones.ts","../../../../tfjs-core/src/ops/minimum.ts","../../../../tfjs-core/src/ops/mirror_pad.ts","../../../../tfjs-core/src/ops/mod.ts","../../../../tfjs-core/src/ops/moments.ts","../../../../tfjs-core/src/ops/multi_rnn_cell.ts","../../../../tfjs-core/src/ops/multinomial.ts","../../../../tfjs-core/src/ops/not_equal.ts","../../../../tfjs-core/src/ops/ones_like.ts","../../../../tfjs-core/src/ops/outer_product.ts","../../../../tfjs-core/src/ops/pad.ts","../../../../tfjs-core/src/ops/pad1d.ts","../../../../tfjs-core/src/ops/pad2d.ts","../../../../tfjs-core/src/ops/pad3d.ts","../../../../tfjs-core/src/ops/pad4d.ts","../../../../tfjs-core/src/ops/space_to_batch_nd.ts","../../../../tfjs-core/src/ops/pool.ts","../../../../tfjs-core/src/ops/prelu.ts","../../../../tfjs-core/src/ops/prod.ts","../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","../../../../tfjs-core/src/ops/rand.ts","../../../../node_modules/seedrandom/lib/alea.js","../../../../node_modules/seedrandom/lib/xor128.js","../../../../node_modules/seedrandom/lib/xorwow.js","../../../../node_modules/seedrandom/lib/xorshift7.js","../../../../node_modules/seedrandom/lib/xor4096.js","../../../../node_modules/seedrandom/lib/tychei.js","../../../../node_modules/seedrandom/seedrandom.js","../../../../node_modules/seedrandom/index.js","../../../../tfjs-core/src/ops/rand_util.ts","../../../../tfjs-core/src/ops/random_gamma.ts","../../../../tfjs-core/src/ops/random_normal.ts","../../../../tfjs-core/src/ops/random_standard_normal.ts","../../../../tfjs-core/src/ops/random_uniform.ts","../../../../tfjs-core/src/ops/range.ts","../../../../tfjs-core/src/ops/reciprocal.ts","../../../../tfjs-core/src/ops/relu.ts","../../../../tfjs-core/src/ops/relu6.ts","../../../../tfjs-core/src/ops/reverse.ts","../../../../tfjs-core/src/ops/reverse_1d.ts","../../../../tfjs-core/src/ops/reverse_2d.ts","../../../../tfjs-core/src/ops/reverse_3d.ts","../../../../tfjs-core/src/ops/reverse_4d.ts","../../../../tfjs-core/src/ops/round.ts","../../../../tfjs-core/src/ops/rsqrt.ts","../../../../tfjs-core/src/ops/selu.ts","../../../../tfjs-core/src/ops/separable_conv2d.ts","../../../../tfjs-core/src/ops/setdiff1d_async.ts","../../../../tfjs-core/src/ops/sign.ts","../../../../tfjs-core/src/ops/sin.ts","../../../../tfjs-core/src/ops/sinh.ts","../../../../tfjs-core/src/ops/slice1d.ts","../../../../tfjs-core/src/ops/slice2d.ts","../../../../tfjs-core/src/ops/slice3d.ts","../../../../tfjs-core/src/ops/slice4d.ts","../../../../tfjs-core/src/ops/softmax.ts","../../../../tfjs-core/src/ops/spectral/fft.ts","../../../../tfjs-core/src/ops/spectral/ifft.ts","../../../../tfjs-core/src/ops/spectral/irfft.ts","../../../../tfjs-core/src/ops/split.ts","../../../../tfjs-core/src/ops/spectral/rfft.ts","../../../../tfjs-core/src/ops/squared_difference.ts","../../../../tfjs-core/src/ops/squeeze.ts","../../../../tfjs-core/src/ops/stack.ts","../../../../tfjs-core/src/ops/step.ts","../../../../tfjs-core/src/ops/strided_slice.ts","../../../../tfjs-core/src/ops/tan.ts","../../../../tfjs-core/src/ops/tensor1d.ts","../../../../tfjs-core/src/ops/tensor2d.ts","../../../../tfjs-core/src/ops/topk.ts","../../../../tfjs-core/src/ops/truncated_normal.ts","../../../../tfjs-core/src/ops/unique.ts","../../../../tfjs-core/src/ops/unsorted_segment_sum.ts","../../../../tfjs-core/src/ops/unstack.ts","../../../../tfjs-core/src/backends/where_impl.ts","../../../../tfjs-core/src/ops/where_async.ts","../../../../tfjs-core/src/ops/boolean_mask.ts","../../../../tfjs-core/src/ops/moving_average.ts","../../../../tfjs-core/src/ops/scatter_nd.ts","../../../../tfjs-core/src/ops/sparse_to_dense.ts","../../../../tfjs-core/src/ops/sparse_to_dense_util.ts","../../../../tfjs-core/src/ops/gather_nd.ts","../../../../tfjs-core/src/ops/dropout.ts","../../../../tfjs-core/src/ops/dropout_util.ts","../../../../tfjs-core/src/ops/signal_ops_util.ts","../../../../tfjs-core/src/ops/in_top_k.ts","../../../../tfjs-core/src/ops/conv2d_backprop_filter.ts","../../../../tfjs-core/src/ops/fused_util.ts","../../../../tfjs-core/src/ops/fused/conv2d.ts","../../../../tfjs-core/src/ops/depthwise_conv2d_native_backprop_filter.ts","../../../../tfjs-core/src/ops/depthwise_conv2d_native_backprop_input.ts","../../../../tfjs-core/src/ops/fused/depthwise_conv2d.ts","../../../../tfjs-core/src/ops/fused/mat_mul.ts","../../../../tfjs-core/src/ops/signal/hamming_window.ts","../../../../tfjs-core/src/ops/signal/hann_window.ts","../../../../tfjs-core/src/ops/signal/frame.ts","../../../../tfjs-core/src/ops/signal/stft.ts","../../../../tfjs-core/src/ops/image/crop_and_resize.ts","../../../../tfjs-core/src/ops/image/flip_left_right.ts","../../../../tfjs-core/src/ops/image/grayscale_to_rgb.ts","../../../../tfjs-core/src/ops/image/rotate_with_offset.ts","../../../../tfjs-core/src/ops/nonmax_util.ts","../../../../tfjs-core/src/ops/image/non_max_suppression.ts","../../../../tfjs-core/src/backends/non_max_suppression_util.ts","../../../../tfjs-core/src/backends/non_max_suppression_impl.ts","../../../../tfjs-core/src/ops/image/non_max_suppression_async.ts","../../../../tfjs-core/src/ops/image/non_max_suppression_with_score.ts","../../../../tfjs-core/src/ops/image/non_max_suppression_with_score_async.ts","../../../../tfjs-core/src/ops/image/non_max_suppression_padded.ts","../../../../tfjs-core/src/ops/image/non_max_suppression_padded_async.ts","../../../../tfjs-core/src/ops/image/resize_bilinear.ts","../../../../tfjs-core/src/ops/image/resize_nearest_neighbor.ts","../../../../tfjs-core/src/ops/image/threshold.ts","../../../../tfjs-core/src/ops/image/transform.ts","../../../../tfjs-core/src/ops/linalg/band_part.ts","../../../../tfjs-core/src/ops/linalg/gram_schmidt.ts","../../../../tfjs-core/src/ops/linalg/qr.ts","../../../../tfjs-core/src/ops/loss_ops_utils.ts","../../../../tfjs-core/src/ops/losses/compute_weighted_loss.ts","../../../../tfjs-core/src/ops/losses/absolute_difference.ts","../../../../tfjs-core/src/ops/losses/cosine_distance.ts","../../../../tfjs-core/src/ops/losses/hinge_loss.ts","../../../../tfjs-core/src/ops/losses/huber_loss.ts","../../../../tfjs-core/src/ops/losses/log_loss.ts","../../../../tfjs-core/src/ops/losses/mean_squared_error.ts","../../../../tfjs-core/src/ops/losses/sigmoid_cross_entropy.ts","../../../../tfjs-core/src/ops/losses/softmax_cross_entropy.ts","../../../../tfjs-core/src/ops/sparse/sparse_fill_empty_rows.ts","../../../../tfjs-core/src/ops/sparse/sparse_reshape.ts","../../../../tfjs-core/src/ops/sparse/sparse_segment_mean.ts","../../../../tfjs-core/src/ops/sparse/sparse_segment_sum.ts","../../../../tfjs-core/src/ops/string/string_n_grams.ts","../../../../tfjs-core/src/ops/string/string_split.ts","../../../../tfjs-core/src/ops/string/string_to_hash_bucket_fast.ts","../../../../tfjs-core/src/ops/ops.ts","../../../../tfjs-core/src/optimizers/optimizer.ts","../../../../tfjs-core/src/optimizers/adadelta_optimizer.ts","../../../../tfjs-core/src/optimizers/adagrad_optimizer.ts","../../../../tfjs-core/src/optimizers/adam_optimizer.ts","../../../../tfjs-core/src/optimizers/adamax_optimizer.ts","../../../../tfjs-core/src/optimizers/sgd_optimizer.ts","../../../../tfjs-core/src/optimizers/momentum_optimizer.ts","../../../../tfjs-core/src/optimizers/rmsprop_optimizer.ts","../../../../tfjs-core/src/optimizers/optimizer_constructors.ts","../../../../tfjs-core/src/train.ts","../../../../tfjs-core/src/browser_util.ts","../../../../tfjs-core/src/ops/ragged_to_dense_util.ts","../../../../tfjs-core/src/backends/einsum_util.ts","../../../../tfjs-core/src/ops/segment_util.ts","../../../../tfjs-core/src/ops/reduce_util.ts","../../../../tfjs-core/src/backends/backend_util.ts","../../../../tfjs-core/src/ops/concat_util.ts","../../../../tfjs-core/src/ops/rotate_util.ts","../../../../tfjs-core/src/ops/array_ops_util.ts","../../../../tfjs-core/src/ops/selu_util.ts","../../../../tfjs-core/src/ops/erf_util.ts","../../../../tfjs-core/src/backends/complex_util.ts","../../../../tfjs-core/src/ops/split_util.ts","../../../../tfjs-core/src/ops/sparse/sparse_fill_empty_rows_util.ts","../../../../tfjs-core/src/ops/sparse/sparse_reshape_util.ts","../../../../tfjs-core/src/ops/sparse/sparse_segment_reduction_util.ts","../../../../tfjs-core/src/ops/linspace.ts","../../../../tfjs-core/src/ops/lower_bound.ts","../../../../tfjs-core/src/ops/meshgrid.ts","../../../../tfjs-core/src/ops/tensor4d.ts","../../../../tfjs-core/src/ops/tensor5d.ts","../../../../tfjs-core/src/ops/tensor6d.ts","../../../../tfjs-core/src/ops/upper_bound.ts","../../../../tfjs-core/src/ops/variable.ts","../../../../tfjs-core/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Backend, DataId, DataToGPUOptions, GPUData} from '../tensor';\nimport {BackendValues, DataType} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number|{error: string};\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId, force?: boolean): boolean;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n  refCount(dataId: DataId): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  // check if backend timer is available\n  timerAvailable(): boolean;\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  refCount(dataId: DataId): number {\n    return notYetImplemented('refCount');\n  }\n  incRef(dataId: DataId): void {\n    return notYetImplemented('incRef');\n  }\n  timerAvailable(): boolean {\n    return true;\n  }\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  readToGPU(dataId: object, options?: DataToGPUOptions): GPUData {\n    return notYetImplemented('readToGPU');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object, force?: boolean): boolean {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    return notYetImplemented('move');\n  }\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataTypeMap, FlatVector, NumericDataType, RecursiveArray, TensorLike, TypedArray} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n    // tslint:disable-next-line:no-any\n    array: any[]|Uint32Array|Int32Array|Float32Array,\n    // tslint:disable-next-line:no-any\n    array2: any[]|Uint32Array|Int32Array|Float32Array): void {\n  if (array.length !== array2.length) {\n    throw new Error(\n        `Array sizes must match to be shuffled together ` +\n        `First array length was ${array.length}` +\n        `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function swap<T>(\n    object: {[index: number]: T}, left: number, right: number) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr as T);\n  }\n  return result;\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<'string'>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function isTypedArray(a: {}):\n  a is Float32Array|Int32Array|Uint8Array|Uint8ClampedArray {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array\n             || values instanceof Uint8Array\n             || values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nfunction createNestedArray(\n    offset: number, shape: number[], a: TypedArray, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(\n    shape: number[], a: TypedArray, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${\n        isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray<D extends DataType>(\n    shape: number[], dtype: D) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(\n    locs: number[], rank: number, strides: number[]): number {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(\n    index: number, rank: number, strides: number[]): number[] {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs: number[] = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object: any): object is Promise<unknown> {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace: {_tfGlobals: Map<string, any>};\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace(): {_tfGlobals: Map<string, any>} {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    globalNameSpace = ns;\n  }\n  return globalNameSpace;\n}\n\n// tslint:disable-next-line:no-any\nfunction getGlobalMap(): Map<string, any> {\n  const ns = getGlobalNamespace();\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n  return ns._tfGlobals;\n}\n\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal<T>(key: string, init: () => T): T {\n  const globalMap = getGlobalMap();\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Allow UpperCamelCase variable names\n// tslint:disable: variable-name\n// Unfortunately just enabling PascalCase per file (tslint:enable:\n// allow-pascal-case) doesn't work.\nimport {NamedTensorInfoMap, TensorInfo} from './kernel_registry';\nimport {ExplicitPadding} from './ops/conv_util';\nimport {Activation} from './ops/fused_types';\nimport {DataType, PixelData} from './types';\n\nexport const Abs = 'Abs';\nexport type AbsInputs = UnaryInputs;\n\nexport const Acos = 'Acos';\nexport type AcosInputs = UnaryInputs;\n\nexport const Acosh = 'Acosh';\nexport type AcoshInputs = UnaryInputs;\n\nexport const Add = 'Add';\nexport type AddInputs = BinaryInputs;\n\nexport const AddN = 'AddN';\nexport type AddNInputs = TensorInfo[];\n\nexport const All = 'All';\nexport type AllInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AllAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Any = 'Any';\nexport type AnyInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AnyAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const ArgMax = 'ArgMax';\nexport type ArgMaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMaxAttrs {\n  axis: number;\n}\n\nexport const ArgMin = 'ArgMin';\nexport type ArgMinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMinAttrs {\n  axis: number;\n}\n\nexport const Asin = 'Asin';\nexport type AsinInputs = UnaryInputs;\n\nexport const Asinh = 'Asinh';\nexport type AsinhInputs = UnaryInputs;\n\nexport const Atan = 'Atan';\nexport type AtanInputs = UnaryInputs;\n\nexport const Atanh = 'Atanh';\nexport type AtanhInputs = UnaryInputs;\n\nexport const Atan2 = 'Atan2';\nexport type Atan2Inputs = BinaryInputs;\n\nexport const AvgPool = 'AvgPool';\nexport type AvgPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const AvgPoolGrad = 'AvgPoolGrad';\nexport type AvgPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n}\n\nexport const AvgPool3D = 'AvgPool3D';\nexport type AvgPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  dataFormat: 'NDHWC'|'NCDHW';\n}\n\nexport const AvgPool3DGrad = 'AvgPool3DGrad';\nexport type AvgPool3DGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const BatchMatMul = 'BatchMatMul';\nexport type BatchMatMulInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\nexport interface BatchMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n}\n\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport type BatchToSpaceNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BatchToSpaceNDAttrs {\n  blockShape: number[];\n  crops: number[][];\n}\n\nexport type BinaryInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\n\nexport const Bincount = 'Bincount';\nexport type BincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface BincountAttrs {\n  size: number;\n}\n\nexport const BroadcastTo = 'BroadcastTo';\nexport type BroadcastToInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BroadCastToAttrs {\n  shape: number[];\n  inputShape: number[];  // for gradient\n}\n\nexport const BroadcastArgs = 'BroadcastArgs';\nexport type BroadcastArgsInputs = Pick<NamedTensorInfoMap, 's0'|'s1'>;\n\nexport const Cast = 'Cast';\nexport type CastInputs = UnaryInputs;\nexport interface CastAttrs {\n  dtype: DataType;\n}\n\nexport const Ceil = 'Ceil';\nexport type CeilInputs = UnaryInputs;\n\nexport const ClipByValue = 'ClipByValue';\nexport type ClipByValueInputs = UnaryInputs;\nexport interface ClipByValueAttrs {\n  clipValueMin: number;\n  clipValueMax: number;\n}\n\nexport const Complex = 'Complex';\nexport type ComplexInputs = Pick<NamedTensorInfoMap, 'real'|'imag'>;\n\nexport const ComplexAbs = 'ComplexAbs';\nexport type ComplexAbsInputs = UnaryInputs;\n\nexport const Concat = 'Concat';\nexport type ConcatInputs = TensorInfo[];\nexport interface ConcatAttrs {\n  axis: number;\n}\n\nexport const Conv2D = 'Conv2D';\nexport type Conv2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport type Conv2DBackpropFilterInputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface Conv2DBackpropFilterAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport type Conv2DBackpropInputInputs = Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv2DBackpropInputAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Conv3D = 'Conv3D';\nexport type Conv3DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv3DAttrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  dataFormat: 'NDHWC'|'NCDHW';\n  dilations: [number, number, number]|number;\n}\n\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport type Conv3DBackpropFilterV2Inputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\n\nexport interface Conv3DBackpropFilterV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  filterShape: [number, number, number, number, number];\n}\n\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport type Conv3DBackpropInputV2Inputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv3DBackpropInputV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  inputShape: [number, number, number, number, number];\n}\n\nexport const Cos = 'Cos';\nexport type CosInputs = UnaryInputs;\n\nexport const Cosh = 'Cosh';\nexport type CoshInputs = UnaryInputs;\n\nexport const Cumprod = 'Cumprod';\nexport type CumprodInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumprodAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const Cumsum = 'Cumsum';\nexport type CumsumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumsumAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const CropAndResize = 'CropAndResize';\nexport type CropAndResizeInputs =\n    Pick<NamedTensorInfoMap, 'image'|'boxes'|'boxInd'>;\nexport interface CropAndResizeAttrs {\n  cropSize: [number, number];\n  method: 'bilinear'|'nearest';\n  extrapolationValue: number;\n}\n\nexport const DenseBincount = 'DenseBincount';\nexport type DenseBincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface DenseBincountAttrs {\n  size: number;\n  binaryOutput?: boolean;\n}\n\nexport const DepthToSpace = 'DepthToSpace';\nexport type DepthToSpaceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface DepthToSpaceAttrs {\n  blockSize: number;\n  dataFormat: 'NHWC'|'NCHW';\n}\n\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport type DepthwiseConv2dNativeInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface DepthwiseConv2dNativeAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const DepthwiseConv2dNativeBackpropFilter =\n    'DepthwiseConv2dNativeBackpropFilter';\nexport type DepthwiseConv2dNativeBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface DepthwiseConv2dNativeBackpropFilterAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const DepthwiseConv2dNativeBackpropInput =\n    'DepthwiseConv2dNativeBackpropInput';\nexport type DepthwiseConv2dNativeBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface DepthwiseConv2dNativeBackpropInputAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Diag = 'Diag';\nexport type DiagInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Dilation2D = 'Dilation2D';\nexport type Dilation2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Dilation2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  dilations: [number, number]|number;\n}\n\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport type Dilation2DBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport type Dilation2DBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const RealDiv = 'RealDiv';\nexport type RealDivInputs = BinaryInputs;\n\nexport const Einsum = 'Einsum';\nexport type EinsumInputs = TensorInfo[];\nexport interface EinsumAttrs {\n  equation: string;\n}\n\nexport const Elu = 'Elu';\nexport type EluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const EluGrad = 'EluGrad';\nexport type EluGradInputs = Pick<NamedTensorInfoMap, 'dy'|'y'>;\n\nexport const Erf = 'Erf';\nexport type ErfInputs = UnaryInputs;\n\nexport const Equal = 'Equal';\nexport type EqualInputs = BinaryInputs;\n\nexport const Exp = 'Exp';\nexport type ExpInputs = UnaryInputs;\n\nexport const ExpandDims = 'ExpandDims';\nexport type ExpandDimsInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface ExpandDimsAttrs {\n  dim: number;\n}\n\nexport const Expm1 = 'Expm1';\nexport type Expm1Inputs = UnaryInputs;\n\nexport const FFT = 'FFT';\nexport type FFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Fill = 'Fill';\nexport interface FillAttrs {\n  shape: number[];\n  value: number|string;\n  dtype: DataType;\n}\n\nexport const FlipLeftRight = 'FlipLeftRight';\nexport type FlipLeftRightInputs = Pick<NamedTensorInfoMap, 'image'>;\n\nexport const Floor = 'Floor';\nexport type FloorInputs = UnaryInputs;\n\nexport const FloorDiv = 'FloorDiv';\nexport type FloorDivInputs = BinaryInputs;\n\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport type FusedBatchNormInputs =\n    Pick<NamedTensorInfoMap, 'x'|'scale'|'offset'|'mean'|'variance'>;\nexport interface FusedBatchNormAttrs {\n  varianceEpsilon: number;\n}\n\nexport const GatherV2 = 'GatherV2';\nexport type GatherV2Inputs = Pick<NamedTensorInfoMap, 'x'|'indices'>;\nexport interface GatherV2Attrs {\n  axis: number;\n  batchDims: number;\n}\n\nexport const GatherNd = 'GatherNd';\nexport type GatherNdInputs = Pick<NamedTensorInfoMap, 'params'|'indices'>;\n\nexport const Greater = 'Greater';\nexport type GreaterInputs = BinaryInputs;\n\nexport const GreaterEqual = 'GreaterEqual';\nexport type GreaterEqualInputs = BinaryInputs;\n\nexport const Identity = 'Identity';\nexport type IdentityInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const IFFT = 'IFFT';\nexport type IFFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Imag = 'Imag';\nexport type ImagInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const IsFinite = 'IsFinite';\nexport type IsFiniteInputs = UnaryInputs;\n\nexport const IsInf = 'IsInf';\nexport type IsInfInputs = UnaryInputs;\n\nexport const IsNan = 'IsNan';\nexport type IsNanInputs = UnaryInputs;\n\nexport const LeakyRelu = 'LeakyRelu';\nexport type LeakyReluInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LeakyReluAttrs {\n  alpha: number;\n}\n\nexport const Less = 'Less';\nexport type LessInputs = BinaryInputs;\n\nexport const LessEqual = 'LessEqual';\nexport type LessEqualInputs = BinaryInputs;\n\nexport const LinSpace = 'LinSpace';\nexport interface LinSpaceAttrs {\n  start: number;\n  stop: number;\n  num: number;\n}\nexport const Log = 'Log';\nexport type LogInputs = UnaryInputs;\n\nexport const Log1p = 'Log1p';\nexport type Log1pInputs = UnaryInputs;\n\nexport const LogicalAnd = 'LogicalAnd';\nexport type LogicalAndInputs = BinaryInputs;\n\nexport const LogicalNot = 'LogicalNot';\nexport type LogicalNotInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const LogicalOr = 'LogicalOr';\nexport type LogicalOrInputs = BinaryInputs;\n\nexport const LogicalXor = 'LogicalXor';\nexport type LogicalXorInputs = BinaryInputs;\n\nexport const LogSoftmax = 'LogSoftmax';\nexport type LogSoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface LogSoftmaxAttrs {\n  axis: number;\n}\n\nexport const LowerBound = 'LowerBound';\nexport type LowerBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const LRN = 'LRN';\nexport type LRNInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LRNAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const LRNGrad = 'LRNGrad';\nexport type LRNGradInputs = Pick<NamedTensorInfoMap, 'x'|'y'|'dy'>;\nexport interface LRNGradAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const Max = 'Max';\nexport type MaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxAttrs {\n  reductionIndices: number|number[];\n  keepDims: boolean;\n}\n\nexport const Maximum = 'Maximum';\nexport type MaximumInputs = BinaryInputs;\n\nexport const MaxPool = 'MaxPool';\nexport type MaxPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolGrad = 'MaxPoolGrad';\nexport type MaxPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3D = 'MaxPool3D';\nexport type MaxPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dataFormat: 'NDHWC'|'NCDHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3DGrad = 'MaxPool3DGrad';\nexport type MaxPool3DGradInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport type MaxPoolWithArgmaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolWithArgmaxAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  includeBatchInIndex: boolean;\n}\n\nexport const Mean = 'Mean';\nexport type MeanInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MeanAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Min = 'Min';\nexport type MinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MinAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Minimum = 'Minimum';\nexport type MinimumInputs = BinaryInputs;\n\nexport const MirrorPad = 'MirrorPad';\nexport type MirrorPadInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MirrorPadAttrs {\n  paddings: Array<[number, number]>;\n  mode: 'reflect'|'symmetric';\n}\n\nexport const Mod = 'Mod';\nexport type ModInputs = BinaryInputs;\n\nexport const Multinomial = 'Multinomial';\nexport type MultinomialInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface MultinomialAttrs {\n  numSamples: number;\n  seed: number;\n  normalized: boolean;\n}\n\nexport const Multiply = 'Multiply';\nexport type MultiplyInputs = BinaryInputs;\n\nexport const Neg = 'Neg';\nexport type NegInputs = UnaryInputs;\n\nexport const NotEqual = 'NotEqual';\nexport type NotEqualInputs = BinaryInputs;\n\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport type NonMaxSuppressionV3Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV3Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n}\n\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport type NonMaxSuppressionV4Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV4Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  padToMaxOutputSize: boolean;\n}\n\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport type NonMaxSuppressionV5Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV5Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  softNmsSigma: number;\n}\n\nexport const OnesLike = 'OnesLike';\nexport type OnesLikeInputs = UnaryInputs;\n\nexport const OneHot = 'OneHot';\nexport type OneHotInputs = Pick<NamedTensorInfoMap, 'indices'>;\nexport interface OneHotAttrs {\n  depth: number;\n  onValue: number;\n  offValue: number;\n  dtype: DataType;\n}\n\nexport const Pack = 'Pack';\nexport type PackInputs = TensorInfo[];\nexport interface PackAttrs {\n  axis: number;\n}\n\nexport const PadV2 = 'PadV2';\nexport type PadV2Inputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface PadV2Attrs {\n  paddings: Array<[number, number]>;\n  constantValue: number;\n}\n\nexport const Pool = 'Pool';\nexport type PoolInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Pow = 'Pow';\nexport type PowInputs = BinaryInputs;\n\nexport const Prelu = 'Prelu';\nexport type PreluInputs = Pick<NamedTensorInfoMap, 'x'|'alpha'>;\n\nexport const Prod = 'Prod';\nexport type ProdInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ProdAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const RaggedTensorToTensor = 'RaggedTensorToTensor';\nexport type RaggedTensorToTensorInputs =\n    Pick<NamedTensorInfoMap, 'shape'|'values'|'defaultValue'>&\n    {rowPartitionTensors: TensorInfo[]};\nexport interface RaggedTensorToTensorAttrs {\n  rowPartitionTypes: string[];\n}\n\nexport const Range = 'Range';\nexport interface RangeAttrs {\n  start: number;\n  stop: number;\n  step: number;\n  dtype: 'float32'|'int32';\n}\n\nexport const Real = 'Real';\nexport type RealInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Reciprocal = 'Reciprocal';\nexport type ReciprocalInputs = UnaryInputs;\n\nexport const Relu = 'Relu';\nexport type ReluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reshape = 'Reshape';\nexport type ReshapeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReshapeAttrs {\n  shape: number[];\n}\n\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport type ResizeNearestNeighborInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeNearestNeighborAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport type ResizeNearestNeighborGradInputs =\n    Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeNearestNeighborGradAttrs = ResizeNearestNeighborAttrs;\n\nexport const ResizeBilinear = 'ResizeBilinear';\nexport type ResizeBilinearInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeBilinearAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport type ResizeBilinearGradInputs = Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeBilinearGradAttrs = ResizeBilinearAttrs;\n\nexport const Relu6 = 'Relu6';\nexport type Relu6Inputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reverse = 'Reverse';\nexport type ReverseInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReverseAttrs {\n  dims: number|number[];\n}\n\nexport const Round = 'Round';\nexport type RoundInputs = UnaryInputs;\n\nexport const Rsqrt = 'Rsqrt';\nexport type RsqrtInputs = UnaryInputs;\n\nexport const ScatterNd = 'ScatterNd';\nexport type ScatterNdInputs = Pick<NamedTensorInfoMap, 'indices'|'updates'>;\nexport interface ScatterNdAttrs {\n  shape: number[];\n}\n\nexport const SearchSorted = 'SearchSorted';\nexport type SearchSortedInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\nexport interface SearchSortedAttrs {\n  side: 'left'|'right';\n}\n\nexport const Select = 'Select';\nexport type SelectInputs = Pick<NamedTensorInfoMap, 'condition'|'t'|'e'>;\n\nexport const Selu = 'Selu';\nexport type SeluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Slice = 'Slice';\nexport type SliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SliceAttrs {\n  begin: number|number[];\n  size: number|number[];\n}\nexport const Sin = 'Sin';\nexport type SinInputs = UnaryInputs;\n\nexport const Sinh = 'Sinh';\nexport type SinhInputs = UnaryInputs;\n\nexport const Sign = 'Sign';\nexport type SignInputs = UnaryInputs;\n\nexport const Sigmoid = 'Sigmoid';\nexport type SigmoidInputs = UnaryInputs;\n\nexport const Softplus = 'Softplus';\nexport type SoftplusInputs = UnaryInputs;\n\nexport const Sqrt = 'Sqrt';\nexport type SqrtInputs = UnaryInputs;\n\nexport const Sum = 'Sum';\nexport type SumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SumAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport type SpaceToBatchNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SpaceToBatchNDAttrs {\n  blockShape: number[];\n  paddings: number[][];\n}\n\nexport const SplitV = 'SplitV';\nexport type SplitVInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SplitVAttrs {\n  numOrSizeSplits: number[]|number;\n  axis: number;\n}\n\nexport const Softmax = 'Softmax';\nexport type SoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface SoftmaxAttrs {\n  dim: number;\n}\n\nexport const SparseFillEmptyRows = 'SparseFillEmptyRows';\nexport type SparseFillEmptyRowsInputs =\n    Pick<NamedTensorInfoMap, 'indices'|'values'|'denseShape'|'defaultValue'>;\n\nexport const SparseReshape = 'SparseReshape';\nexport type SparseReshapeInputs =\n    Pick<NamedTensorInfoMap, 'inputIndices'|'inputShape'|'newShape'>;\n\nexport const SparseSegmentMean = 'SparseSegmentMean';\nexport type SparseSegmentMeanInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseSegmentSum = 'SparseSegmentSum';\nexport type SparseSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseToDense = 'SparseToDense';\nexport type SparseToDenseInputs =\n    Pick<NamedTensorInfoMap, 'sparseIndices'|'sparseValues'|'defaultValue'>;\nexport interface SparseToDenseAttrs {\n  outputShape: number[];\n}\n\nexport const SquaredDifference = 'SquaredDifference';\nexport type SquaredDifferenceInputs = BinaryInputs;\n\nexport const Square = 'Square';\nexport type SquareInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const StridedSlice = 'StridedSlice';\nexport type StridedSliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface StridedSliceAttrs {\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\nexport const StringNGrams = 'StringNGrams';\nexport type StringNGramsInputs = Pick<NamedTensorInfoMap, 'data'|'dataSplits'>;\nexport interface StringNGramsAttrs {\n  separator: string;\n  nGramWidths: number[];\n  leftPad: string;\n  rightPad: string;\n  padWidth: number;\n  preserveShortSequences: boolean;\n}\n\nexport const StringSplit = 'StringSplit';\nexport type StringSplitInputs = Pick<NamedTensorInfoMap, 'input'|'delimiter'>;\nexport interface StringSplitAttrs {\n  skipEmpty: boolean;\n}\n\nexport const StringToHashBucketFast = 'StringToHashBucketFast';\nexport type StringToHashBucketFastInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface StringToHashBucketFastAttrs {\n  numBuckets: number;\n}\n\nexport const Sub = 'Sub';\nexport type SubInputs = BinaryInputs;\n\nexport const Tan = 'Tan';\nexport type TanInputs = UnaryInputs;\n\nexport const Tanh = 'Tanh';\nexport type TanhInputs = UnaryInputs;\n\nexport const Tile = 'Tile';\nexport type TileInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TileAttrs {\n  reps: number[];\n}\n\nexport const TopK = 'TopK';\nexport type TopKInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TopKAttrs {\n  k: number;\n  sorted: boolean;\n}\n\nexport const Transform = 'Transform';\nexport type TransformInputs = Pick<NamedTensorInfoMap, 'image'|'transforms'>;\nexport interface TransformAttrs {\n  interpolation: 'nearest'|'bilinear';\n  fillMode: 'constant'|'reflect'|'wrap'|'nearest';\n  fillValue: number;\n  outputShape?: [number, number];\n}\n\nexport const Transpose = 'Transpose';\nexport type TransposeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TransposeAttrs {\n  perm: number[];\n}\n\nexport const Unique = 'Unique';\nexport type UniqueInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface UniqueAttrs {\n  axis: number;\n}\n\nexport type UnaryInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Unpack = 'Unpack';\nexport type UnpackInputs = Pick<NamedTensorInfoMap, 'value'>;\nexport interface UnpackAttrs {\n  axis: number;\n}\n\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport type UnsortedSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'x'|'segmentIds'>;\nexport interface UnsortedSegmentSumAttrs {\n  numSegments: number;\n}\n\nexport const UpperBound = 'UpperBound';\nexport type UpperBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const ZerosLike = 'ZerosLike';\nexport type ZerosLikeInputs = UnaryInputs;\n\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport type StepInputs = UnaryInputs;\nexport interface StepAttrs {\n  alpha: number;\n}\n\nexport const FromPixels = 'FromPixels';\nexport interface FromPixelsInputs {\n  pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap;\n}\nexport interface FromPixelsAttrs {\n  numChannels: number;\n}\n\nexport const RotateWithOffset = 'RotateWithOffset';\nexport type RotateWithOffsetInputs = Pick<NamedTensorInfoMap, 'image'>;\nexport interface RotateWithOffsetAttrs {\n  radians: number;\n  fillValue: number|[number, number, number];\n  center: number|[number, number];\n}\n\nexport const _FusedMatMul = '_FusedMatMul';\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulInputs extends NamedTensorInfoMap {\n  a: TensorInfo;\n  b: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedConv2D = 'FusedConv2D';\nexport interface FusedConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\nexport interface FusedDepthwiseConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedDepthwiseConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\n\nexport function warn(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.warn(...msg);\n  }\n}\n\nexport function log(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.log(...msg);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {DataType, RecursiveArray} from './types';\n\nconst kernelRegistry =\n    getGlobal('kernelRegistry', () => new Map<string, KernelConfig>());\nconst gradRegistry =\n    getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\nexport type DataId = object;\n\ntype AttributeValue =\n    number|number[]|boolean|boolean[]|string|string[]|NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue|RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo|TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n    (dy: Tensor|Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n        NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\n/** Holds metadata for a given tensor. */\nexport interface TensorInfo {\n  dataId: DataId;\n  shape: number[];\n  dtype: DataType;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string, backendName: string) {\n  return `${backendName}_${kernelName}`;\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\nimport {BackendValues, DataType, TensorLike, TypedArray} from './types';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(\n    value: DataType, dtype: DataType): BackendValues {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function toTypedArray(a: TensorLike, dtype: DataType): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = base.flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now(): number {\n  return env().platform.now();\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          (size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement,\n          size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\n\nimport {getGlobal} from './global_util';\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface DataToGPUWebGLOption {\n  customTexShape?: [number, number];\n}\n\nexport type DataToGPUOptions = DataToGPUWebGLOption;\n\nexport interface GPUData {\n  tensorRef: Tensor;\n  texture?: WebGLTexture;\n  buffer?: GPUBuffer;\n  texShape?: [number, number];\n  bufSize?: number;\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  clone<T extends Tensor>(x: T): T;\n  // TODO(yassogba) bring reshape back?\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n/**\n * We wrap data id since we use weak map to avoid memory leaks.\n * Since we have our own memory management, we have a reference counter\n * mapping a tensor to its data, so there is always a pointer (even if that\n * data is otherwise garbage collectable).\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\n * Global_Objects/WeakMap\n */\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\n// Declare this namespace to make Tensor class augmentation work in google3.\nexport declare namespace Tensor {}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor<R extends Rank = Rank> {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(\n               this.shape, this.dataSync(), this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n   * and `data()`, this method prevents data from being downloaded to CPU.\n   *\n   * For WebGL backend, the data will be stored on a densely packed texture.\n   * This means that the texture will use the RGBA channels to store value.\n   *\n   * For WebGPU backend, the data will be stored on a buffer. There is no\n   * parameter, so can not use an user defined size to create the buffer.\n   *\n   * @param options:\n   *     For WebGL,\n   *         - customTexShape: Optional. If set, will use the user defined\n   *     texture shape to create the texture.\n   *\n   * @returns For WebGL backend, a GPUData contains the new texture and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this texture,\n   *        texture: WebGLTexture,\n   *        texShape: [number, number] // [height, width]\n   *     }\n   *\n   *     For WebGPU backend, a GPUData contains the new buffer and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this buffer,\n   *        buffer: GPUBuffer,\n   *        bufSize: number\n   *     }\n   *\n   *     Remember to dispose the GPUData after it is used by\n   *     `res.tensorRef.dispose()`.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataToGPU(options?: DataToGPUOptions): GPUData {\n    this.throwIfDisposed();\n    return trackerFn().readToGPU(this.dataId, options);\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n}\n\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null &&\n        instance.throwIfDisposed != null;\n  }\n});\n\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n}\n\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n  dataToGPU(options?: DataToGPUOptions): GPUData;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image data in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  return tensorList.some(x => x.id === tensor.id);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGlobalNamespace} from './global_util';\nimport {Add, Cast, Identity} from './kernel_names';\nimport {getGradient, getKernel, getKernelsForBackend, GradFunc, NamedAttrMap, TensorInfo} from './kernel_registry';\nimport * as log from './log';\nimport {KernelProfile, Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {DataId, DataToGPUOptions, GPUData, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelInfo = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n  kernelTimeMs: number | {error: string} | Promise<number|{error: string}>;\n  extraInfo: string | Promise<string>;\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelInfo[];\n  result: TensorContainer;\n  kernelNames: string[];\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\ninterface RegisteredKernelInvocation<I extends NamedTensorMap> {\n  kernelName: string;\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\ninterface CustomGradKernelInvocation<T extends Tensor|Tensor[],\n                                               I extends NamedTensorMap> {\n  forwardFunc: ForwardFunc<T>;\n  backwardsFunc: (dy: T, saved: Tensor[]) => {\n    [P in keyof I]: () => I[P]\n  };\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\nfunction isRegisteredKernelInvocation<T extends Tensor|Tensor[],\n                                                I extends NamedTensorMap>(\n    kernelInvocation: RegisteredKernelInvocation<I>|\n    CustomGradKernelInvocation<T, I>):\n    kernelInvocation is RegisteredKernelInvocation<I> {\n  return (kernelInvocation as RegisteredKernelInvocation<I>).kernelName != null;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[]\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo = {\n    newBytes: 0,\n    newTensors: 0,\n    peakBytes: 0,\n    kernels: [],\n    result: null,\n    get kernelNames():\n        string[] {\n          return Array.from(new Set(this.kernels.map(k => k.name)));\n        }\n  };\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      log.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) &&\n          typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  log.warn(`Initialization of backend ${backendName} failed`);\n                  log.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(backend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y: Tensor = ENGINE.runKernel(Identity, {x} as {} as NamedTensorMap);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {x: dy};\n        const attrs = {dtype};\n\n        return ENGINE.runKernel(\n                   Cast, gradInputs as {} as NamedTensorMap,\n                   // tslint:disable-next-line: no-unnecessary-type-assertion\n                   attrs as {} as NamedAttrMap) as Tensor;\n      }\n    });\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, attrs?: NamedAttrMap): T {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${\n          this.backendName}'`);\n    }\n    return this.runKernelFunc({kernelName, inputs, attrs});\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n  private runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      kernelParams: RegisteredKernelInvocation<I>|\n      CustomGradKernelInvocation<T, I>): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out: TensorInfo|TensorInfo[];\n\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n        kernelParams.kernelName :\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n\n    // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {kernelName, inputs, attrs} = kernelParams;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(\n          kernel != null,\n          () => `Cannot find registered kernel '${kernelName}' for backend '${\n              this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map((outInfo: TensorInfo|Tensor) => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if ((outInfo as Tensor).rank != null) {\n            return outInfo as Tensor;\n          }\n          return this.makeTensorFromTensorInfo(outInfo);\n        });\n\n        // Save any required inputs and outputs.\n\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n        if (isTapeOn) {\n          const tensorsToSave =\n              this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const {forwardFunc} = kernelParams;\n      // Running a customGrad op.\n      const saveFunc: GradSaveFunc = (tensors) => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n    const {inputs, attrs} = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n        null :\n        kernelParams.backwardsFunc;\n\n    let kernelProfile: KernelProfile;\n    this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n            outputs = kernelFunc();\n          } else {\n            kernelProfile = this.profiler.profileKernel(\n                kernelOrScopeName, inputs, () => kernelFunc());\n            if (this.ENV.getBool('DEBUG')) {\n              this.profiler.logKernelProfile(kernelProfile);\n            }\n            outputs = kernelProfile.outputs;\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(\n          kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(\n            key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  private saveTensorsForBackwardMode(tensors: Tensor[]): Tensor[] {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  private getTensorsForGradient(\n      kernelName: string, inputs: NamedTensorMap,\n      outputs: Tensor[]): Tensor[]|null {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave: string[] = gradConfig.inputsToSave || [];\n      const outputsToSave: boolean[] = gradConfig.outputsToSave || [];\n\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave: Tensor[];\n      if (gradConfig.saveAllInputs) {\n        util.assert(\n            Array.isArray(inputs),\n            () => 'saveAllInputs is true, expected inputs to be an array.');\n\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n\n      const outputTensorsToSave: Tensor[] =\n          outputs.filter((_, i) => outputsToSave[i]);\n\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n    return [];\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n  makeTensorFromDataId(\n    dataId: DataId, shape: number[], dtype: DataType,\n    backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const tensorInfo: TensorInfo = {dataId, shape, dtype};\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n  makeTensorFromTensorInfo(tensorInfo: TensorInfo, backend?: KernelBackend):\n      Tensor {\n    const {dataId, shape, dtype} = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a: Tensor, backend: KernelBackend): void {\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n    let bytes = 0;\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n  incRef(a: Tensor, backend: KernelBackend): void {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId: DataId, backend: KernelBackend) {\n    if (this.state.tensorInfo.has(dataId) &&\n        this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    // Don't count bytes for complex numbers as they are counted by their\n    // components.\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n\n    // Remove the reference to dataId if backend dispose the data successfully\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => (TensorContainer | Promise<TensorContainer>)):\n      Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: GradFunc, saved: Tensor[], attrs: NamedAttrMap): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>),\n          // Pass an add function to avoide a circular dep with `tape.ts`.\n          add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc: ForwardFunc<T> = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(\n            res.value instanceof Tensor,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.value` is a tensor');\n        util.assert(\n            util.isFunction(res.gradFunc),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy: T, saved: Tensor[]) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads: Tensor[] = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(\n            grads.length === inputs.length,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'the same number of tensors as inputs passed to f(...).');\n        util.assert(\n            grads.every(t => t instanceof Tensor),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'a list of only tensors.');\n        const gradMap: {[key: string]: () => Tensor} = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap,\n      });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace() as {} as {_tfengine: Engine};\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a: Tensor, b: Tensor): Tensor {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {a, b};\n  return ENGINE.runKernel(Add, inputs as {} as NamedTensorMap);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor,\n    add: (a: Tensor, b: Tensor) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined(): boolean {\n  return typeof navigator !== 'undefined' && navigator != null;\n}\n\nlet isMobileMockValue: boolean|undefined;\n\nexport function mockIsMobile(value: boolean|undefined) {\n  isMobileMockValue = value;\n}\n\nexport function isMobile(nav?: Navigator): boolean {\n  if (isMobileMockValue !== undefined) {\n    return isMobileMockValue;\n  }\n  if (nav || _isNavigatorDefined()) {\n    if (!nav) {\n      nav = navigator;\n    }\n    if (nav.product === 'ReactNative') {\n      return true;\n    }\n\n    const a = nav.userAgent || nav.vendor ||\n        // tslint:disable-next-line:no-any\n        (typeof window !== 'undefined' ? (window as any).opera : '');\n    // Use `navigator.userAgentData.mobile` as fallback.\n    if (!a) {\n      // tslint:disable-next-line:no-any\n      const navAny = nav as any;\n      return navAny.userAgentData && navAny.userAgentData.mobile;\n    }\n    // tslint:disable-next-line:max-line-length\n    return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n               .test(a) ||\n        // tslint:disable-next-line:max-line-length\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n            .test(a.substr(0, 4));\n  }\n  return false;\n}\n\nexport function isBrowser(): boolean {\n  return (typeof window !== 'undefined' && window.document != null) ||\n      //@ts-ignore\n      (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\n\nimport * as device_util from './device_util';\nimport {env} from './environment';\n\nconst ENV = env();\n\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Debugging mode is ON. The output of every math call will ' +\n        'be downloaded to CPU and checked for NaNs. ' +\n        'This significantly impacts performance.');\n  }\n});\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag(\n    'IS_NODE',\n    () => (typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined'));\n\n/** Whether this browser is Chrome. */\nENV.registerFlag(\n    'IS_CHROME',\n    () => typeof navigator !== 'undefined' && navigator != null &&\n        navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n        /Google Inc/.test(navigator.vendor));\n\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag(\n    'TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {DataType, TensorLike} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\n\nexport function inferShape(val: TensorLike, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) &&\n      env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric'|'string_or_numeric',\n    actualDType: DataType, argName: string, functionName: string) {\n  if (expectedDtype === 'string_or_numeric') {\n    return;\n  }\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype) as T;\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) =>\n          convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Complex, ComplexInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction complex_<T extends Tensor>(real: T|TensorLike, imag: T|TensorLike): T {\n  const $real = convertToTensor(real, 'real', 'complex');\n  const $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch(\n      $real.shape, $imag.shape,\n      `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n          `must match in call to tf.complex().`);\n\n  const inputs: ComplexInputs = {real: $real, imag: $imag};\n  return ENGINE.runKernel(Complex, inputs as {} as NamedTensorMap);\n}\n\nexport const complex = op({complex_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {TensorLike, TypedArray} from '../types';\nimport {DataType} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray} from '../util';\n\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(\n    values: TensorLike, shape: number[], inferredShape: number[],\n    dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  }\n  if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype) :\n      flatten(values as string[], [], true) as string[];\n  return ENGINE.makeTensor(values as TypedArray, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor<R extends Rank>(\n    values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R> {\n  const inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/* Type definitions for exporting and importing of models. */\n\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP: {[dtype: string]: number} = {\n  'float32': 4,\n  'float16': 2,\n  'int32': 4,\n  'uint16': 2,\n  'uint8': 1,\n  'bool': 1,\n  'complex64': 8\n};\n\n/**\n * A weight manifest.\n *\n * The weight manifest consists of an ordered list of weight-manifest groups.\n * Each weight-manifest group (\"group\" for short hereafter) consists of a\n * number of weight values stored in a number of paths.\n * See the documentation of `WeightManifestGroupConfig` below for more details.\n */\nexport declare type WeightsManifestConfig = WeightsManifestGroupConfig[];\n\n/**\n * A weight-manifest group.\n *\n * Consists of an ordered list of weight values encoded in binary format,\n * stored in an ordered list of paths.\n */\nexport declare interface WeightsManifestGroupConfig {\n  /**\n   * An ordered list of paths.\n   *\n   * Paths are intentionally abstract in order to be general. For example, they\n   * can be relative URL paths or relative paths on the file system.\n   */\n  paths: string[];\n\n  /**\n   * Specifications of the weights stored in the paths.\n   */\n  weights: WeightsManifestEntry[];\n}\n\n/**\n * Group to which the weight belongs.\n *\n * - 'optimizer': Weight from a stateful optimizer.\n */\nexport type WeightGroup = 'model'|'optimizer';\n\n/**\n * An entry in the weight manifest.\n *\n * The entry contains specification of a weight.\n */\nexport declare interface WeightsManifestEntry {\n  /**\n   * Name of the weight, e.g., 'Dense_1/bias'\n   */\n  name: string;\n\n  /**\n   * Shape of the weight.\n   */\n  shape: number[];\n\n  /**\n   * Data type of the weight.\n   */\n  dtype: 'float32'|'int32'|'bool'|'string'|'complex64';\n\n  /**\n   * Type of the weight.\n   *\n   * Optional.\n   *\n   * The value 'optimizer' indicates the weight belongs to an optimizer\n   * (i.e., used only during model training and not during inference).\n   */\n  group?: WeightGroup;\n\n  /**\n   * Information for dequantization of the weight.\n   */\n  quantization?: {\n    scale?: number,  // The scaling constant to multiply by.\n    min?: number,    // The (possibly nudged) minimum weight to add.\n       dtype: 'uint16'|'uint8'|'float16'  // The dtype of the quantized weights.\n  };\n}\n\n/**\n * Options for saving a model.\n * @innamespace io\n */\nexport interface SaveConfig {\n  /**\n   * Whether to save only the trainable weights of the model, ignoring the\n   * non-trainable ones.\n   */\n  trainableOnly?: boolean;\n\n  /**\n   * Whether the optimizer will be saved (if exists).\n   *\n   * Default: `false`.\n   */\n  includeOptimizer?: boolean;\n}\n\n/**\n * Result of a saving operation.\n */\nexport interface SaveResult {\n  /**\n   * Information about the model artifacts saved.\n   */\n  modelArtifactsInfo: ModelArtifactsInfo;\n\n  /**\n   * HTTP responses from the server that handled the model-saving request (if\n   * any). This is applicable only to server-based saving routes.\n   */\n  responses?: Response[];\n\n  /**\n   * Error messages and related data (if any).\n   */\n  errors?: Array<{}|string>;\n}\n\nexport declare interface ModelArtifactsInfo {\n  /**\n   * Timestamp for when the model is saved.\n   */\n  dateSaved: Date;\n\n  /**\n   * TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\n   * come in a JSON format and none of our IOHandlers support a non json\n   * format. We could conder replacing this with 'Binary' if we want to\n   * allow future handlers to save to non json formats (though they will\n   * probably want more information than 'Binary').\n   * Type of the model topology\n   *\n   * Type of the model topology\n   *\n   * Possible values:\n   *   - JSON: JSON config (human-readable, e.g., Keras JSON).\n   *   - GraphDef: TensorFlow\n   *     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\n   *     protocol buffer (binary).\n   */\n  modelTopologyType: 'JSON'|'GraphDef';\n\n  /**\n   * Size of model topology (Keras JSON or GraphDef), in bytes.\n   */\n  modelTopologyBytes?: number;\n\n  /**\n   * Size of weight specification or manifest, in bytes.\n   */\n  weightSpecsBytes?: number;\n\n  /**\n   * Size of weight value data, in bytes.\n   */\n  weightDataBytes?: number;\n}\n\n/** Model training configuration. */\nexport declare interface TrainingConfig {\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  // See\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/training_config.ts\n  /** Optimizer used for the model training. */\n  optimizer_config: {};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Loss function(s) for the model's output(s). */\n  loss: string|string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Metric function(s) for the model's output(s). */\n  metrics?: string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  weighted_metrics?: string[];\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  sample_weight_mode?: string;\n\n  loss_weights?: number[]|{[key: string]: number};\n}\n\n/**\n * The serialized artifacts of a model, including topology and weights.\n *\n * The `modelTopology`, `trainingConfig`, `weightSpecs` and `weightData` fields\n * of this interface are optional, in order to support topology- or weights-only\n * saving and loading.\n *\n * Note this interface is used internally in IOHandlers.  For the file format\n * written to disk as `model.json`, see `ModelJSON`.\n */\nexport declare interface ModelArtifacts {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology?: {}|ArrayBuffer;\n\n  /**\n   * Serialized configuration for the model's training.\n   */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weight specifications.\n   *\n   * This corresponds to the weightsData below.\n   */\n  weightSpecs?: WeightsManifestEntry[];\n\n  /**\n   * Binary buffer for all weight values concatenated in the order specified\n   * by `weightSpecs`.\n   */\n  weightData?: ArrayBuffer;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * Inputs and outputs signature for saved model.\n   */\n  signature?: {};\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {[key: string]: {}};\n\n  /**\n   * Initializer for the model.\n   */\n  modelInitializer?: {};\n}\n\n/**\n * The on-disk format of the `model.json` file.\n *\n * TF.js 1.0 always populates the optional fields when writing model.json.\n * Prior versions did not provide those fields.\n */\nexport declare interface ModelJSON {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology: {};\n\n  /** Model training configuration. */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weights manifest.\n   *\n   * The weights manifest consists of an ordered list of weight-manifest\n   * groups. Each weight-manifest group consists of a number of weight values\n   * stored in a number of paths. See the documentation of\n   * `WeightsManifestConfig` for more details.\n   */\n  weightsManifest: WeightsManifestConfig;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * Inputs and outputs signature for saved model.\n   */\n  signature?: {};\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {[key: string]: {}};\n\n  /**\n   * Initializer for the model.\n   */\n  modelInitializer?: {};\n}\n\n/**\n * Type definition for handlers of loading operations.\n */\nexport type LoadHandler = () => Promise<ModelArtifacts>;\n\n/**\n * Type definition for handlers of saving operations.\n */\nexport type SaveHandler = (modelArtifact: ModelArtifacts) =>\n    Promise<SaveResult>;\n\n/**\n * Interface for a model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport interface IOHandler {\n  save?: SaveHandler;\n  load?: LoadHandler;\n}\n\n/**\n * Type definition for handlers of synchronous loading operations.\n */\nexport type LoadHandlerSync = () => ModelArtifacts;\n\n/**\n * Type definition for handlers of synchronous saving operations.\n */\nexport type SaveHandlerSync = (modelArtifact: ModelArtifacts) => SaveResult;\n\n/**\n * Interface for a synchronous model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport type IOHandlerSync = {\n  save?: SaveHandlerSync;\n  load?: LoadHandlerSync;\n};\n\n/**\n * An interface for the manager of a model store.\n *\n * A model store is defined as a storage medium on which multiple models can\n * be stored. Each stored model has a unique `path` as its identifier.\n * A `ModelStoreManager` for the store allows actions including\n *\n * - Listing the models stored in the store.\n * - Deleting a model from the store.\n */\nexport interface ModelStoreManager {\n  /**\n   * List all models in the model store.\n   *\n   * @returns A dictionary mapping paths of existing models to their\n   *   model artifacts info. Model artifacts info include type of the model's\n   *   topology, byte sizes of the topology, weights, etc.\n   */\n  listModels(): Promise<{[path: string]: ModelArtifactsInfo}>;\n\n  /**\n   * Remove a model specified by `path`.\n   *\n   * @param path\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n   *   is successful).\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\n   */\n  removeModel(path: string): Promise<ModelArtifactsInfo>;\n}\n\n/**\n * Callback for the progress of a long-running action such as an HTTP\n * request for a large binary object.\n *\n * `fraction` should be a number in the [0, 1] interval, indicating how\n * much of the action has completed.\n */\nexport type OnProgressCallback = (fraction: number) => void;\n\n/** @innamespace io */\nexport interface LoadOptions {\n  /**\n   * RequestInit (options) for HTTP requests.\n   *\n   * For detailed information on the supported fields, see\n   * [https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\n   *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\n   */\n  requestInit?: RequestInit;\n\n  /**\n   * Progress callback.\n   */\n  onProgress?: OnProgressCallback;\n\n  /**\n   * A function used to override the `window.fetch` function.\n   */\n  fetchFunc?: Function;\n\n  /**\n   * Strict loading model: whether extraneous weights or missing\n   * weights should trigger an `Error`.\n   *\n   * If `true`, require that the provided weights exactly match those\n   * required by the layers. `false` means that both extra weights\n   * and missing weights will be silently ignored.\n   *\n   * Default: `true`.\n   */\n  strict?: boolean;\n\n  /**\n   * Path prefix for weight files, by default this is calculated from the\n   * path of the model JSON file.\n   *\n   * For instance, if the path to the model JSON file is\n   * `http://localhost/foo/model.json`, then the default path prefix will be\n   * `http://localhost/foo/`. If a weight file has the path value\n   * `group1-shard1of2` in the weight manifest, then the weight file will be\n   * loaded from `http://localhost/foo/group1-shard1of2` by default. However,\n   * if you provide a `weightPathPrefix` value of\n   * `http://localhost/foo/alt-weights`, then the weight file will be loaded\n   * from the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.\n   */\n  weightPathPrefix?: string;\n\n  /**\n   * Whether the module or model is to be loaded from TF Hub.\n   *\n   * Setting this to `true` allows passing a TF-Hub module URL, omitting the\n   * standard model file name and the query parameters.\n   *\n   * Default: `false`.\n   */\n  fromTFHub?: boolean;\n\n  /**\n   * An async function to convert weight file name to URL. The weight file\n   * names are stored in model.json's weightsManifest.paths field. By default we\n   * consider weight files are colocated with the model.json file. For example:\n   *     model.json URL: https://www.google.com/models/1/model.json\n   *     group1-shard1of1.bin url:\n   *        https://www.google.com/models/1/group1-shard1of1.bin\n   *\n   * With this func you can convert the weight file name to any URL.\n   */\n  weightUrlConverter?: (weightFileName: string) => Promise<string>;\n}\n\n/**\n * Additional options for Platform.fetch\n */\nexport interface RequestDetails {\n  /**\n   * Is this request for a binary file (as opposed to a json file)\n   */\n  isBinary?: boolean;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n    ]>): Promise<ModelArtifacts> {\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] =\n        await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler, LoadOptions} from './types';\n\nexport type IORouter = (url: string|string[], loadOptions?: LoadOptions) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], loadOptions?: LoadOptions):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      loadOptions?: LoadOptions): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers =\n    (url: string|string[], loadOptions?: LoadOptions) =>\n        IORouterRegistry.getLoadHandlers(url, loadOptions);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\nimport {BrowserIndexedDB, BrowserIndexedDBManager} from '../io/indexed_db';\nimport {BrowserLocalStorage, BrowserLocalStorageManager} from '../io/local_storage';\nimport {ModelStoreManagerRegistry} from '../io/model_management';\n\nimport {Platform} from './platform';\n\nexport class PlatformBrowser implements Platform {\n  // According to the spec, the built-in encoder can do only UTF-8 encoding.\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n  private textEncoder: TextEncoder;\n\n  fetch(path: string, init?: RequestInit): Promise<Response> {\n    return fetch(path, init);\n  }\n\n  now(): number {\n    return performance.now();\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser());\n\n  // Register LocalStorage IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n\n  // Register IndexedDB IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorBuffer} from '../tensor';\nimport {DataType, DataTypeMap, Rank, ShapeMap} from '../types';\nimport * as util from '../util';\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer<R extends Rank, D extends DataType = 'float32'>(\n    shape: ShapeMap[R], dtype: D = 'float32' as D,\n    values?: DataTypeMap[D]): TensorBuffer<R, D> {\n  dtype = dtype || 'float32' as D;\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer<R, D>(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Cast, CastAttrs, CastInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs: CastInputs = {x: $x};\n  const attrs: CastAttrs = {dtype};\n\n  return ENGINE.runKernel(\n      Cast, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const cast = op({cast_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Identity, IdentityInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction clone_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'clone', 'string_or_numeric');\n  const inputs: IdentityInputs = {x: $x};\n\n  // Note this op is called tf.identity in python. Hence the kernel name used\n  // here.\n  return ENGINE.runKernel(Identity, inputs as {} as NamedTensorMap);\n}\n\nexport const clone = op({clone_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function print<T extends Tensor>(x: T, verbose = false): void {\n  console.log(x.toString(verbose));\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Required side effectful code for tfjs-core\n\n// Set up Engine and ENV\nimport {getOrMakeEngine} from './engine';\ngetOrMakeEngine();\n\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n\n// Set up OpHandler\nimport {buffer} from './ops/buffer';\nimport {cast} from './ops/cast';\nimport {clone} from './ops/clone';\nimport {print} from './ops/print';\nimport {OpHandler, setOpHandler} from './tensor';\nconst opHandler: OpHandler = {\n  buffer,\n  cast,\n  clone,\n  print\n};\nsetOpHandler(opHandler);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers that pass through the in-memory ModelArtifacts format.\n */\n\nimport {IOHandler, IOHandlerSync, LoadHandler, ModelArtifacts, SaveHandler, SaveResult, TrainingConfig, WeightsManifestEntry} from './types';\n\nclass PassthroughLoader implements IOHandlerSync {\n  constructor(private readonly modelArtifacts?: ModelArtifacts) {}\n\n  load(): ModelArtifacts {\n    return this.modelArtifacts;\n  }\n}\n\nclass PassthroughSaver<R extends SaveResult | Promise<SaveResult>> {\n  constructor(\n    private readonly saveHandler: (artifacts: ModelArtifacts) => R) {}\n\n  save(modelArtifacts: ModelArtifacts): R {\n    return this.saveHandler(modelArtifacts);\n  }\n}\n\nclass PassthroughAsync implements IOHandler {\n  load?: LoadHandler;\n  save?: SaveHandler;\n\n  constructor(handler: IOHandlerSync) {\n    if (handler.load) {\n      this.load = () => Promise.resolve(handler.load());\n    }\n    if (handler.save) {\n      this.save = (modelArtifacts: ModelArtifacts) =>\n        Promise.resolve(handler.save(modelArtifacts));\n    }\n  }\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandler {\n\n  const args = arguments as unknown as Parameters<typeof fromMemory>;\n  return new PassthroughAsync(fromMemorySync(...args));\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandlerSync` that simply loads the provided data.\n */\nexport function fromMemorySync(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandlerSync {\n  if (arguments.length === 1) {\n    const isModelArtifacts =\n        (modelArtifacts as ModelArtifacts).modelTopology != null ||\n        (modelArtifacts as ModelArtifacts).weightSpecs != null;\n    if (isModelArtifacts) {\n      return new PassthroughLoader(modelArtifacts as ModelArtifacts);\n    } else {\n      // Legacy support: with only modelTopology.\n      // TODO(cais): Remove this deprecated API.\n      console.warn(\n          'Please call tf.io.fromMemory() with only one argument. ' +\n          'The argument should be of type ModelArtifacts. ' +\n          'The multi-argument signature of tf.io.fromMemory() has been ' +\n          'deprecated and will be removed in a future release.');\n      return new PassthroughLoader({modelTopology: modelArtifacts as {}});\n    }\n  } else {\n    // Legacy support.\n    // TODO(cais): Remove this deprecated API.\n    console.warn(\n        'Please call tf.io.fromMemory() with only one argument. ' +\n        'The argument should be of type ModelArtifacts. ' +\n        'The multi-argument signature of tf.io.fromMemory() has been ' +\n        'deprecated and will be removed in a future release.');\n    return new PassthroughLoader({\n      modelTopology: modelArtifacts as {},\n      weightSpecs,\n      weightData,\n      trainingConfig\n    });\n  }\n}\n\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     promise that resolves to a `SaveResult`.\n */\nexport function withSaveHandler(\n    saveHandler: (artifacts: ModelArtifacts) =>\n        Promise<SaveResult>): IOHandler {\n  return new PassthroughSaver(saveHandler);\n}\n\n/**\n * Creates an IOHandlerSync that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandlerSync(\n    saveHandler: (artifacts: ModelArtifacts) => SaveResult): IOHandlerSync {\n  return new PassthroughSaver<SaveResult>(saveHandler);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike, transposeA = false,\n    transposeB = false): T {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: BatchMatMulInputs = {a: $a, b: $b};\n  const attrs: BatchMatMulAttrs = {transposeA, transposeB};\n\n  return ENGINE.runKernel(\n      BatchMatMul, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const matMul = op({matMul_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OneHot, OneHotAttrs, OneHotInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n * `indices` used to encode prediction class must start from 0. For example,\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\n *  should be 1, and class 3 should be 2.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must\n * start from 0.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n * @param dtype The dtype of the output tensor, default to 'int32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1, offValue = 0,\n    dtype: DataType = 'int32'): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n\n  const inputs: OneHotInputs = {indices: $indices};\n  const attrs: OneHotAttrs = {dtype, depth, onValue, offValue};\n\n  return ENGINE.runKernel(\n      OneHot, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const oneHot = op({oneHot_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelBackend} from './backends/backend';\nimport {ENGINE, Engine, MemoryInfo, ProfileInfo, ScopeFn, TimingInfo} from './engine';\nimport {env} from './environment';\n\nimport {Platform} from './platforms/platform';\nimport {setDeprecationWarningFn, Tensor} from './tensor';\nimport {TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\n\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableProdMode(): void {\n  env().set('PROD', true);\n}\n\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableDebugMode(): void {\n  env().set('DEBUG', true);\n}\n\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings(): void {\n  env().set('DEPRECATION_WARNINGS_ENABLED', false);\n  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg: string) {\n  if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n    console.warn(\n        msg + ' You can disable deprecation warnings with ' +\n        'tf.disableDeprecationWarnings().');\n  }\n}\nsetDeprecationWarningFn(deprecationWarn);\n\n/**\n * Dispose all variables kept in backend engine.\n *\n * @doc {heading: 'Environment'}\n */\nexport function disposeVariables(): void {\n  ENGINE.disposeVariables();\n}\n\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n *\n * @doc {heading: 'Environment'}\n */\nexport function engine(): Engine {\n  return ENGINE;\n}\n\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function memory(): MemoryInfo {\n  return ENGINE.memory();\n}\n\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n * - `kernelNames`: an array of unique strings with just the names of the\n * kernels in the `kernels` array.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n *\n * @doc {heading: 'Performance', subheading: 'Profile'}\n */\nexport function profile(f: () => (TensorContainer | Promise<TensorContainer>)):\n    Promise<ProfileInfo> {\n  return ENGINE.profile(f);\n}\n\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function tidy<T extends TensorContainer>(\n    nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>): T {\n  return ENGINE.tidy(nameOrFn, fn);\n}\n\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function dispose(container: TensorContainer) {\n  const tensors = getTensorsInContainer(container);\n  tensors.forEach(tensor => tensor.dispose());\n}\n\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function keep<T extends Tensor>(result: T): T {\n  return ENGINE.keep(result);\n}\n\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\n * WebGL backend and the query timer extension is not available, this will\n * return an error object.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nexport function time(f: () => void): Promise<TimingInfo> {\n  return ENGINE.time(f);\n}\n\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n *\n * @doc {heading: 'Backends'}\n */\nexport function setBackend(backendName: string): Promise<boolean> {\n  return ENGINE.setBackend(backendName);\n}\n\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n *\n * @doc {heading: 'Backends'}\n */\nexport function ready(): Promise<void> {\n  return ENGINE.ready();\n}\n\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n *\n * @doc {heading: 'Backends'}\n */\nexport function getBackend(): string {\n  return ENGINE.backendName;\n}\n\n/**\n * Removes a backend and the registered factory.\n *\n * @doc {heading: 'Backends'}\n */\nexport function removeBackend(name: string): void {\n  ENGINE.removeBackend(name);\n}\n\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name: string): KernelBackend {\n  return ENGINE.findBackend(name);\n}\n\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name: string): () =>\n    KernelBackend | Promise<KernelBackend> {\n  return ENGINE.findBackendFactory(name);\n}\n\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n *\n * @doc {heading: 'Backends'}\n */\nexport function registerBackend(\n    name: string, factory: () => KernelBackend | Promise<KernelBackend>,\n    priority = 1): boolean {\n  return ENGINE.registerBackend(name, factory, priority);\n}\n\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case, you should call\n * 'await tf.ready()' before running other code.\n *\n * @doc {heading: 'Backends'}\n */\nexport function backend(): KernelBackend {\n  return ENGINE.backend;\n}\n\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName: string, platform: Platform) {\n  env().setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Imag, ImagInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction imag_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'imag');\n\n  const inputs: ImagInputs = {input: $input};\n  return ENGINE.runKernel(Imag, inputs as {} as NamedTensorMap);\n}\n\nexport const imag = op({imag_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Neg, NegInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction neg_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'neg');\n\n  const inputs: NegInputs = {x: $x};\n  return ENGINE.runKernel(Neg, inputs as {} as NamedTensorMap);\n}\nexport const neg = op({neg_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Real, RealInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction real_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'real');\n\n  const inputs: RealInputs = {input: $input};\n  return ENGINE.runKernel(Real, inputs as {} as NamedTensorMap);\n}\n\nexport const real = op({real_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {tidy} from '../globals';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {complex} from './complex';\nimport {imag} from './imag';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {real} from './real';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(\n    x: T|TensorLike, perm?: number[], conjugate?: boolean): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(\n          Transpose, {x: $real} as {} as NamedTensorMap,\n          attrs as {} as NamedAttrMap);\n      $imag = ENGINE.runKernel(\n          Transpose, {x: $imag} as {} as NamedTensorMap,\n          attrs as {} as NamedAttrMap);\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n      return complex($real, $imag);\n    });\n  }\n\n  return ENGINE.runKernel(\n      Transpose, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const transpose = op({transpose_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport {matMul} from './mat_mul';\nimport {oneHot} from './one_hot';\nimport {op} from './operation';\nimport {transpose} from './transpose';\n\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function confusionMatrix_(\n    labels: Tensor1D|TensorLike, predictions: Tensor1D|TensorLike,\n    numClasses: number): Tensor2D {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'confusionMatrix');\n\n  util.assert(\n      numClasses == null || numClasses > 0 && Number.isInteger(numClasses),\n      () => `If provided, numClasses must be a positive integer, ` +\n          `but got ${numClasses}`);\n  util.assert(\n      $labels.rank === 1,\n      () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert(\n      $predictions.rank === 1,\n      () => `Expected the rank of predictions to be 1, ` +\n          `but got ${$predictions.rank}`);\n  util.assert(\n      $labels.shape[0] === $predictions.shape[0],\n      () => `Mismatch in the number of examples: ` +\n          `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n          `Labels and predictions should have the same number of elements.`);\n  util.assert(\n      numClasses > 0 && Number.isInteger(numClasses),\n      () => `numClasses is required to be a positive integer, but got ` +\n          `${numClasses}`);\n  // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses) as Tensor2D;\n  const oneHotPredictions =\n      oneHot(cast($predictions, 'int32'), numClasses) as Tensor2D;\n  const oneHotLabelsT: Tensor2D = transpose(oneHotLabels);\n  const product: Tensor2D = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, 'int32');\n}\n\nexport const confusionMatrix = op({confusionMatrix_});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const result: number[] = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike3D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as {} as NamedTensorMap,\n        attrs as {} as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext =\n            document.createElement('canvas').getContext(\n                '2d', {willReadFrequently: true}) as CanvasRenderingContext2D;\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${$img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\nexport const fromPixels = op({fromPixels_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor: TensorInfo, indices: TensorInfo):\n    [number[], number, number, number[]] {\n  const tensorRank = tensor.shape.length;\n  const indicesRank = indices.shape.length;\n  if (tensorRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the input to be rank 1 or higher,' +\n        ` but the rank was ${tensorRank}.`);\n  }\n  if (indicesRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indicesRank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(\n        'tf.gatherND() expects the indices to be int32 type,' +\n        ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indicesRank - 1] > tensorRank) {\n    throw new Error(\n        'index innermost dimension length must be <= tensor rank; saw: ' +\n        `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n  }\n\n  if (sizeFromShape(tensor.shape) === 0) {\n    throw new Error(\n        'Requested more than 0 entries, but input is empty.' +\n        ` Input shape: ${tensor.shape}.`);\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n\n  const inputShape = tensor.shape;\n\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensorRank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n\n  const strides =\n      [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n       1].slice(0, sliceRank);\n\n  return [resultShape, nResult, sliceSize, strides];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(\n    shape: number[], indices: Tensor, updates: Tensor) {\n  const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n      `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n      `, indices.shape: ${indices.shape}, shape: ${shape}` +\n      `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(\n        shapeError +\n        ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(\n        shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${\n              indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d + batchDim}] (${\n              updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${\n              shape[d + batchDim]})`);\n    }\n  }\n}\n\nexport interface ScatterShapeInfo {\n  sliceRank: number;\n  numUpdates: number;\n  sliceSize: number;\n  strides: number[];\n  outputSize: number;\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(\n    updates: Tensor, indices: Tensor, shape: number[]) {\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the updates to be rank 1 or higher,' +\n        ` but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${\n        indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(\n        `Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${\n          indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${\n          updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(\n    updates: TensorInfo, indices: TensorInfo,\n    shape: number[]): ScatterShapeInfo {\n  // Calculate the number of dimensions in indices\n  const indicesRank = indices.shape.length;\n  const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n\n  // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n  const totalNd = shape.length;\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {sliceRank, numUpdates, sliceSize, strides, outputSize};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../kernel_registry';\nimport * as util from '../util';\n\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\n\n// Sparse slicing specification\n// if one does foo[3:5, ..., -3], the begin, end and strides will have length\n// of 3.\ninterface StridedSliceSparseSpec {\n  dims: number;\n  numAddAxisAfterEllipsis: number;\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\n// Dense slicing specification\n// all ellipses and newaxis are expanded out. So if foo[3:5, ..., -3] where foo\n// is 10 dimensional, each array of begin, end, strides will have 10 entries\n// where as the sparse can have length less than the rank of foo.\ninterface StridedSliceDenseSpec {\n  dims: number;\n  beginMask?: number;\n  endMask?: number;\n  beginValid: boolean;\n  endValid: boolean;\n  begin?: number[];\n  end?: number[];\n  strides?: number[];\n  // This array helps construct the final shape of the slice.\n  // The final tensor is reduced in rank whenever a single index e.g. foo[3]\n  // is called for. The final tensor increases in rank with newAxis entries.\n  // If an index in this array is positive, the size of the dimension is\n  // obtained from canonical end-begin.  Otherwise, if it is a NEW_AXIS, it will\n  // be 1. A shrunk dimension is skipped.\n  finalShapeGatherIndices?: number[];\n  // This array has the same size as finalShapeGatherIndices, but it remembers\n  // the sparse index that a dimension comes from, instead of dense index.\n  // A -1 in this vector means the index is not from the sparse input.\n  finalShapeGatherIndicesSparse?: number[];\n  inputShapeGatherIndicesSparse?: number[];\n  // The dense indexed shrink mask is which processing dimensions should be\n  // shrunk. For example, if foo.shape = [10, 10, 10, 10], foo[3, ..., 5] has\n  // sparseShrinkAxisMask of 5 (0101) and denseShrinkAxisMask of 9 (1001),\n  // yielding a final shape [10, 10].\n  shrinkAxisMask?: number;\n}\n\nexport type SliceInfo = {\n  finalShapeSparse: number[],\n  finalShape: number[],\n  isIdentity: boolean,\n  sliceDim0: boolean,\n  isSimpleSlice: boolean,\n  begin: number[],\n  end: number[],\n  strides: number[]\n};\n\nexport function assertParamsValid(\n    input: TensorInfo, begin: number[], size: number[]): void {\n  const inputRank = input.shape.length;\n  util.assert(\n      inputRank === begin.length,\n      () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${inputRank}).`);\n  util.assert(\n      inputRank === size.length,\n      () => `Error in slice${inputRank}D: Length of size ${size} must ` +\n          `match the rank of the array (${inputRank}).`);\n\n  for (let i = 0; i < inputRank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                  input.shape[i]})`);\n  }\n}\n\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask: number): number[] {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\n\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(\n    begin: number[], end: number[], strides: number[]): number[] {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(\n    strides: number[], ellipsisInsertionIndex: number, numElidedAxes: number,\n    inputShape: number[]): number[] {\n  const newStrides = [...strides];\n  for (let i = newStrides.length; i < inputShape.length; i++) {\n    newStrides.push(1);\n  }\n  for (let i = 0; i < numElidedAxes; i++) {\n    if (i === 0) {\n      newStrides[ellipsisInsertionIndex] = 1;\n    } else {\n      newStrides.splice(\n          ellipsisInsertionIndex, 0 /* num elements to delete */,\n          1 /* element to add */);\n      newStrides.pop();\n    }\n  }\n  return newStrides;\n}\n\nfunction unnormalizeAxis(\n    ellipsisInsertionIndex: number, numElidedAxes: number,\n    normalizedAxis: number): number {\n  if (normalizedAxis <= ellipsisInsertionIndex) {\n    return normalizedAxis;\n  }\n\n  return normalizedAxis - (numElidedAxes - 1);\n}\n\nfunction getElidedAxes(numElidedAxes: number, ellipsisInsertionIndex: number) {\n  const elidedAxes = [];\n  for (let i = 0; i < numElidedAxes; i++) {\n    elidedAxes.push(ellipsisInsertionIndex + i);\n  }\n  return elidedAxes;\n}\n\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(\n    inputShape: number[], ellipsisAxes: number[], numInterpolatedAxes: number,\n    begin: number[], end: number[], strides: number[], beginMask: number,\n    endMask: number,\n    ellipsisMask: number): {begin: number[], end: number[], strides: number[]} {\n  const inputRank = inputShape.length;\n  let normalizedBegin = new Array(inputRank),\n      normalizedEnd = new Array(inputRank),\n      normalizedStrides = new Array(inputRank);\n  if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n    const fullIndex = ellipsisAxes[0];\n\n    // The ellipsis applies to the masked index as well as any dimensions\n    // that are interpolated.\n    const numElidedAxes = numInterpolatedAxes + 1;\n    normalizedBegin = startIndicesWithElidedDims(\n        beginMask, fullIndex, numElidedAxes, begin, inputShape);\n    normalizedEnd = stopIndicesWithElidedDims(\n        endMask, fullIndex, numElidedAxes, end, inputShape);\n    normalizedStrides =\n        stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n  } else {\n    for (let axis = 0; axis < inputRank; axis++) {\n      normalizedBegin[axis] = startForAxis(\n          beginMask, begin, strides, inputShape, axis, ellipsisMask);\n      normalizedEnd[axis] =\n          stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n    }\n  }\n\n  return {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  };\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(\n    beginMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalBegin: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = 0;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalBegin[originalAxis];\n      if (beginMask & 1 << originalAxis) {\n        originalValue = 0;\n      }\n\n      newIndices[axis] = originalValue;\n    }\n  }\n  return newIndices;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(\n    endMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalEnd: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = Number.MAX_SAFE_INTEGER;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalEnd[originalAxis];\n      if (endMask & 1 << originalAxis) {\n        originalValue = Number.MAX_SAFE_INTEGER;\n      }\n      newIndices[axis] = originalValue;\n    }\n  }\n\n  for (let i = 0; i < newIndices.length; i++) {\n    // Handle negative indices\n    const axisSize = inputShape[i];\n    if (newIndices[i] < 0) {\n      newIndices[i] += axisSize;\n    }\n    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n  }\n  return newIndices;\n}\n\nexport function stridesForAxis(\n    strides: number[], axis: number, ellipsisMask: number): number {\n  let stride = strides[axis];\n  if (ellipsisMask & (1 << axis) || stride == null) {\n    stride = 1;\n  }\n\n  return stride;\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or the begin index is not set\n  // for the axis.\n  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or if the stop index is not\n  // set for this axis.\n  if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(\n    shape: number[], begin: number[], size: number[]) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function computeFlatOffset(begin: number[], strides: number[]): number {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\n\nexport function parseSliceParams(\n    x: TensorInfo, begin: number|number[], size?: number|number[]) {\n  // The following logic allows for more ergonomic calls.\n  let begin_: number[];\n  const xRank = x.shape.length;\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n  } else if (begin.length < xRank) {\n    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach(d => {\n    util.assert(\n        d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_: number[];\n  if (size == null) {\n    size_ = new Array(xRank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array(xRank - 1).fill(-1)];\n  } else if (size.length < xRank) {\n    size_ = size.concat(new Array(xRank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(\n          d === -1,\n          () => `Negative size values should be exactly -1 but got ` +\n              `${d} for the slice() size at index ${i}.`);\n      return x.shape[i] - begin_[i];\n    }\n  });\n  return [begin_, size_];\n}\n\n// Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\nexport function sliceInfo(\n    xShape: number[], begin: number[], end: number[], strides: number[],\n    beginMask: number, endMask: number, ellipsisMask: number,\n    newAxisMask: number, shrinkAxisMask: number): SliceInfo {\n  let stridesNonNull;\n  if (strides == null) {\n    stridesNonNull = new Array(begin.length);\n    stridesNonNull.fill(1);\n  } else {\n    stridesNonNull = strides;\n  }\n\n  // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n  // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n  // of 2. When i is a power of 2, i & (i - 1) is always 0.\n  // Also ref:\n  // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n  if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n\n  // Step 1: Account for ellipsis and new axis.\n  // Check for ellipsis and count how many non-newaxis there are after.\n  let ellipsisSeen = false;\n\n  const sparseSpec: StridedSliceSparseSpec = {\n    dims: stridesNonNull.length,\n    numAddAxisAfterEllipsis: 0,\n    begin: begin.slice(),\n    end: end.slice(),\n    strides: stridesNonNull.slice(),\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  for (let i = 0; i < sparseSpec.dims; i++) {\n    if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {\n      sparseSpec.numAddAxisAfterEllipsis++;\n    }\n    if ((1 << i) & ellipsisMask) {\n      ellipsisSeen = true;\n    }\n  }\n  // If no ellipsis insert one at the end.\n  if (!ellipsisSeen) {\n    sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);\n    sparseSpec.dims++;  // this effects loop iteration below\n  }\n\n  // Step 2: Make a sparse spec into a full index spec.\n  //\n  // The sparse spec deos not correspond to the number of dimensions.\n  // Make a dense spec that cooresponds to the number of dimensions.\n  //\n  // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n  // produce the missing beginMask for the first two dimensions i.e. from\n  // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n  // endMask = 7 (111).\n  const denseSpec: StridedSliceDenseSpec = {\n    dims: xShape.length,\n    beginMask: 0,\n    endMask: 0,\n    beginValid: false,\n    endValid: false\n  };\n\n  buildDenseSpec(sparseSpec, denseSpec);\n\n  // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n  // and bounds check.\n  let isIdentity = true;\n  let sliceDim0 = true;\n  let isSimpleSlice = true;\n  const processingShape = [];\n  const finalShape = [];\n\n  for (let i = 0; i < xShape.length; ++i) {\n    if (denseSpec.strides[i] === 0) {\n      throw Error(`strides[${i}] must be non-zero`);\n    }\n    const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));\n    const dimI = xShape[i];\n    if (dimI === -1) {\n      processingShape.push(shrinkI ? 1 : -1);\n      continue;\n    }\n\n    const masks =\n        [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];\n    const validRange = [\n      denseSpec.strides[i] > 0 ? 0 : -1,\n      denseSpec.strides[i] > 0 ? dimI : dimI - 1\n    ];\n\n    if (shrinkI && denseSpec.strides[i] <= 0) {\n      throw Error('only stride 1 allowed on non-range indexing.');\n    }\n\n    isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);\n\n    const beginAndEndMasked =\n        !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));\n\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      if (shrinkI) {\n        // If we are shrinking, the end index is now possibly incorrect. In\n        // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n        // and canonical puts these to n-1 and 0, which implies a degenerate\n        // interval. Fortunately, it is now safe to re-create end as begin + 1.\n        const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :\n                                              denseSpec.begin[i];\n        denseSpec.begin[i] = xFwd;\n        denseSpec.end[i] = denseSpec.begin[i] + 1;\n        if (xFwd < 0 || xFwd >= dimI) {\n          throw Error(`slice index ${denseSpec.begin[i]} of dimension ${\n              i} out of bounds.`);\n        }\n      } else {\n        denseSpec.begin[i] = canonical(\n            denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks,\n            validRange);\n        denseSpec.end[i] = canonical(\n            denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n      }\n      // Update optimization values\n      const takeAllInDimension = denseSpec.strides[i] === 1 &&\n          denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n      isIdentity = isIdentity && takeAllInDimension;\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);\n    } else {\n      isIdentity =\n          isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);\n    }\n    // Compute the processing shape (the intermediate Eigen will produce)\n    let intervalLength;\n    let knownInterval = false;\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n      knownInterval = true;\n    } else if (shrinkI) {\n      // The dimension is still known as 1 for the processingShape, but will be\n      // discarded for the final shape.\n      intervalLength = 1;\n      knownInterval = true;\n    } else if (beginAndEndMasked) {\n      // Even if we don't have values for begin or end, we do know that this\n      // dimension covers the whole interval. If we have shape information for\n      // this dimension, that tells us the interval length.\n      if (dimI >= 0) {\n        if (denseSpec.strides[i] < 0) {\n          intervalLength = -dimI;\n        } else {\n          intervalLength = dimI;\n        }\n        knownInterval = true;\n      }\n    }\n    if (knownInterval) {\n      let sizeI;\n      // Hold zero if the interval is degenerate, otherwise account for\n      // remainder\n      if (intervalLength === 0 ||\n          ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {\n        sizeI = 0;\n      } else {\n        sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +\n            (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n      }\n      processingShape.push(sizeI);\n    } else {\n      processingShape.push(-1);\n    }\n  }\n\n  // Step 4: Compute the final shape\n  //\n  // newAxis will increase dimension by 1 (with a one-size dimension)\n  // slices like foo[3, ...] will reduce dimension by 1.\n  // This cannot be done earlier, because it depends on Step 3.\n  for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length;\n       ++denseDim) {\n    const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n    if (gatherIndex >= 0) {\n      finalShape.push(processingShape[gatherIndex]);\n    } else if (gatherIndex === NEW_AXIS) {\n      finalShape.push(1);\n    }\n  }\n\n  const finalShapeSparse = finalShape.filter(\n      (dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n\n  return {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: denseSpec.begin,\n    end: denseSpec.end,\n    strides: denseSpec.strides\n  };\n}\n\nfunction buildDenseSpec(\n    sparse: StridedSliceSparseSpec, dense: StridedSliceDenseSpec) {\n  dense.beginMask = 0;\n  dense.endMask = 0;\n  dense.shrinkAxisMask = 0;\n\n  let fullIndex = 0;\n  dense.beginValid = sparse.begin != null;\n  dense.endValid = sparse.end != null;\n\n  dense.begin = new Array(dense.dims);\n  dense.end = new Array(dense.dims);\n  dense.strides = new Array(dense.dims);\n  dense.finalShapeGatherIndices = [];\n  dense.finalShapeGatherIndicesSparse = [];\n  dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n\n  for (let i = 0; i < sparse.dims; i++) {\n    if ((1 << i) & sparse.ellipsisMask) {\n      // Only the bit that has ellipsis will fall in this condition.\n      // Expand the ellipsis into the appropriate indices\n      // Note: this only works because we guaranteed one ellipsis.\n      const nextIndex = Math.min(\n          dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis,\n          dense.dims);\n      for (; fullIndex < nextIndex; fullIndex++) {\n        // newAxis aren't real axis so you have to skip.\n        dense.begin[fullIndex] = 0;\n        dense.end[fullIndex] = 0;\n        dense.strides[fullIndex] = 1;\n        dense.beginMask |= (1 << fullIndex);\n        dense.endMask |= (1 << fullIndex);\n        dense.finalShapeGatherIndices.push(fullIndex);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      }\n    } else if ((1 << i) & sparse.newAxisMask) {\n      // Only the bit that has newAxis will fall in this condition.\n      dense.finalShapeGatherIndices.push(NEW_AXIS);\n      dense.finalShapeGatherIndicesSparse.push(-1);\n    } else {\n      if (fullIndex === dense.begin.length) {\n        throw Error(\n            `Index out of range using input dim ${fullIndex}; input ` +\n            `has only ${dense.dims} dims, ${dense.begin.length}.`);\n      }\n\n      // Gather slicing spec into appropriate index.\n      if (sparse.begin != null) {\n        dense.begin[fullIndex] = sparse.begin[i];\n      }\n      if (sparse.end != null) {\n        dense.end[fullIndex] = sparse.end[i];\n      }\n      dense.strides[fullIndex] = sparse.strides[i];\n      if (sparse.beginMask & (1 << i)) {\n        dense.beginMask |= (1 << fullIndex);\n      }\n      if (sparse.endMask & (1 << i)) {\n        dense.endMask |= (1 << fullIndex);\n      }\n      // If shrink, record where to get the dimensionality from (i.e. newAxis)\n      // creates a fake 1 size dimension. Also remember shrink axis (now in\n      // dense form) so we can ignore dense.end below.\n      if (sparse.shrinkAxisMask & (1 << i)) {\n        dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.shrinkAxisMask |= (1 << fullIndex);\n      } else {\n        dense.finalShapeGatherIndices.push(fullIndex);\n        // Remember that where in the sparse shape the dense dim comes from.\n        dense.finalShapeGatherIndicesSparse.push(i);\n      }\n      dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      fullIndex++;\n    }\n  }\n}\n\nfunction canonical(\n    x: number, c: number, strideI: number, dimI: number, masks: number[],\n    validRange: number[]) {\n  if (masks[c]) {\n    return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];\n  } else {\n    const xFwd = x < 0 ? dimI + x : x;  // make negative indices positive\n    return xFwd < validRange[0] ? validRange[0] :\n                                  xFwd > validRange[1] ? validRange[1] : xFwd;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from './util';\n\n/**\n * Types to support JSON-esque data structures internally.\n *\n * Internally ConfigDict's use camelCase keys and values where the\n * values are class names to be instantiated.  On the python side, these\n * will be snake_case.  Internally we allow Enums into the values for better\n * type safety, but these need to be converted to raw primitives (usually\n * strings) for round-tripping with python.\n *\n * toConfig returns the TS-friendly representation. model.toJSON() returns\n * the pythonic version as that's the portable format.  If you need to\n * python-ify a non-model level toConfig output, you'll need to use a\n * convertTsToPythonic from serialization_utils in -Layers.\n *\n */\nexport declare type ConfigDictValue =\n    boolean | number | string | null | ConfigDictArray | ConfigDict;\nexport declare interface ConfigDict {\n  [key: string]: ConfigDictValue;\n}\nexport declare interface ConfigDictArray extends Array<ConfigDictValue> {}\n\n/**\n * Type to represent the class-type of Serializable objects.\n *\n * Ie the class prototype with access to the constructor and any\n * static members/methods. Instance methods are not listed here.\n *\n * Source for this idea: https://stackoverflow.com/a/43607255\n */\nexport declare type SerializableConstructor<T extends Serializable> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T; className: string; fromConfig: FromConfigMethod<T>;\n};\nexport declare type FromConfigMethod<T extends Serializable> =\n    (cls: SerializableConstructor<T>, config: ConfigDict) => T;\n\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport abstract class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName(): string {\n    return (this.constructor as SerializableConstructor<Serializable>)\n        .className;\n  }\n\n  /**\n   * Return all the non-weight state needed to serialize this object.\n   */\n  abstract getConfig(): ConfigDict;\n\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config);\n  }\n}\n\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  private static instance: SerializationMap;\n  classNameMap: {\n    [className: string]:\n        [SerializableConstructor<Serializable>, FromConfigMethod<Serializable>]\n  };\n\n  private constructor() {\n    this.classNameMap = {};\n  }\n\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap(): SerializationMap {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n\n  /**\n   * Registers the class as serializable.\n   */\n  static register<T extends Serializable>(cls: SerializableConstructor<T>) {\n    SerializationMap.getMap().classNameMap[cls.className] =\n        [cls, cls.fromConfig];\n  }\n}\n\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example:\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n *\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass<T extends Serializable>(\n    cls: SerializableConstructor<T>) {\n  assert(\n      cls.className != null,\n      () => `Class being registered does not have the static className ` +\n          `property defined.`);\n  assert(\n      typeof cls.className === 'string',\n      () => `className is required to be a string, but got type ` +\n          typeof cls.className);\n  assert(\n      cls.className.length > 0,\n      () => `Class being registered has an empty-string as its className, ` +\n          `which is disallowed.`);\n\n  SerializationMap.register(cls);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, encodeString, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error(\n        'Expected ArrayBuffer to be of length ' +\n        `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(\n          `Expected ArrayBuffer value at ${i} to be ` +\n          `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a: RecursiveArray<{}>):\n    RecursiveArray<Uint8Array> {\n  for (let i = 0; i < (a as Array<{}>).length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val as string);\n    }\n  }\n  return a as RecursiveArray<Uint8Array>;\n}\n\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source: HTMLSourceElement):\n    Promise<HTMLVideoElement> {\n  const video = document.createElement('video');\n  if ('playsInline' in video) {\n    // tslint:disable-next-line:no-any\n    (video as any).playsInline = true;\n  }\n  video.muted = true;\n  video.loop = true;\n  video.style.position = 'fixed';\n  video.style.left = '0px';\n  video.style.top = '0px';\n\n  video.preload = 'auto';\n  video.appendChild(source);\n  return new Promise(resolve => {\n    video.addEventListener('loadeddata', _ => resolve(video));\n    video.load();\n  });\n}\n\nexport async function play(video: HTMLVideoElement) {\n  await video.play();\n  if ('requestVideoFrameCallback' in video) {\n    await new Promise(resolve => {\n      // tslint:disable-next-line:no-any\n      (video as any).requestVideoFrameCallback(resolve);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Add, AddInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction add_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'add');\n  let $b = convertToTensor(b, 'b', 'add');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: AddInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Add, inputs as {} as NamedTensorMap);\n}\n\nexport const add = op({add_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {FloorDiv, FloorDivInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction floorDiv_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'floorDiv');\n  let $b = convertToTensor(b, 'b', 'floorDiv');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: FloorDivInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(FloorDiv, inputs as {} as NamedTensorMap);\n}\n\nexport const floorDiv = op({floorDiv_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RealDiv, RealDivInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {floorDiv} from './floorDiv';\nimport {op} from './operation';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction div_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n    return floorDiv($a, $b);\n  }\n\n  const inputs: RealDivInputs = {a: $a, b: $b};\n  const attrs = {};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(RealDiv, inputs as {} as NamedTensorMap, attrs) as T;\n}\n\nexport const div = op({div_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Multiply, MultiplyInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mul_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mul');\n  let $b = convertToTensor(b, 'b', 'mul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: MultiplyInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Multiply, inputs as {} as NamedTensorMap);\n}\nexport const mul = op({mul_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Abs, AbsInputs, ComplexAbs, ComplexAbsInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'abs');\n\n  if ($x.dtype === 'complex64') {\n    const inputs: ComplexAbsInputs = {x: $x};\n    return ENGINE.runKernel(ComplexAbs, inputs as {} as NamedTensorMap);\n  } else {\n    const inputs: AbsInputs = {x: $x};\n    return ENGINE.runKernel(Abs, inputs as {} as NamedTensorMap);\n  }\n}\n\nexport const abs = op({abs_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Acos, AcosInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.acos().print();  // or tf.acos(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acos');\n  const inputs: AcosInputs = {x: $x};\n\n  return ENGINE.runKernel(Acos, inputs as {} as NamedTensorMap);\n}\nexport const acos = op({acos_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Acosh, AcoshInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n * `acosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\n *\n * x.acosh().print();  // or tf.acosh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acosh');\n  const inputs: AcoshInputs = {x: $x};\n\n  return ENGINE.runKernel(Acosh, inputs as {} as NamedTensorMap);\n}\nexport const acosh = op({acosh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {AddN, AddNInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const inputs: AddNInputs = $tensors;\n\n  return ENGINE.runKernel(AddN, inputs as {} as NamedTensorMap);\n}\n\nexport const addN = op({addN_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {All, AllAttrs, AllInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction all_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'all', 'bool');\n\n  const inputs: AllInputs = {x: $x};\n  const attrs: AllAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      All, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const all = op({all_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Any, AnyAttrs, AnyInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.any().print();  // or tf.any(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.any(axis).print();  // or tf.any(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction any_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'any', 'bool');\n\n  const inputs: AnyInputs = {x: $x};\n  const attrs: AnyAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Any, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\n// tslint:disable-next-line:variable-name\nexport const any = op({any_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMax_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'argMax');\n\n  const inputs: ArgMaxInputs = {x: $x};\n  const attrs: ArgMaxAttrs = {axis};\n\n  return ENGINE.runKernel(\n      ArgMax, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const argMax = op({argMax_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ArgMin, ArgMinAttrs, ArgMinInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the indices of the minimum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMin().print();  // or tf.argMin(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMin_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'argMin');\n\n  const inputs: ArgMinInputs = {x: $x};\n  const attrs: ArgMinAttrs = {axis};\n\n  return ENGINE.runKernel(\n      ArgMin, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const argMin = op({argMin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Asin, AsinInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asin().print();  // or tf.asin(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asin');\n  const inputs: AsinInputs = {x: $x};\n\n  return ENGINE.runKernel(Asin, inputs as {} as NamedTensorMap);\n}\nexport const asin = op({asin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Asinh, AsinhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n * `asinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asinh().print();  // or tf.asinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asinh');\n\n  const inputs: AsinhInputs = {x: $x};\n\n  return ENGINE.runKernel(Asinh, inputs as {} as NamedTensorMap);\n}\nexport const asinh = op({asinh_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atan, AtanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.atan().print();  // or tf.atan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atan');\n\n  const inputs: AtanInputs = {x: $x};\n\n  return ENGINE.runKernel(Atan, inputs as {} as NamedTensorMap);\n}\nexport const atan = op({atan_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atan2, Atan2Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n *\n * tf.atan2(a, b).print()\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan2_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'atan2');\n  let $b = convertToTensor(b, 'b', 'atan2');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: Atan2Inputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Atan2, inputs as {} as NamedTensorMap);\n}\n\nexport const atan2 = op({atan2_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atanh, AtanhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n * `atanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.atanh().print();  // or tf.atanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atanh');\n\n  const inputs: AtanhInputs = {x: $x};\n\n  return ENGINE.runKernel(Atanh, inputs as {} as NamedTensorMap);\n}\nexport const atanh = op({atanh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\ntype PadType = 'SAME'|'VALID'|'NUMBER'|'EXPLICIT';\n\n// For NHWC should be in the following form:\n//  [[0, 0], [pad_top,pad_bottom], [pad_left, pad_right], [0, 0]]\n// For NCHW should be in the following form:\n//  [[0, 0], [0, 0], [pad_top,pad_bottom], [pad_left, pad_right]]\n// Reference: https://www.tensorflow.org/api_docs/python/tf/nn/conv2d\nexport type ExplicitPadding =\n    [[number, number], [number, number], [number, number], [number, number]];\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: PadType\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: PadType\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(\n    inputShape: [number, number, number, number],\n    filterShape: [number, number, number], strides: number|[number, number],\n    pad: 'same'|'valid'|number, dataFormat: 'NHWC' = 'NHWC',\n    dilations: number|[number, number]) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape =\n      [...filterShape, inputChannels] as [number, number, number, number];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n\n  return computeConv2DInfo(\n      inputShape, $filterShape, strides, dilations, pad,\n      null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil', depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode, dataFormat);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number], fieldSize: number,\n    outChannels: number, stride: number, zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n\n  const outputDepths =\n      round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number|ExplicitPadding, inHeight: number,\n    inWidth: number, strideHeight: number, strideWidth: number,\n    filterHeight: number, filterWidth: number,\n    roundingMode: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|\n    'channelsLast'): {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n        'VALID' :\n        'EXPLICIT';\n    padInfo = {top, bottom, left, right, type: padType};\n    outHeight = round(\n        (inHeight - filterHeight + top + bottom) / strideHeight + 1,\n        roundingMode);\n    outWidth = round(\n        (inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad,\n        roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(\n    opDesc: string, pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(\n          `Error in ${opDesc}: pad must be an integer when using `  +\n          `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(\n        util.isInt(pad),\n          () => `Error in ${opDesc}: pad must be an integer when using ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      (pad as ExplicitPadding).forEach(p => {p.forEach(v =>{\n        util.assert(\n          util.isInt(v),\n            () => `Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reshape, ReshapeAttrs, ReshapeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction reshape_<R extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R]): Tensor<R> {\n  const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');\n\n  const inputs: ReshapeInputs = {x: $x};\n  const attrs: ReshapeAttrs = {shape};\n  return ENGINE.runKernel(\n      Reshape, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\nexport const reshape = op({reshape_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction avgPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n  const dilations = 1;\n\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('avgPool', pad, dimRoundingMode);\n  const inputs: AvgPoolInputs = {x: x4D};\n  const attrs: AvgPoolAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  let res = ENGINE.runKernel(\n                AvgPool, inputs as {} as NamedTensorMap,\n                attrs as {} as NamedAttrMap) as T;\n\n  res = cast(res, $x.dtype);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res;\n}\n\nexport const avgPool = op({avgPool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 3D average pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction avgPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  checkPadOnDimRoundingMode('avgPool3d', pad, dimRoundingMode);\n  const inputs: AvgPool3DInputs = {x: x5D};\n  const attrs:\n      AvgPool3DAttrs = {filterSize, strides, pad, dimRoundingMode, dataFormat};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  let res = ENGINE.runKernel(\n                AvgPool3D, inputs as {} as NamedTensorMap,\n                attrs as {} as NamedAttrMap) as T;\n\n  res = cast(res, x5D.dtype);\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const avgPool3d = op({avgPool3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Concat, ConcatAttrs, ConcatInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\n\nimport {clone} from './clone';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction concat_<T extends Tensor>(tensors: Array<T|TensorLike>, axis = 0): T {\n  assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n\n  const $tensors =\n      convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');\n\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(tensor => {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n      }\n    });\n  }\n\n  if ($tensors.length === 1) {\n    return clone($tensors[0]);\n  }\n\n  const inputs: ConcatInputs = $tensors;\n  const attr: ConcatAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Concat, inputs as {} as NamedTensorMap, attr as {} as NamedAttrMap);\n}\n\nexport const concat = op({concat_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sigmoid, SigmoidInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sigmoid', 'float32');\n\n  const inputs: SigmoidInputs = {x: $x};\n\n  return ENGINE.runKernel(Sigmoid, inputs as {} as NamedTensorMap);\n}\nexport const sigmoid = op({sigmoid_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Slice, SliceAttrs, SliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_<R extends Rank, T extends Tensor<R>>(\n    x: T|TensorLike, begin: number|number[], size?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n\n  const inputs: SliceInputs = {x: $x};\n  const attrs: SliceAttrs = {begin, size};\n\n  return ENGINE.runKernel(\n      Slice, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const slice = op({slice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tanh, TanhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, 70]);\n *\n * x.tanh().print();  // or tf.tanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tanh', 'float32');\n\n  const inputs: TanhInputs = {x: $x};\n\n  return ENGINE.runKernel(Tanh, inputs as {} as NamedTensorMap);\n}\nexport const tanh = op({tanh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {add} from './add';\nimport {concat} from './concat';\nimport {matMul} from './mat_mul';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {slice} from './slice';\nimport {tanh} from './tanh';\n\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(\n    forgetBias: Scalar|TensorLike, lstmKernel: Tensor2D|TensorLike,\n    lstmBias: Tensor1D|TensorLike, data: Tensor2D|TensorLike,\n    c: Tensor2D|TensorLike, h: Tensor2D|TensorLike): [Tensor2D, Tensor2D] {\n  const $forgetBias =\n      convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel =\n      convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res: Tensor2D = add(weighted, $lstmBias);\n\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize: [number, number] = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n\n  const newC: Tensor2D =\n      add(mul(sigmoid(i), tanh(j)),\n          mul($c, sigmoid(add($forgetBias, f)) as Tensor2D));\n  const newH: Tensor2D = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({basicLSTMCell_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\n * the same rank as the input. The spatial dimensions of this intermediate\n * result are then optionally cropped according to `crops` to produce the\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\n * description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\n * const blockShape = [2, 2];\n * const crops = [[0, 0], [0, 0]];\n *\n * x.batchToSpaceND(blockShape, crops).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\n * x.shape[N-1]]`\n *\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\n * according to `crops` to produce the output of shape: `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction batchToSpaceND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], crops: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank is ${$x.rank} but should be > than blockShape.length ${\n          blockShape.length}`);\n\n  util.assert(\n      crops.length === blockShape.length,\n      () => `crops.length is ${\n          crops.length} but should be equal to blockShape.length  ${\n          blockShape.length}`);\n\n  util.assert(\n      $x.shape[0] % prod === 0,\n      () => `input tensor batch is ${\n                $x.shape[0]} but is not divisible by the product of ` +\n          `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n\n  const inputs: BatchToSpaceNDInputs = {x: $x};\n  const attrs: BatchToSpaceNDAttrs = {blockShape, crops};\n\n  return ENGINE.runKernel(\n      BatchToSpaceND, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const batchToSpaceND = op({batchToSpaceND_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {xAs4D} from './batchnorm_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Batch normalization.\n *\n * As described in\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n *\n * Mean, variance, scale, and offset can be of two shapes:\n *   - The same shape as the input.\n *   - In the common case, the depth dimension is the last dimension of x, so\n *     the values would be an `tf.Tensor1D` of shape [depth].\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that parameters passed are of given rank\n *   - `tf.batchNorm2d`\n *   - `tf.batchNorm3d`\n *   - `tf.batchNorm4d`\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction batchNorm_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor<R> {\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor<R>|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor<R>|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert(\n      $mean.rank === $variance.rank,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      $offset == null || $mean.rank === $offset.rank,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      $scale == null || $mean.rank === $scale.rank,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  const x4D: Tensor4D = xAs4D($x);\n\n  const inputs: FusedBatchNormInputs = {\n    x: x4D,\n    scale: $scale,\n    offset: $offset,\n    mean: $mean,\n    variance: $variance\n  };\n\n  const attrs: FusedBatchNormAttrs = {varianceEpsilon};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  FusedBatchNorm, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as Tensor<R>;\n\n  return reshape(res, $x.shape);\n}\n\nexport const batchNorm = op({batchNorm_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, Tensor4D} from '../tensor';\nimport {Rank} from '../types';\nimport {reshape} from './reshape';\n\nexport function xAs4D<R extends Rank>(x: Tensor<R>) {\n  let x4D: Tensor4D;\n  if (x.rank === 0 || x.rank === 1) {\n    x4D = reshape(x, [1, 1, 1, x.size]);\n  } else if (x.rank === 2) {\n    x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n  } else if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  } else {\n    x4D = x as Tensor4D;\n  }\n\n  return x4D;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = op({batchNorm2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 3D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike, scale?: Tensor3D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor3D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor3D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 3,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 3 || $mean.rank === 1,\n      () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 3 || $variance.rank === 1,\n      () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 3 || $scale.rank === 1,\n        () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 3 || $offset.rank === 1,\n        () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm3d = op({batchNorm3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike, scale?: Tensor4D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor4D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor4D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 4,\n      () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 4 || $mean.rank === 1,\n      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 4 || $variance.rank === 1,\n      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 4 || $scale.rank === 1,\n        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 4 || $offset.rank === 1,\n        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm4d = op({batchNorm4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Bincount, BincountAttrs, BincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_<T extends Tensor1D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number): T {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in bincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () => `Error in bincount: weights must have the same size as input or` +\n          `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: BincountInputs = {x: $x, weights: $weights};\n  const attrs: BincountAttrs = {size};\n\n  return ENGINE.runKernel(\n      Bincount, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const bincount = op({bincount_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { NamedTensorMap } from '../tensor_types';\nimport { ENGINE } from '../engine';\nimport { BroadcastArgs, BroadcastArgsInputs } from '../kernel_names';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { Rank, TensorLike } from '../types';\n\nimport { op } from './operation';\n\n/**\n * Return the shape of s0 op s1 with broadcast.\n *\n * compute r0, the broadcasted shape as a tensor.\n * s0, s1 and r0 are all integer vectors.\n *\n * This function returns the shape of the result of an operation between\n * two tensors of size s0 and s1 performed with broadcast.\n *\n * @param s0 A tensor representing a shape\n * @param s1 A tensor representing a shape\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastArgs_<R extends Rank>(\n  s0: Tensor | TensorLike, s1: Tensor | TensorLike): Tensor<R> {\n  const shape1Input = convertToTensor(s0, 's0', 'broadcastArgs', 'int32');\n  const shape2Input = convertToTensor(s1, 's1', 'broadcastArgs', 'int32');\n\n  if (shape1Input.rank !== 1) {\n    throw new Error(\n      'broadcastArgs(): first input must be a vector (rank=1). ' +\n      `Has rank ${shape1Input.rank}`);\n  }\n\n  if (shape2Input.rank !== 1) {\n    throw new Error(\n      'broadcastArgs(): second input must be a vector (rank=1). ' +\n      `Has rank ${shape2Input.rank}`);\n  }\n\n  const inputs: BroadcastArgsInputs = { s0: shape1Input, s1: shape2Input };\n  return ENGINE.runKernel(BroadcastArgs, inputs as {} as NamedTensorMap);\n}\n\nexport const broadcastArgs = op({ broadcastArgs_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tile, TileAttrs, TileInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\n\nimport {clone} from './clone';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until is has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_<R extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R]): Tensor<R> {\n  let input = convertToTensor(x, 'broadcastTo', 'x');\n  const xShape = input.shape;\n\n  if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n    throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n  }\n\n  if (shape.length < input.rank) {\n    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${\n        input.rank}.`);\n  }\n\n  if (shape.length > input.rank) {\n    const newShape = input.shape.slice();\n    while (newShape.length < shape.length) {\n      newShape.unshift(1);\n    }\n    input = reshape(input, newShape);\n  }\n\n  const inputShape = input.shape;\n  const reps: number[] = Array.from(shape);\n  for (let i = shape.length - 1; i >= 0; i--) {\n    if (inputShape[i] === shape[i]) {\n      reps[i] = 1;\n    } else if (input.shape[i] !== 1) {\n      throw new Error(\n          `broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n    }\n  }\n  const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n\n  if (axes.length === 0) {\n    return clone(input) as Tensor<R>;\n  }\n\n  // TODO call broadcastTo kernel directly once backends implement broadcstTo\n  const inputs: TileInputs = {x: input};\n  const attrs: TileAttrs = {reps};\n  return ENGINE.runKernel(\n      Tile, inputs as {} as NamedTensorMap, attrs as unknown as NamedAttrMap);\n}\n\nexport const broadcastTo = op({broadcastTo_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Ceil, CeilInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.ceil().print();  // or tf.ceil(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction ceil_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'ceil', 'float32');\n\n  const inputs: CeilInputs = {x: $x};\n  return ENGINE.runKernel(Ceil, inputs as {} as NamedTensorMap);\n}\nexport const ceil = op({ceil_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower-bound of range to be clipped to.\n * @param clipValueMax Upper-bound of range to be clipped to.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction clipByValue_<T extends Tensor>(\n    x: T|TensorLike, clipValueMin: number, clipValueMax: number): T {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(\n      (clipValueMin <= clipValueMax),\n      () => `Error in clip: min (${clipValueMin}) must be ` +\n          `less than or equal to max (${clipValueMax}).`);\n\n  const inputs: ClipByValueInputs = {x: $x};\n  const attrs: ClipByValueAttrs = {clipValueMin, clipValueMax};\n\n  return ENGINE.runKernel(\n      ClipByValue, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const clipByValue = op({clipByValue_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(3) = |r1, g1, b1|\n * B: shape(2) = |r2, g2|\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @return The concatenated array.\n */\nfunction concat1d_(tensors: Array<Tensor1D|TensorLike>): Tensor1D {\n  return concat(tensors, 0 /* axis */);\n}\n\nexport const concat1d = op({concat1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *\n * B: shape(2, 3) = | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * C = tf.concat2d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *                  | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * if axis = 1:\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n *                   | r2, g2, b2, r4, g4, b4 |\n *\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concatenate along.\n * @return The concatenated array.\n */\nfunction concat2d_(\n    tensors: Array<Tensor2D|TensorLike>, axis: number): Tensor2D {\n  return concat(tensors, axis);\n}\n\nexport const concat2d = op({concat2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor3D`s along an axis.\n * See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *\n * B: shape(2, 1, 3) = | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * C = tf.concat3d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *                     | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * if axis = 1:\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n *                     | r2, g2, b2, r4, g4, b4 |\n *\n * if axis = 2:\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n *                      | r2, g2, b2, r4, g4, b4 |\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat3d_(\n    tensors: Array<Tensor3D|TensorLike>, axis: number): Tensor3D {\n  return concat(tensors, axis);\n}\n\nexport const concat3d = op({concat3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor4D`s along an axis.\n * See `concat` for details.\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat4d_(\n    tensors: Array<Tensor4D|TensorLike>, axis: number): Tensor4D {\n  return concat(tensors, axis);\n}\n\nexport const concat4d = op({concat4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2D, Conv2DAttrs, Conv2DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2d', pad, dimRoundingMode);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inDepth === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const inputs: Conv2DInputs = {x: x4D, filter: $filter};\n  const attrs:\n      Conv2DAttrs = {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2d = op({conv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv1d_<T extends Tensor2D|Tensor3D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike, stride: number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n\n  let x3D = $x as Tensor3D;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(\n      x3D.rank === 3,\n      () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in conv1d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv1d', pad, dimRoundingMode);\n  util.assert(\n      x3D.shape[2] === $filter.shape[1],\n      () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n          `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(stride, dilation),\n      () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n          `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(\n      dataFormat === 'NWC',\n      () => `Error in conv1d: got dataFormat of ${\n          dataFormat} but only NWC is currently supported.`);\n\n  const filter4D = reshape(\n      $filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  const strides: [number, number] = [1, stride];\n  const dilations: [number, number] = [1, dilation];\n\n  const conv2dDataFormat = 'NHWC';\n\n  const res = conv2d(\n      (input4D as Tensor4D), (filter4D as Tensor4D), strides, pad,\n      conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]) as T;\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]) as T;\n}\n\nexport const conv1d = op({conv1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: Conv2DBackpropInputAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2DBackpropInput, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2DBackpropInput = op({conv2DBackpropInput_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {conv2DBackpropInput} from './conv2d_backprop_input';\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2dTranspose_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    outputShape: [number, number, number, number]|[number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n\n  return conv2DBackpropInput(\n      outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\nexport const conv2dTranspose = op({conv2dTranspose_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3D, Conv3DAttrs, Conv3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {eitherStridesOrDilationsAreOne} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    strides: [number, number, number]|number, pad: 'valid'|'same',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations: [number, number, number]|number = [1, 1, 1]): T {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert(\n      $filter.rank === 5,\n      () => `Error in conv3d: filter must be rank 5, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x5D.shape[4] === $filter.shape[3],\n      () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n          `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(\n      eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in conv3d: got dataFormat of ${\n          dataFormat} but only NDHWC is currently supported.`);\n\n  const inputs: Conv3DInputs = {x: x5D, filter: $filter};\n\n  const attrs: Conv3DAttrs = {strides, pad, dataFormat, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3d = op({conv3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const inputs: Conv3DBackpropInputV2Inputs = {dy: dy5D, filter};\n\n  const attrs:\n      Conv3DBackpropInputV2Attrs = {pad, strides, inputShape: xShape5D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3DBackpropInputV2, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3DBackpropInput = op({conv3DBackpropInput_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {conv3DBackpropInput} from './conv3d_backprop_input';\nimport {op} from './operation';\n\n/**\n * Computes the transposed 3D convolution of a volume, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 5 or rank 4, of shape\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 5 or rank 4:\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\n *    assumed.\n * @param strides The strides of the original convolution:\n *     `[strideDepth, strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3dTranspose_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    outputShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): T {\n  const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n\n  return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);\n}\n\nexport const conv3dTranspose = op({conv3dTranspose_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cos, CosInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.cos().print();  // or tf.cos(x)\n * ```\n * @param x The input tensor. Must be float32 type.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cos', 'float32');\n\n  const inputs: CosInputs = {x: $x};\n\n  return ENGINE.runKernel(Cos, inputs as {} as NamedTensorMap);\n}\nexport const cos = op({cos_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cosh, CoshInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.cosh().print();  // or tf.cosh(x)\n * ```\n * @param x The input tensor. Must be float32 type.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cosh', 'float32');\n  const inputs: CoshInputs = {x: $x};\n\n  return ENGINE.runKernel(Cosh, inputs as {} as NamedTensorMap);\n}\nexport const cosh = op({cosh_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { ENGINE } from '../engine';\nimport { Cumprod, CumprodAttrs, CumprodInputs } from '../kernel_names';\nimport { NamedAttrMap } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { NamedTensorMap } from '../tensor_types';\nimport { convertToTensor } from '../tensor_util_env';\nimport { TensorLike } from '../types';\n\nimport { op } from './operation';\n\n/**\n * Computes the cumulative product of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumprod().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumprod().print();\n * ```\n *\n * @param x The input tensor to cumulatively multiply.\n * @param axis The axis along which to multiply. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative product. Optional.\n *     Defaults to false. If set to true then the product of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to multiply in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumprod_<T extends Tensor>(\n  x: Tensor | TensorLike,\n  axis = 0,\n  exclusive = false,\n  reverse = false\n): T {\n  const $x = convertToTensor(x, 'x', 'cumprod');\n\n  const inputs: CumprodInputs = { x: $x };\n  const attrs: CumprodAttrs = { axis, exclusive, reverse };\n\n  return ENGINE.runKernel(\n    Cumprod,\n    inputs as {} as NamedTensorMap,\n    attrs as {} as NamedAttrMap\n  );\n}\n\nexport const cumprod = op({ cumprod_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cumsum, CumsumAttrs, CumsumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis = 0, exclusive = false, reverse = false): T {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  const inputs: CumsumInputs = {x: $x};\n  const attrs: CumsumAttrs = {axis, exclusive, reverse};\n\n  return ENGINE.runKernel(\n      Cumsum, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const cumsum = op({cumsum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1 or rank 2.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n * @param binaryOutput Optional. Whether the kernel should count the appearance\n *     or number of occurrences. Defaults to False.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction denseBincount_<T extends Tensor1D|Tensor2D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number,\n    binaryOutput = false): T {\n  const $x = convertToTensor(x, 'x', 'denseBincount');\n  const $weights = convertToTensor(weights, 'weights', 'denseBincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in denseBincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(\n      $x.rank <= 2,\n      () => `Error in denseBincount: input must be at most rank 2, but got ` +\n          `rank ${$x.rank}.`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () =>\n          `Error in denseBincount: weights must have the same shape as x or ` +\n          `0-length, but got x shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: DenseBincountInputs = {x: $x, weights: $weights};\n  const attrs: DenseBincountAttrs = {size, binaryOutput};\n\n  return ENGINE.runKernel(\n      DenseBincount, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const denseBincount = op({denseBincount_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike4D} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction depthToSpace_(\n    x: Tensor4D|TensorLike4D, blockSize: number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'depthToSpace', 'float32') as Tensor4D;\n\n  const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  util.assert(\n      inputHeight * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n\n  util.assert(\n      inputWidth * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n\n  util.assert(\n      (inputDepth % (blockSize * blockSize) === 0),\n      () => `Dimension size must be evenly divisible by ${\n          blockSize * blockSize} but is ${\n          inputDepth} for depthToSpace with input shape ${$x.shape}`);\n\n  const inputs: DepthToSpaceInputs = {x: $x};\n  const attrs: DepthToSpaceAttrs = {blockSize, dataFormat};\n\n  return ENGINE.runKernel(\n      DepthToSpace, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const depthToSpace = op({depthToSpace_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction depthwiseConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  const inChannels = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inChannels === $filter.shape[2],\n      () => `Error in depthwiseConv2d: number of input channels ` +\n          `(${inChannels}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n  const inputs: DepthwiseConv2dNativeInputs = {x: x4D, filter: $filter};\n  const attrs: DepthwiseConv2dNativeAttrs =\n      {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  DepthwiseConv2dNative, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const depthwiseConv2d = op({depthwiseConv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Diag, DiagInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\n\nimport {op} from './operation';\n\n/**\n * Returns a diagonal tensor with a given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction diag_(x: Tensor): Tensor {\n  const $x = convertToTensor(x, 'x', 'diag');\n\n  const inputs: DiagInputs = {x: $x};\n\n  return ENGINE.runKernel(Diag, inputs as {} as NamedTensorMap);\n}\n\nexport const diag = op({diag_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Dilation2D, Dilation2DAttrs, Dilation2DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the grayscale dilation over the input `x`.\n *\n * @param x The input tensor, rank 3 or rank 4 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter tensor, rank 3, of shape\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat Specify the data format of the input and output data.\n *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the\n *      default format \"NHWC\", the data is stored in the order of: [batch,\n *      height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`\n *     is a single number, then `dilationHeight == dilationWidth`. If it is\n *     greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction dilation2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same',\n    dilations: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'dilation2d');\n  const $filter = convertToTensor(filter, 'filter', 'dilation2d');\n\n  util.assert(\n      $x.rank === 3 || $x.rank === 4,\n      () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in dilation2d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Error in dilation2d: Only NHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    reshapedTo4D = true;\n  }\n\n  const inputs: Dilation2DInputs = {x: x4D, filter: $filter};\n  const attrs: Dilation2DAttrs = {strides, pad, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Dilation2D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res;\n}\n\nexport const dilation2d = op({dilation2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Equal, EqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.equal(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction equal_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'equal', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'equal', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: EqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Equal, inputs as {} as NamedTensorMap);\n}\n\nexport const equal = op({equal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Select, SelectInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {broadcastTo} from './broadcast_to';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_<T extends Tensor>(\n    condition: Tensor|TensorLike, a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'where');\n  const $b = convertToTensor(b, 'b', 'where');\n  const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n  // TODO: move this logic to forward function when the broadcastTo op is\n  // implemented in WASM.\n  // Find the broadcastable shape for $condition, $a, and $b.\n  const broadcastShape = assertAndGetBroadcastShape(\n      assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);\n  const $broadcastedCondition = broadcastTo($condition, broadcastShape);\n  const $broadcastedA = broadcastTo($a, broadcastShape);\n  const $broadcastedB = broadcastTo($b, broadcastShape);\n\n  const inputs: SelectInputs = {\n    condition: $broadcastedCondition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernel(Select, inputs as {} as NamedTensorMap);\n}\n\nexport const where = op({where_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ZerosLike, ZerosLikeInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction zerosLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'zerosLike');\n  const inputs: ZerosLikeInputs = {x: $x};\n  return ENGINE.runKernel(ZerosLike, inputs as {} as NamedTensorMap);\n}\nexport const zerosLike = op({zerosLike_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {div} from './div';\nimport {equal} from './equal';\nimport {op} from './operation';\nimport {where} from './where';\nimport {zerosLike} from './zeros_like';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\n * if denominator is 0.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n * const c = tf.tensor1d([0, 0, 0, 0]);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n * const c = tf.scalar(0);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction divNoNan_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  // TODO: Make this into its own kernel.\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const divResult = div($a, $b);\n  const zeros = zerosLike(divResult);\n  const bEqualsZero = equal($b, zeros);\n  return where(bEqualsZero, zeros, divResult) as T;\n}\n\nexport const divNoNan = op({divNoNan_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor,} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\n\nexport const dot = op({dot_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Einsum, EinsumAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\n\nimport {op} from './operation';\n\n/**\n * Tensor contraction over specified indices and outer product.\n *\n * `einsum` allows defining Tensors by defining their element-wise computation.\n * This computation is based on\n * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).\n *\n * Some special cases include:\n *\n * Matrix multiplication:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('ij,jk->ik', x, y).print();\n * ```\n *\n * Dot product:\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n * const y = tf.tensor1d([0, 1, 2]);\n * x.print();\n * y.print();\n * tf.einsum('i,i->', x, y).print();\n * ```\n *\n * Batch dot product:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('bi,bi->b', x, y).print();\n * ```\n *\n * Outer prouduct:\n * ```js\n * const x = tf.tensor1d([1, 3, 5]);\n * const y = tf.tensor1d([2, 4, 6]);\n * x.print();\n * y.print();\n * tf.einsum('i,j->ij', x, y).print();\n * ```\n *\n * Matrix transpose:\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * x.print();\n * tf.einsum('ij->ji', x).print();\n * ```\n *\n * Batch matrix transpose:\n * ```js\n * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);\n * x.print();\n * tf.einsum('bij->bji', x).print();\n * ```\n *\n * Limitations:\n *\n * This implementation of einsum has the following limitations:\n *\n * - Does not support >2 input tensors.\n * - Does not support duplicate axes for any given input tensor. E.g., equation\n *   'ii->' is not suppoted.\n * - The `...` notation is not supported.\n *\n * @param equation a string describing the contraction, in the same format as\n * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).\n * @param tensors the input(s) to contract (each one a Tensor), whose shapes\n *     should be consistent with equation.\n * @returns The output tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Matrices'}\n */\nexport function einsum_(equation: string, ...tensors: Tensor[]): Tensor {\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'einsum'));\n  const attrs: EinsumAttrs = {equation};\n  return ENGINE.runKernel(\n      Einsum, $tensors as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const einsum = op({einsum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Elu, EluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction elu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'elu', 'float32');\n\n  const inputs: EluInputs = {x: $x};\n\n  return ENGINE.runKernel(Elu, inputs as {} as NamedTensorMap);\n}\n\nexport const elu = op({elu_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Erf, ErfInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes gause error function of the input `tf.Tensor` element-wise:\n * `erf(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.erf().print(); // or tf.erf(x);\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction erf_<T extends Tensor>(x: T|TensorLike): T {\n  let $x = convertToTensor(x, 'x', 'erf');\n  util.assert(\n      $x.dtype === 'int32' || $x.dtype === 'float32',\n      () => 'Input dtype must be `int32` or `float32`.');\n\n  if ($x.dtype === 'int32') {\n    $x = cast($x, 'float32');\n  }\n\n  const inputs: ErfInputs = {x: $x};\n  return ENGINE.runKernel(Erf, inputs as {} as NamedTensorMap);\n}\nexport const erf = op({erf_});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes: number[], rank: number): boolean {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineLocations(\n    outputLoc: number[], reduceLoc: number[], axes: number[]): number[] {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\n\nexport function computeOutAndReduceShapes(\n    aShape: number[], axes: number[]): [number[], number[]] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\n\nexport function expandShapeToKeepDim(\n    shape: number[], axes: number[]): number[] {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexport function assertAxesAreInnerMostDims(\n    msg: string, axes: number[], rank: number): void {\n  util.assert(\n      axesAreInnerMostDims(axes, rank),\n      () => `${msg} supports only inner-most axes for now. ` +\n          `Got axes ${axes} and rank-${rank} input.`);\n}\n\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes: number[], rank: number): number[]|\n    null {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result: number[] = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes: number[]): number[] {\n  return axes.map((axis, i) => [i, axis])\n      .sort((a, b) => a[1] - b[1])\n      .map(x => x[0]);\n}\n\nexport function getInnerMostAxes(numAxes: number, rank: number): number[] {\n  const res: number[] = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Max, MaxAttrs, MaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'max');\n\n  const inputs: MaxInputs = {x: $x};\n  const attrs: MaxAttrs = {reductionIndices: axis, keepDims};\n\n  return ENGINE.runKernel(\n      Max, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const max = op({max_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Min, MinAttrs, MinInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'min');\n\n  const inputs: MinInputs = {x: $x};\n  const attrs: MinAttrs = {axis, keepDims};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Min, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as T;\n}\n\nexport const min = op({min_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Pow, PowInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction pow_<T extends Tensor>(\n    base: Tensor|TensorLike, exp: Tensor|TensorLike): T {\n  let $base = convertToTensor(base, 'base', 'pow');\n  let $exp = convertToTensor(exp, 'exp', 'pow');\n  [$base, $exp] = makeTypesMatch($base, $exp);\n\n  const inputs: PowInputs = {a: $base, b: $exp};\n\n  return ENGINE.runKernel(Pow, inputs as {} as NamedTensorMap);\n}\n\nexport const pow = op({pow_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar} from '../tensor';\nimport {DataType} from '../types';\nimport {isTypedArray} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(\n    value: number|boolean|string|Uint8Array, dtype?: DataType): Scalar {\n  if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n      dtype !== 'complex64') {\n    throw new Error(\n        'Error creating a new Scalar: value must be a primitive ' +\n        '(number|boolean|string)');\n  }\n  if (dtype === 'string' && isTypedArray(value) &&\n      !(value instanceof Uint8Array)) {\n    throw new Error(\n        'When making a scalar from encoded string, ' +\n        'the value must be `Uint8Array`.');\n  }\n  const shape: number[] = [];\n  const inferredShape: number[] = [];\n  return makeTensor(value, shape, inferredShape, dtype) as Scalar;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sqrt, SqrtInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sqrt', 'float32');\n\n  const inputs: SqrtInputs = {x: $x};\n\n  return ENGINE.runKernel(Sqrt, inputs as {} as NamedTensorMap);\n}\nexport const sqrt = op({sqrt_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction square_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'square');\n  const attrs = {};\n  return ENGINE.runKernel('Square', {x: $x}, attrs);\n}\n\nexport const square = op({square_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Sum, SumAttrs, SumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction sum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'sum');\n  if ($x.dtype === 'bool') {\n    $x = cast($x, 'int32');\n  }\n\n  const inputs: SumInputs = {x: $x};\n  const attrs: SumAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Sum, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const sum = op({sum_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {abs} from './abs';\nimport * as axis_util from './axis_util';\nimport {max} from './max';\nimport {min} from './min';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {reshape} from './reshape';\nimport {scalar} from './scalar';\nimport {sqrt} from './sqrt';\nimport {square} from './square';\nimport {sum} from './sum';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({norm_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {norm} from './norm';\nimport {op} from './operation';\n\n/**\n * Computes the euclidean norm of scalar, vectors, and matrices.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.euclideanNorm().print();  // or tf.euclideanNorm(x)\n * ```\n *\n * @param x The input array.\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. euclideanNorm(x) is equivalent\n * to euclideanNorm(x.reshape([-1])). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction euclideanNorm_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): Tensor {\n  return norm(x, 'euclidean', axis, keepDims);\n}\n\nexport const euclideanNorm = op({euclideanNorm_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Exp, ExpInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction exp_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'exp');\n\n  const inputs: ExpInputs = {x: $x};\n  return ENGINE.runKernel(Exp, inputs as {} as NamedTensorMap);\n}\nexport const exp = op({exp_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n\n  const inputs: ExpandDimsInputs = {input: $x};\n  const attrs: ExpandDimsAttrs = {dim: axis};\n\n  return ENGINE.runKernel(\n      ExpandDims, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const expandDims = op({expandDims_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Expm1, Expm1Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\n * `e ^ x - 1`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.expm1().print();  // or tf.expm1(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction expm1_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'expm1');\n\n  const inputs: Expm1Inputs = {x: $x};\n  return ENGINE.runKernel(Expm1, inputs as {} as NamedTensorMap);\n}\nexport const expm1 = op({expm1_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tile, TileAttrs, TileInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction tile_<T extends Tensor>(x: T|TensorLike, reps: number[]): T {\n  const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');\n  util.assert(\n      $x.rank === reps.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of reps ${reps}.`);\n\n  const inputs: TileInputs = {x: $x};\n  const attrs: TileAttrs = {reps};\n\n  return ENGINE.runKernel(\n      Tile, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const tile = op({tile_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {DataType} from '../types';\n\nimport {buffer} from './buffer';\nimport {expandDims} from './expand_dims';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {tile} from './tile';\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out: Tensor2D = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(\n                 expandDims(expandDims(out, 0), 0),\n                 [batchShape[0], batchShape[1], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n               batchShape[0], batchShape[1], batchShape[2], 1, 1\n             ]) as Tensor2D;\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\nexport const eye = op({eye_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Fill, FillAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill<R extends Rank>(\n    shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n  const attrs: FillAttrs = {shape, value, dtype};\n\n  return ENGINE.runKernel(Fill, {}, attrs as {} as NamedAttrMap);\n}\n\nexport {fill};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Floor, FloorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.floor().print();  // or tf.floor(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction floor_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'floor', 'float32');\n\n  const inputs: FloorInputs = {x: $x};\n  return ENGINE.runKernel(Floor, inputs as {} as NamedTensorMap);\n}\nexport const floor = op({floor_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {GatherV2, GatherV2Attrs, GatherV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n * @param batchDims Optional. The number of batch dimensions. It must be less\n *     than or equal to rank(indices). Defaults to 0.\n *     The output tensor will have shape of\n *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction gather_<T extends Tensor>(\n    x: T|TensorLike, indices: Tensor|TensorLike, axis = 0, batchDims = 0): T {\n  const $x = convertToTensor(x, 'x', 'gather');\n  const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n\n  const inputs: GatherV2Inputs = {x: $x, indices: $indices};\n  const attrs: GatherV2Attrs = {axis, batchDims};\n\n  return ENGINE.runKernel(\n      GatherV2, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const gather = op({gather_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Greater, GreaterInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greater_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greater', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'greater', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: GreaterInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Greater, inputs as {} as NamedTensorMap);\n}\n\nexport const greater = op({greater_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {GreaterEqual, GreaterEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: GreaterEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(GreaterEqual, inputs as {} as NamedTensorMap);\n}\n\nexport const greaterEqual = op({greaterEqual_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsFinite, IsFiniteInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns which elements of x are finite.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isFinite().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isFinite_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isFinite');\n\n  const inputs: IsFiniteInputs = {x: $x};\n\n  return ENGINE.runKernel(IsFinite, inputs as {} as NamedTensorMap);\n}\nexport const isFinite = op({isFinite_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsInf, IsInfInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns which elements of x are Infinity or -Infinity.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isInf().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isInf_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isInf');\n\n  const inputs: IsInfInputs = {x: $x};\n\n  return ENGINE.runKernel(IsInf, inputs as {} as NamedTensorMap);\n}\nexport const isInf = op({isInf_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsNan, IsNanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * RReturns which elements of x are NaN.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isNaN().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isNaN_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isNaN');\n  const inputs: IsNanInputs = {x: $x};\n\n  return ENGINE.runKernel(IsNan, inputs as {} as NamedTensorMap);\n}\nexport const isNaN = op({isNaN_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LeakyRelu, LeakyReluAttrs, LeakyReluInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction leakyRelu_<T extends Tensor>(x: T|TensorLike, alpha = 0.2): T {\n  const $x = convertToTensor(x, 'x', 'leakyRelu');\n\n  const inputs: LeakyReluInputs = {x: $x};\n  const attrs: LeakyReluAttrs = {alpha};\n\n  return ENGINE.runKernel(\n      LeakyRelu, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const leakyRelu = op({leakyRelu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Less, LessInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction less_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'less', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'less', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LessInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Less, inputs as {} as NamedTensorMap);\n}\n\nexport const less = op({less_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {LessEqual, LessEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction lessEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'lessEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'lessEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LessEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(LessEqual, inputs as {} as NamedTensorMap);\n}\n\nexport const lessEqual = op({lessEqual_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LRN, LRNAttrs, LRNInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert(\n      $x.rank === 4 || $x.rank === 3,\n      () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(\n      util.isInt(depthRadius),\n      () => `Error in localResponseNormalization: depthRadius must be an ` +\n          `integer but got depthRadius ${depthRadius}.`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  const inputs: LRNInputs = {x: x4D};\n\n  const attrs: LRNAttrs = {depthRadius, bias, alpha, beta};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  LRN, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  } else {\n    return res;\n  }\n}\n\nexport const localResponseNormalization = op({localResponseNormalization_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Log, LogInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log', 'float32');\n\n  const inputs: LogInputs = {x: $x};\n  return ENGINE.runKernel(Log, inputs as {} as NamedTensorMap);\n}\nexport const log = op({log_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Log1p, Log1pInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log1p_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log1p');\n\n  const inputs: Log1pInputs = {x: $x};\n  return ENGINE.runKernel(Log1p, inputs as {} as NamedTensorMap);\n}\nexport const log1p = op({log1p_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CustomGradientFunc, ENGINE} from './engine';\nimport {Scalar, Tensor, Variable} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {convertToTensor, convertToTensorArray} from './tensor_util_env';\nimport {TensorLike} from './types';\nimport * as util from './util';\n\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f: (x: Tensor) => Tensor): (\n    x: TensorLike|Tensor, dy?: TensorLike|Tensor) => Tensor {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x: TensorLike|Tensor, dy?: TensorLike|Tensor): Tensor => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f: (...args: Tensor[]) => Tensor): (\n    args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike) => Tensor[] {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike): Tensor[] => {\n    util.assert(\n        Array.isArray(args),\n        () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args =\n        convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad<I extends Tensor, O extends Tensor>(f: (x: I) => O): (\n    x: I, dy?: O) => {\n  value: O;\n  grad: I;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x: I, dy?: O) => {\n    util.assert(\n        x instanceof Tensor,\n        () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {grads, value} = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {grad: grads[0] as I, value};\n  };\n}\n\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads<O extends Tensor>(f: (...args: Tensor[]) => O): (\n    args: Tensor[], dy?: O) => {\n  grads: Tensor[];\n  value: O;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args: Tensor[], dy?: O) => {\n    util.assert(\n        Array.isArray(args) && args.every(arg => arg instanceof Tensor),\n        () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(\n          res.value.shape, dy.shape,\n          'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n              'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f: () => Scalar, varList?: Variable[]):\n    {value: Scalar, grads: NamedTensorMap} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(\n      varList == null ||\n          Array.isArray(varList) && varList.every(v => v instanceof Variable),\n      () =>\n          'The varList passed in variableGrads(f, varList) must be an array ' +\n          'of variables');\n\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable: Variable[] =\n      specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(\n      varList.length > 0,\n      () => `variableGrads() expects at least one of the input variables to ` +\n          `be trainable, but none of the ${originalVarCount} variables is ` +\n          `trainable.`);\n\n  const allowNoGradients = true;\n  const {value, grads} = ENGINE.gradients(f, varList, null, allowNoGradients);\n\n  util.assert(\n      grads.some(g => g != null),\n      () => 'Cannot find a connection between any variable and the result of ' +\n          'the loss function y=f(x). Please make sure the operations that ' +\n          'use variables are inside the function f passed to minimize().');\n  util.assert(\n      value.rank === 0,\n      () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n          `returned a rank-${value.rank} tensor`);\n\n  const namedGrads: NamedTensorMap = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {value, grads: namedGrads};\n}\n\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n    (...args: Tensor[]) => T {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads: Tensor[]) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(\n        `Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport {\n  customGrad,\n  variableGrads,\n  valueAndGrad,\n  valueAndGrads,\n  grad,\n  grads,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Softplus, SoftplusInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.softplus().print();  // or tf.softplus(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction softplus_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'softplus');\n\n  const inputs: SoftplusInputs = {x: $x};\n  return ENGINE.runKernel(Softplus, inputs as {} as NamedTensorMap);\n}\nexport const softplus = op({softplus_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {mul} from './mul';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {softplus} from './softplus';\n\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction logSigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n\n  // Use a custom gradient to maintain previous implementation.\n  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n  // directly\n  const customOp = customGrad((x: Tensor) => {\n    // TODO(yassogba) we can remove the chained softplus call here only\n    // after backends have modualrized softplus at which point we can call\n    // engine runKernel(..., Sotfplus, ...) directly.\n    const value = neg(softplus(neg(x)));\n\n    const gradFunc = (dy: T) => {\n      const derX = mul(dy, sigmoid(neg(x)));\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\nexport const logSigmoid = op({logSigmoid_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Sub, SubInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'sub');\n  let $b = convertToTensor(b, 'b', 'sub');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: SubInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Sub, inputs as {} as NamedTensorMap);\n}\n\nexport const sub = op({sub_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\n\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction logSoftmax_<T extends Tensor>(logits: T|TensorLike, axis = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(\n        'Log Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n\n  // const forward: ForwardFunc<Tensor> = (backend, save) => {\n  //   const keepDims = true;\n  //   const xMax = max(logits, axis, true);\n  //   const shifted = sub(logits, xMax);\n  //   const value =\n  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n  //       keepDims)));\n  //   save([value]);\n  //   return value;\n  // };\n\n  // Use a custom gradient for numerical stability.\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    const keepDims = true;\n    const xMax = max(logits, axis, true);\n    const shifted = sub(logits, xMax);\n    const value =\n        sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n    save([value]);\n\n    const gradFunc = (dy: Tensor, saved: Tensor[]) => {\n      const [value] = saved;\n      const keepDims = true;\n      const softmax = exp(value);\n      return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($logits) as T;\n\n  // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n  // const inputs: LogSoftmaxInputs = {logits: $logits};\n  // const attrs: LogSoftmaxAttrs = {axis};\n  // return ENGINE.runKernel(\n  //            LogSoftmax, inputs as {} as NamedTensorMap,\n  //            attrs as {} as NamedAttrMap);\n}\n\nexport const logSoftmax = op({logSoftmax_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {add} from './add';\nimport {expandShapeToKeepDim} from './axis_util';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n\n  const axes = parseAxisParam(axis, $x.shape);\n  const xMax = max($x, axes, true /* keepDims */);\n  const a = sub($x, xMax);\n  const b = exp(a);\n  const c = sum(b, axes);\n  const d = log(c);\n  const res = add(reshape(xMax, d.shape), d);\n\n  if (keepDims) {\n    const newShape = expandShapeToKeepDim(res.shape, axes);\n    return reshape(res, newShape) as T;\n  }\n  return res as T;\n}\n\nexport const logSumExp = op({logSumExp_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {LogicalAnd, LogicalAndInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LogicalAndInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(LogicalAnd, inputs as {} as NamedTensorMap);\n}\n\nexport const logicalAnd = op({logicalAnd_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LogicalNot, LogicalNotInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `NOT x` element-wise.\n *\n * ```js\n * const a = tf.tensor1d([false, true], 'bool');\n *\n * a.logicalNot().print();\n * ```\n *\n * @param x The input tensor. Must be of dtype 'bool'.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalNot_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');\n  const inputs: LogicalNotInputs = {x: $x};\n  return ENGINE.runKernel(LogicalNot, inputs as {} as NamedTensorMap);\n}\n\nexport const logicalNot = op({logicalNot_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LogicalOr, LogicalOrInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalOr(b).print();\n * ```\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalOr_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LogicalOrInputs = {a: $a, b: $b};\n  return ENGINE.runKernel(LogicalOr, inputs as {} as NamedTensorMap);\n}\nexport const logicalOr = op({logicalOr_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {logicalAnd} from './logical_and';\nimport {logicalNot} from './logical_not';\nimport {logicalOr} from './logical_or';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalXor(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalXor_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  // x ^ y = (x | y) & ~(x & y)\n  return logicalAnd(logicalOr(a, b), logicalNot(logicalAnd(a, b)));\n}\n\nexport const logicalXor = op({logicalXor_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SearchSorted, SearchSortedAttrs, SearchSortedInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {sizeFromShape} from '../util_base';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nconst INT32_MAX = 2147483648;\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The side argument controls which index is returned if a value lands exactly\n * on an edge.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'sortedSequence' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.searchSorted(edges, values, 'left');\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.searchSorted(seq, values, 'left');\n * result2.print(); // [0, 2, 3]\n * const result3 = tf.searchSorted(seq, values, 'right');\n * result3.print(); // [1, 2, 5]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result4 = tf.searchSorted(sortedSequence, values, 'left');\n * result4.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower\n *     bound and 'right' to upper bound.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying either lower bound or upper bound (depending on side) to each\n *     value. The result is not a global index to the entire Tensor, but the\n *     index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction searchSorted_(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike,\n    side: 'left'|'right' = 'left'): Tensor {\n  const $sortedSequence =\n      convertToTensor(sortedSequence, 'sortedSequence', 'searchSorted');\n  const $values = convertToTensor(values, 'values', 'searchSorted');\n\n  const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];\n  const valuesSize = $values.shape[$values.shape.length - 1];\n  const $sortedSequence2D = reshape($sortedSequence, [-1, sequenceSize]);\n  const $values2D = reshape($values, [-1, valuesSize]);\n\n  if ($sortedSequence2D.rank < 2) {\n    throw new Error(`Sorted input argument must be at least 2-dimensional`);\n  }\n  if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) {\n    throw new Error(\n        `Leading dimension of 'sortedSequence' and 'values' must match.`);\n  }\n  if (sizeFromShape($values2D.shape) >= INT32_MAX) {\n    throw new Error(`values tensor size must less than ${INT32_MAX}`);\n  }\n  if ($sortedSequence2D.shape[1] >= INT32_MAX) {\n    throw new Error(`trailing dim_size must less than ${\n        INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);\n  }\n\n  const inputs: SearchSortedInputs = {\n    sortedSequence: $sortedSequence2D,\n    values: $values2D,\n  };\n  const attrs: SearchSortedAttrs = {side};\n\n  return ENGINE.runKernel(SearchSorted, inputs as {}, attrs as {});\n}\n\nexport const searchSorted = op({searchSorted_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPool, MaxPoolAttrs, MaxPoolInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool');\n  const dilations = 1;\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode('maxPool', pad, dimRoundingMode);\n  const inputs: MaxPoolInputs = {x: x4D};\n  const attrs: MaxPoolAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const maxPool = op({maxPool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number = [1, 1, 1],\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  checkPadOnDimRoundingMode('maxPool3d', pad, dimRoundingMode);\n  const inputs: MaxPool3DInputs = {x: x5D};\n  const attrs:\n      MaxPool3DAttrs = {filterSize, strides, pad, dimRoundingMode, dataFormat};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool3D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const maxPool3d = op({maxPool3d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the 2D max pooling of an image with Argmax index.\n * The indices in argmax are flattened, so that a maximum value at position `[b,\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\n * +c` if include_batch_in_index is True.\n *\n * The indices returned are always in `[0, height) x [0, width)` before\n * flattening.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param includeBatchIndex Defaults to False. Whether to include batch\n *    dimension in flattened index of argmax.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPoolWithArgmax_<T extends Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    includeBatchInIndex = false): NamedTensorMap {\n  const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\n\n  const inputs: MaxPoolWithArgmaxInputs = {x: $x};\n  const attrs:\n      MaxPoolWithArgmaxAttrs = {filterSize, strides, pad, includeBatchInIndex};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     MaxPoolWithArgmax, inputs as {} as NamedTensorMap,\n                     attrs as {} as NamedAttrMap) as Tensor[];\n\n  return {result: result[0], indexes: result[1]};\n}\n\nexport const maxPoolWithArgmax = op({maxPoolWithArgmax_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Maximum, MaximumInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.maximumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * ```js\n * // Broadcast maximum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction maximum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'maximum');\n  let $b = convertToTensor(b, 'b', 'maximum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = cast($a, 'int32');\n    $b = cast($b, 'int32');\n  }\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: MaximumInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Maximum, inputs as {} as NamedTensorMap);\n}\n\nexport const maximum = op({maximum_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Mean, MeanAttrs, MeanInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction mean_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'mean');\n\n  const inputs: MeanInputs = {x: $x};\n  const attrs: MeanAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Mean, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const mean = op({mean_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {makeZerosTypedArray, sizeFromShape} from '../util';\n\nimport {complex} from './complex';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {makeOnesTypedArray, sizeFromShape} from '../util';\n\nimport {complex} from './complex';\nimport {zeros} from './zeros';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Minimum, MinimumInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction minimum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'minimum');\n  let $b = convertToTensor(b, 'b', 'minimum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = cast($a, 'int32');\n    $b = cast($b, 'int32');\n  }\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: MinimumInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Minimum, inputs as {} as NamedTensorMap);\n}\n\nexport const minimum = op({minimum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>,\n    mode: 'reflect'|'symmetric'): T {\n  util.assert(\n      mode === 'reflect' || mode === 'symmetric',\n      () => `Invalid mode. Mode must be either reflect or symmetric. ` +\n          `Got ${mode}.`);\n\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error(\n        'mirrorPad(scalar) is not defined. ' +\n        'Pass non-scalar to mirrorPad');\n  }\n  util.assert(\n      paddings.length === $x.rank,\n      () => `Padding doesn't match input. Must be ${$x.rank}. ` +\n          `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(\n        paddings[i].length === 2,\n        () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(\n        paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset,\n        () => `Padding in dimension ${i} cannot be greater than or equal ` +\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\n            `shape ${$x.shape}`);\n  }\n\n  const attrs: MirrorPadAttrs = {paddings, mode};\n  const inputs: MirrorPadInputs = {x: $x};\n  return ENGINE.runKernel(\n      MirrorPad, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const mirrorPad = op({mirrorPad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Mod, ModInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the mod of a and b element-wise.\n * `floor(x / y) * y + mod(x, y) = x`\n * Supports broadcasting.\n *\n * We also expose `tf.modStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * ```js\n * // Broadcast a mod b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mod_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mod');\n  let $b = convertToTensor(b, 'b', 'mod');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: ModInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Mod, inputs as {} as NamedTensorMap);\n}\n\nexport const mod = op({mod_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {expandShapeToKeepDim} from './axis_util';\nimport {cast} from './cast';\nimport {mean} from './mean';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {square} from './square';\nimport {sub} from './sub';\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared =\n      square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {mean: xMean, variance};\n}\n\nexport const moments = op({moments_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * @docalias (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D]\n */\nexport type LSTMCellFunc = {\n  (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\n};\n\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(\n    lstmCells: LSTMCellFunc[], data: Tensor2D|TensorLike,\n    c: Array<Tensor2D|TensorLike>,\n    h: Array<Tensor2D|TensorLike>): [Tensor2D[], Tensor2D[]] {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n\n  let input = $data;\n  const newStates = [];\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n  const newC: Tensor2D[] = [];\n  const newH: Tensor2D[] = [];\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n  return [newC, newH];\n}\nexport const multiRNNCell = op({multiRNNCell_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Multinomial, MultinomialAttrs, MultinomialInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(\n    logits: Tensor1D|Tensor2D|TensorLike, numSamples: number, seed?: number,\n    normalized = false): Tensor1D|Tensor2D {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\n        `Error in multinomial: you need at least 2 outcomes, but got ` +\n        `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n  seed = seed || Math.random();\n\n  // The kernel only accepts (and returns) rank 2 tensors.\n  const logits2D: Tensor2D =\n      origRank === 1 ? reshape($logits, [1, -1]) : $logits as Tensor2D;\n\n  const inputs: MultinomialInputs = {logits: logits2D};\n  const attrs: MultinomialAttrs = {numSamples, seed, normalized};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Multinomial, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as Tensor2D;\n\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  return origRank === 1 ? reshape(res, [res.size]) as Tensor1D : res;\n}\n\nexport const multinomial = op({multinomial_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {NotEqual, NotEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction notEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'notEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'notEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: NotEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(NotEqual, inputs as {} as NamedTensorMap);\n}\n\nexport const notEqual = op({notEqual_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OnesLike, OnesLikeInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.onesLike(x).print();\n * ```\n * @param x A tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction onesLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'onesLike');\n\n  const inputs: OnesLikeInputs = {x: $x};\n  return ENGINE.runKernel(OnesLike, inputs as {} as NamedTensorMap);\n}\n\nexport const onesLike = op({onesLike_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(\n    v1: Tensor1D|TensorLike, v2: Tensor1D|TensorLike): Tensor2D {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n\n  util.assert(\n      $v1.rank === 1 && $v2.rank === 1,\n      () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n          `${$v1.rank} and ${$v2.rank}.`);\n\n  const v12D = reshape($v1, [-1, 1]);\n  const v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\n\nexport const outerProduct = op({outerProduct_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {PadV2, PadV2Attrs, PadV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` with a given value and paddings.\n *\n * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,\n * refer to `tf.mirrorPad`\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `paddings` is of given length.\n *   - `tf.pad1d`\n *   - `tf.pad2d`\n *   - `tf.pad3d`\n *   - `tf.pad4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.pad([[1, 2]]).print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * @param constantValue The pad value to use. Defaults to 0.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction pad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>, constantValue = 0): T {\n  const $x = convertToTensor(x, 'x', 'pad');\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n\n  const attrs: PadV2Attrs = {paddings, constantValue};\n  const inputs: PadV2Inputs = {x: $x};\n  return ENGINE.runKernel(\n      PadV2, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const pad = op({pad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(\n    x: Tensor1D|TensorLike, paddings: [number, number],\n    constantValue = 0): Tensor1D {\n  assert(\n      paddings.length === 2,\n      () => 'Invalid number of paddings. Must be length of 2.');\n  return pad(x, [paddings], constantValue);\n}\n\nexport const pad1d = op({pad1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(\n    x: Tensor2D|TensorLike, paddings: [[number, number], [number, number]],\n    constantValue = 0): Tensor2D {\n  assert(\n      paddings.length === 2 && paddings[0].length === 2 &&\n          paddings[1].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad2d = op({pad2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(\n    x: Tensor3D|TensorLike,\n    paddings: [[number, number], [number, number], [number, number]],\n    constantValue = 0): Tensor3D {\n  assert(\n      paddings.length === 3 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad3d = op({pad3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(\n    x: Tensor4D|TensorLike,\n    paddings:\n        [\n          [number, number], [number, number], [number, number], [number, number]\n        ],\n    constantValue = 0): Tensor4D {\n  assert(\n      paddings.length === 4 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2 &&\n          paddings[3].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad4d = op({pad4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\n * the \"batch\" dimension (0) such that in the output, the spatial\n * dimensions `[1, ..., M]` correspond to the position within the grid,\n * and the batch dimension combines both the position within a spatial block\n * and the original batch position. Prior to division into blocks,\n * the spatial dimensions of the input are optionally zero padded\n * according to `paddings`. See below for a precise description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n * const blockShape = [2, 2];\n * const paddings = [[0, 0], [0, 0]];\n *\n * x.spaceToBatchND(blockShape, paddings).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\n * is required that\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\n * according to `paddings` to produce `padded` of shape paddedShape.\n *\n * 2. Reshape `padded` to `reshapedPadded` of shape:\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n *\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\n * batch dimension, producing an output tensor of shape:\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction spaceToBatchND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], paddings: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank ${$x.rank} should be > than [blockShape] ${\n          blockShape.length}`);\n\n  util.assert(\n      paddings.length === blockShape.length,\n      () => `paddings.shape[0] ${\n          paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n\n  util.assert(\n      $x.shape.reduce(\n          (a, b, i) => {\n            if (i > 0 && i <= blockShape.length) {\n              return a &&\n                  ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                       blockShape[i - 1] ===\n                   0);\n            }\n            return a;\n          },\n          true),\n      () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${\n          paddings.toString()} must be divisible by blockShapes ${\n          blockShape.toString()}`);\n\n  const inputs: SpaceToBatchNDInputs = {x: $x};\n  const attrs: SpaceToBatchNDAttrs = {blockShape, paddings};\n\n  return ENGINE.runKernel(\n      SpaceToBatchND, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const spaceToBatchND = op({spaceToBatchND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {avgPool} from './avg_pool';\nimport {batchToSpaceND} from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport {maxPool} from './max_pool';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {spaceToBatchND} from './space_to_batch_nd';\n\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_<T extends Tensor3D|Tensor4D>(\n    input: T|TensorLike, windowShape: [number, number]|number,\n    poolingType: 'avg'|'max',\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dilations?: [number, number]|number, strides?: [number, number]|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in pool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, windowShape, strides, dilations, pad);\n  const dilation: [number, number] =\n      [convInfo.dilationHeight, convInfo.dilationWidth];\n\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding: number[][];\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings(\n        [convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings(\n      [convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX =\n      isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n\n  const forwardOp = poolingType === 'avg' ?\n      () => avgPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode) :\n      () => maxPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode);\n  const y = forwardOp();\n\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res as T;\n}\n\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(\n    inputShape: [number, number], blockShape: [number, number],\n    basePadding: number[][]) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\n\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(\n    filterShape: [number, number], dilation: [number, number]) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1);\n\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\nexport const pool = op({pool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Prelu, PreluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_<T extends Tensor>(x: T|TensorLike, alpha: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const inputs: PreluInputs = {x: $x, alpha: $alpha};\n  return ENGINE.runKernel(Prelu, inputs as {} as NamedTensorMap);\n}\n\nexport const prelu = op({prelu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Prod, ProdAttrs, ProdInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes the product of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.prod().print();  // or tf.prod(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.prod(axis).print();  // or tf.prod(x, axis)\n * ```\n *\n * @param x The input tensor to compute the product over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction prod_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'prod');\n\n  if ($x.dtype === 'bool') {\n    // bool is not an allowed type for the underlying kernel.\n    $x = cast($x, 'int32');\n  }\n\n  const inputs: ProdInputs = {x: $x};\n  const attrs: ProdAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Prod, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const prod = op({prod_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\n *\n * The raggedTensorToTensor op creates a dense tensor from am array of row\n * partition tensors, a value vector, and default values. If the shape is\n * unspecified, the minimal shape required to contain all the elements in the\n * ragged tensor (the natural shape) will be used. If some dimensions are left\n * unspecified, then the size of the natural shape is used in that dimension.\n *\n * The defaultValue will be broadcast to the output shape. After that, the\n * values from the ragged tensor overwrite the default values. Note that the\n * defaultValue must have less dimensions than the value.\n *\n * The row partition tensors are in the order of the dimensions. At present, the\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\n * is preceded by \"FIRST_DIM_SIZE\".\n * ```\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\n *     desired shape of the output tensor. If left unspecified (empty), the\n *     minimal shape required to contain all the elements in the ragged tensor\n *     (the natural shape) will be used. If some dimensions are left\n *     unspecified, then the size of the natural shape is used in that\n *     dimension.\n *\n *     Note that dense dimensions cannot be modified by the shape argument.\n *     Trying to change the size of a dense dimension will cause the op to fail.\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\n *\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\n *\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\n *     tensor.\n * @param defaultValue: A Tensor. Must have the same type as values. The\n *     defaultValue when the shape is larger than the ragged tensor. The\n *     defaultValue is broadcast until it is the shape of the output tensor,\n *     and then overwritten by values in the ragged tensor. The default value\n *     must be compatible with this broadcast operation, and must have fewer\n *     dimensions than the value tensor.\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\n *     type in: 'int32'.\n * @param rowPartitionTypes: A list of strings. The types of the row partition\n *     tensors. At present, these can be:\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\n *         the dimensions.\n * @return A Tensor. Has the same type as values.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\nfunction raggedTensorToTensor_(\n    shape: Tensor|TensorLike, values: Tensor|TensorLike,\n    defaultValue: Tensor|TensorLike, rowPartitionTensors: Tensor[],\n    rowPartitionTypes: string[]): Tensor {\n  const $shape =\n      convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  const $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  const $rowPartitionTensors = rowPartitionTensors.map(\n      (t, i) =>\n          convertToTensor(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n\n  const inputs: RaggedTensorToTensorInputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  const attrs: RaggedTensorToTensorAttrs = {rowPartitionTypes};\n\n  return ENGINE.runKernel(RaggedTensorToTensor, inputs as {}, attrs as {});\n}\n\nexport const raggedTensorToTensor = op({raggedTensorToTensor_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  const size = sizeFromShape(shape);\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\nexport const rand = op({rand_});\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {expectNumbersClose, testEpsilon} from '../test_util';\nimport {TypedArray} from '../types';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n\nexport function jarqueBeraNormalityTest(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\n\nexport function expectArrayInMeanStdRange(\n    actual: TypedArray|number[], expectedMean: number, expectedStdDev: number,\n    epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(\n      standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values: TypedArray|number[]) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n\nfunction standardDeviation(values: TypedArray|number[], mean: number) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\n\nfunction skewness(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {RandGamma} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomGamma = op({randomGamma_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {MPRandGauss} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomNormal = op({randomNormal_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {op} from './operation';\nimport {randomNormal} from './random_normal';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * The generated values will have mean 0 and standard deviation 1.\n *\n * ```js\n * tf.randomStandardNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomStandardNormal_<R extends Rank>(\n    shape: ShapeMap[R], dtype?: 'float32'|'int32', seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  return randomNormal(shape, 0, 1, dtype, seed);\n}\n\nexport const randomStandardNormal = op({randomStandardNormal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {UniformRandom} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomUniform_<R extends Rank>(\n    shape: ShapeMap[R], minval = 0, maxval = 1, dtype: DataType = 'float32',\n    seed?: number|string): Tensor<R> {\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomUniform = op({randomUniform_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Range, RangeAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\n\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a is half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.sv\n *\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function range(\n    start: number, stop: number, step = 1,\n    dtype: 'float32'|'int32' = 'float32'): Tensor1D {\n  if (step === 0) {\n    throw new Error('Cannot have a step of zero');\n  }\n\n  const attrs: RangeAttrs = {start, stop, step, dtype};\n\n  return ENGINE.runKernel(Range, {} /* inputs */, attrs as {} as NamedAttrMap);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reciprocal, ReciprocalInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes reciprocal of x element-wise: `1 / x`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, 2]);\n *\n * x.reciprocal().print();  // or tf.reciprocal(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction reciprocal_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'reciprocal');\n\n  const inputs: ReciprocalInputs = {x: $x};\n  return ENGINE.runKernel(Reciprocal, inputs as {} as NamedTensorMap);\n}\nexport const reciprocal = op({reciprocal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Relu, ReluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu');\n\n  const inputs: ReluInputs = {x: $x};\n\n  return ENGINE.runKernel(Relu, inputs as {} as NamedTensorMap);\n}\n\nexport const relu = op({relu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Relu6, Relu6Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu6_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu6');\n\n  const inputs: Relu6Inputs = {x: $x};\n\n  return ENGINE.runKernel(Relu6, inputs as {} as NamedTensorMap);\n}\n\nexport const relu6 = op({relu6_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reverse, ReverseAttrs, ReverseInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction reverse_<T extends Tensor>(\n    x: T|TensorLike, axis?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'reverse');\n\n  const inputs: ReverseInputs = {x: $x};\n  const attrs: ReverseAttrs = {dims: axis};\n\n  return ENGINE.runKernel(\n      Reverse, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const reverse = op({reverse_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x: Tensor1D|TensorLike): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 1,\n      () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n  return reverse($x, 0);\n}\n\nexport const reverse1d = op({reverse1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x: Tensor2D|TensorLike, axis?: number|number[]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 2,\n      () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse2d = op({reverse2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x: Tensor3D|TensorLike, axis?: number|number[]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 3,\n      () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse3d = op({reverse3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x: Tensor4D|TensorLike, axis?: number|number[]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 4,\n      () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse4d = op({reverse4d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Round, RoundInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction round_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'round');\n  const inputs: RoundInputs = {x: $x};\n\n  return ENGINE.runKernel(Round, inputs as {} as NamedTensorMap);\n}\n\nexport const round = op({round_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Rsqrt, RsqrtInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n * `y = 1 / sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.rsqrt().print();  // or tf.rsqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction rsqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'rsqrt', 'float32');\n\n  const inputs: RsqrtInputs = {x: $x};\n\n  return ENGINE.runKernel(Rsqrt, inputs as {} as NamedTensorMap);\n}\nexport const rsqrt = op({rsqrt_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Selu, SeluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes scaled exponential linear element-wise.\n *\n * `x < 0 ? scale * alpha * (exp(x) - 1) : x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.selu().print();  // or tf.selu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction selu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'selu');\n\n  const inputs: SeluInputs = {x: $x};\n\n  return ENGINE.runKernel(Selu, inputs as {} as NamedTensorMap);\n}\n\nexport const selu = op({selu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport {depthwiseConv2d} from './depthwise_conv2d';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction separableConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike,\n    pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n    pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter =\n      convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter =\n      convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error(\n        'separableConv2d currently does not support dataFormat NCHW; only ' +\n        'NHWC is supported');\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in separableConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $depthwiseFilter.rank === 4,\n      () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.rank === 4,\n      () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.shape[0] === 1,\n      () =>\n          `Error in separableConv2d: the first dimension of pointwise filter ` +\n          ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert(\n      $pointwiseFilter.shape[1] === 1,\n      () => `Error in separableConv2d: the second dimension of pointwise ` +\n          `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert(\n      $pointwiseFilter.shape[2] === inChannels * channelMultiplier,\n      () =>\n          `Error in separableConv2d: the third dimension of pointwise filter ` +\n          `must be ${inChannels * channelMultiplier}, ` +\n          `but got ${$pointwiseFilter.shape[2]}.`);\n\n  const depthwise = depthwiseConv2d(\n      x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res =\n      conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res as T;\n}\n\nexport const separableConv2d = op({separableConv2d_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sign, SignInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns an element-wise indication of the sign of a number.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n *\n * x.sign().print();  // or tf.sign(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sign_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sign');\n  const inputs: SignInputs = {x: $x};\n  return ENGINE.runKernel(Sign, inputs as {} as NamedTensorMap);\n}\nexport const sign = op({sign_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sin, SinInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes sin of the input Tensor element-wise: `sin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.sin().print();  // or tf.sin(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sin', 'float32');\n\n  const inputs: SinInputs = {x: $x};\n\n  return ENGINE.runKernel(Sin, inputs as {} as NamedTensorMap);\n}\nexport const sin = op({sin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sinh, SinhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.sinh().print();  // or tf.sinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sinh');\n  const inputs: SinhInputs = {x: $x};\n\n  return ENGINE.runKernel(Sinh, inputs as {} as NamedTensorMap);\n}\nexport const sinh = op({sinh_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n * of length `size`. See `slice` for details.\n */\nfunction slice1d_(\n    x: Tensor1D|TensorLike, begin: number, size: number): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'slice1d');\n  util.assert(\n      $x.rank === 1,\n      () =>\n          `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, [begin], [size]);\n}\nexport const slice1d = op({slice1d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(\n    x: Tensor2D|TensorLike, begin: [number, number],\n    size: [number, number]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'slice2d');\n  util.assert(\n      $x.rank === 2,\n      () =>\n          `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice2d = op({slice2d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice3d_(\n    x: Tensor3D|TensorLike, begin: [number, number, number],\n    size: [number, number, number]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'slice3d');\n  util.assert(\n      $x.rank === 3,\n      () =>\n          `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice3d = op({slice3d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice4d_(\n    x: Tensor4D|TensorLike, begin: [number, number, number, number],\n    size: [number, number, number, number]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'slice4d');\n  util.assert(\n      $x.rank === 4,\n      () =>\n          `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice4d = op({slice4d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Softmax, SoftmaxAttrs, SoftmaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the softmax normalized vector given the logits.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction softmax_<T extends Tensor>(logits: T|TensorLike, dim = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'softmax', 'float32');\n\n  if (dim === -1) {\n    dim = $logits.rank - 1;\n  }\n  if (dim !== $logits.rank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and dim was ${dim}`);\n  }\n\n  const inputs: SoftmaxInputs = {logits: $logits};\n  const attrs: SoftmaxAttrs = {dim};\n\n  return ENGINE.runKernel(\n      Softmax, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const softmax = op({softmax_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FFT, FFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.fft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: FFTInputs = {input};\n\n  return ENGINE.runKernel(FFT, inputs as {} as NamedTensorMap);\n}\n\nexport const fft = op({fft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {IFFT, IFFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: IFFTInputs = {input};\n\n  return ENGINE.runKernel(IFFT, inputs as {} as NamedTensorMap);\n}\n\nexport const ifft = op({ifft_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {reverse} from '../reverse';\nimport {scalar} from '../scalar';\nimport {slice} from '../slice';\n\nimport {ifft} from './ifft';\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret: Tensor;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n\n    const realConjugate =\n        reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate: Tensor2D = mul(\n        reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1),\n        scalar(-1));\n\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput =\n        reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  // reshape the result if the input is 3D tensor.\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\n\nexport const irfft = op({irfft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {SplitV, SplitVAttrs, SplitVInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_<T extends Tensor>(\n    x: Tensor|TensorLike, numOrSizeSplits: number[]|number, axis = 0): T[] {\n  const $x = convertToTensor(x, 'x', 'split');\n\n  const inputs: SplitVInputs = {x: $x};\n  const attr: SplitVAttrs = {numOrSizeSplits, axis};\n\n  return ENGINE.runKernel(\n             SplitV, inputs as {} as NamedTensorMap,\n             attr as {} as NamedAttrMap) as {} as T[];\n}\n\nexport const split = op({split_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {assert} from '../../util';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {split} from '../split';\nimport {zeros} from '../zeros';\nimport {zerosLike} from '../zeros_like';\n\nimport {fft} from './fft';\n\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input: Tensor, fftLength?: number): Tensor {\n  assert(\n      input.dtype === 'float32',\n      () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n\n  let innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  let adjustedInput: Tensor;\n  if (fftLength != null && fftLength < innerDimensionSize) {\n    // Need to crop\n    const begin = input.shape.map(v => 0);\n    const size = input.shape.map(v => v);\n    size[input.shape.length - 1] = fftLength;\n    adjustedInput = slice(input, begin, size);\n    innerDimensionSize = fftLength;\n  } else if (fftLength != null && fftLength > innerDimensionSize) {\n    // Need to pad with zeros\n    const zerosShape = input.shape.map(v => v);\n    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n    adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);\n    innerDimensionSize = fftLength;\n  } else {\n    adjustedInput = input;\n  }\n\n  // Complement the input with zero imaginary numbers.\n  const zerosInput = zerosLike(adjustedInput);\n  const complexInput =\n      reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n\n  const ret = fft(complexInput);\n\n  // Exclude complex conjugations. These conjugations are put symmetrically.\n  const half = Math.floor(innerDimensionSize / 2) + 1;\n  const realValues = real(ret);\n  const imagValues = imag(ret);\n  const realComplexConjugate = split(\n      realValues, [half, innerDimensionSize - half],\n      realValues.shape.length - 1);\n  const imagComplexConjugate = split(\n      imagValues, [half, innerDimensionSize - half],\n      imagValues.shape.length - 1);\n\n  const outputShape = adjustedInput.shape.slice();\n  outputShape[adjustedInput.shape.length - 1] = half;\n\n  return reshape(\n      complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\n\nexport const rfft = op({rfft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SquaredDifference, SquaredDifferenceInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction squaredDifference_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'squaredDifference');\n  let $b = convertToTensor(b, 'b', 'squaredDifference');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: SquaredDifferenceInputs = {a: $a, b: $b};\n  const attrs = {};\n\n  return ENGINE.runKernel(\n      SquaredDifference, inputs as unknown as NamedTensorMap, attrs);\n}\n\nexport const squaredDifference = op({squaredDifference_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {squeezeShape} from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_<T extends Tensor>(x: Tensor|TensorLike, axis?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');\n  return reshape($x, squeezeShape($x.shape, axis).newShape) as T;\n}\n\nexport const squeeze = op({squeeze_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Pack, PackAttrs, PackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_<T extends Tensor>(\n    tensors: Array<T|TensorLike>, axis = 0): Tensor {\n  const $tensors =\n      convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n\n  util.assert(\n      $tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n\n  if ($tensors.length > 0) {\n    util.assert(\n        axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n  }\n\n  const inputs: PackInputs = $tensors;\n  const attrs: PackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Pack, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const stack = op({stack_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Step, StepAttrs, StepInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction step_<T extends Tensor>(x: T|TensorLike, alpha = 0.0): T {\n  const $x = convertToTensor(x, 'x', 'step');\n\n  const inputs: StepInputs = {x: $x};\n  const attrs: StepAttrs = {alpha};\n\n  return ENGINE.runKernel(\n      Step, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\nexport const step = op({step_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {StridedSlice, StridedSliceAttrs, StridedSliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction stridedSlice_(\n    x: Tensor|TensorLike, begin: number[], end: number[], strides?: number[],\n    beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n    shrinkAxisMask = 0): Tensor {\n  const $x = convertToTensor(x, 'x', 'stridedSlice', 'string_or_numeric');\n\n  const inputs: StridedSliceInputs = {x: $x};\n  const attrs: StridedSliceAttrs = {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  return ENGINE.runKernel(\n      StridedSlice, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const stridedSlice = op({stridedSlice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tan, TanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.tan().print();  // or tf.tan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tan', 'float32');\n\n  const inputs: TanInputs = {x: $x};\n\n  return ENGINE.runKernel(Tan, inputs as {} as NamedTensorMap);\n}\nexport const tan = op({tan_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike1D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 1) {\n    throw new Error('tensor1d() requires values to be a flat/TypedArray');\n  }\n  const shape: number[] = null;\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor1D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike2D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor2d(\n    values: TensorLike2D, shape?: [number, number],\n    dtype?: DataType): Tensor2D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 2) {\n    throw new Error('tensor2d() requires shape to have two numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor2d() requires values to be number[][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor2d() requires shape to be provided when `values` ' +\n        'are a flat/TypedArray');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {TopK, TopKAttrs, TopKInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const inputs: TopKInputs = {x: $x};\n  const attrs: TopKAttrs = {k, sorted};\n\n  const [values, indices] = ENGINE.runKernel(\n      TopK, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n\n  return {values, indices} as {values: T, indices: T};\n}\n\nexport const topk = op({topk_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {MPRandGauss} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction truncatedNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type $ { dtype }`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const truncatedNormal = op({truncatedNormal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Unique, UniqueAttrs, UniqueInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Finds unique elements along an axis of a tensor.\n *\n * It returns a tensor `values` containing all of the unique elements along the\n * `axis` of the given tensor `x` in the same order that they occur along the\n * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor\n * `indices` the same size as the number of the elements in `x` along the `axis`\n * dimension. It contains the index in the unique output `values`.\n *\n * ```js\n * // A 1-D tensor\n * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);\n * const {values, indices} = tf.unique(a);\n * values.print();   // [1, 2, 4, 7, 8,]\n * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]\n * ```\n *\n * ```js\n * // A 2-D tensor with axis=0\n * //\n * // 'a' is: [[1, 0, 0],\n * //          [1, 0, 0],\n * //          [2, 0, 0]]\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\n * const {values, indices} = tf.unique(a, 0)\n * values.print();   // [[1, 0, 0],\n *                   //  [2, 0, 0]]\n * indices.print();  // [0, 0, 1]\n * ```\n *\n * ```js\n * // A 2-D tensor with axis=1\n * //\n * // 'a' is: [[1, 0, 0],\n * //          [1, 0, 0],\n * //          [2, 0, 0]]\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\n * const {values, indices} = tf.unique(a, 1)\n * values.print();   // [[1, 0],\n *                   //  [1, 0],\n *                   //  [2, 0]]\n * indices.print();  // [0, 1, 1]\n * ```\n * @param x A tensor (int32, string, bool).\n * @param axis The axis of the tensor to find the unique elements.\n * @returns [uniqueElements, indices] (see above for details)\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction unique_<T extends Tensor>(\n    x: T|TensorLike, axis = 0): {values: T, indices: Tensor1D} {\n  const $x = convertToTensor(x, 'x', 'unique', 'string_or_numeric');\n  assert($x.rank > 0, () => 'The input tensor must be at least 1D');\n\n  const inputs: UniqueInputs = {x: $x};\n  const attrs: UniqueAttrs = {axis};\n  const [values, indices] = ENGINE.runKernel(\n                                Unique, inputs as {} as NamedTensorMap,\n                                attrs as {} as NamedAttrMap) as [T, Tensor1D];\n  return {values, indices};\n}\n\nexport const unique = op({unique_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, isInt} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n *\n * @doc {heading: 'Operations', subheading: 'Segment'}\n */\nfunction unsortedSegmentSum_<T extends Tensor>(\n    x: T|TensorLike, segmentIds: Tensor1D|TensorLike, numSegments: number): T {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n\n  const inputs: UnsortedSegmentSumInputs = {x: $x, segmentIds: $segmentIds};\n  const attrs: UnsortedSegmentSumAttrs = {numSegments};\n\n  return ENGINE.runKernel(\n      UnsortedSegmentSum, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const unsortedSegmentSum = op({unsortedSegmentSum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Unpack, UnpackAttrs, UnpackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x: Tensor|TensorLike, axis = 0): Tensor[] {\n  const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n  util.assert(\n      axis >= -$x.shape.length && axis < $x.shape.length,\n      () =>\n          `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n\n  const inputs: UnpackInputs = {value: $x};\n  const attrs: UnpackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Unpack, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const unstack = op({unstack_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the Where kernel shared between cpu and webgl */\n\nimport {buffer} from '../ops/buffer';\nimport {Tensor2D} from '../tensor';\nimport {TypedArray} from '../types';\n\nexport function whereImpl(condShape: number[], condVals: TypedArray): Tensor2D {\n  const indices = [];\n  for (let i = 0; i < condVals.length; i++) {\n    if (condVals[i]) {\n      indices.push(i);\n    }\n  }\n\n  const inBuffer = buffer(condShape, 'int32');\n\n  const out = buffer([indices.length, condShape.length], 'int32');\n  for (let i = 0; i < indices.length; i++) {\n    const loc = inBuffer.indexToLoc(indices[i]);\n    const offset = i * condShape.length;\n    out.values.set(loc, offset);\n  }\n  return out.toTensor() as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {whereImpl} from '../backends/where_impl';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nasync function whereAsync_(condition: Tensor|TensorLike): Promise<Tensor2D> {\n  const $condition =\n      convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\n\nexport const whereAsync = whereAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {gather} from './gather';\nimport {reshape} from './reshape';\nimport {squeeze} from './squeeze';\nimport {whereAsync} from './where_async';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor} from '../tensor';\nimport {assertTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {add} from './add';\nimport {div} from './div';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {scalar} from './scalar';\nimport {sub} from './sub';\n\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n *\n * @doc {heading: 'Operations', subheading: 'Moving Average'}\n */\nfunction movingAverage_<T extends Tensor>(\n    v: T|TensorLike, x: T|TensorLike, decay: number|Scalar,\n    step?: number|Scalar, zeroDebias = true): T {\n  const $v = convertToTensor(v, 'v', 'movingAverage');\n  const $x = convertToTensor(x, 'x', 'movingAverage');\n  const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n\n  assertTypesMatch($v, $x);\n  util.assert(\n      util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n\n  const one = scalar(1);\n  const oneMinusDecay = sub(one, $decay);\n\n  let update = mul(sub($x, $v), oneMinusDecay);\n  if (zeroDebias) {\n    util.assert(\n        step != null, () => 'When using zeroDebias: true, step is required.');\n    const $step = convertToTensor(step, 'step', 'movingAverage');\n    update = div(update, sub(one, pow($decay, $step)));\n  }\n  return add($v, update);\n}\n\nexport const movingAverage = op({movingAverage_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ScatterNd, ScatterNdAttrs, ScatterNdInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\n\nimport {op} from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction scatterND_<R extends Rank>(\n    indices: Tensor|TensorLike, updates: Tensor|TensorLike,\n    shape: ShapeMap[R]): Tensor<R> {\n  const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n  const $updates = convertToTensor(updates, 'updates', 'scatterND');\n  scatter_nd_util.validateInput($updates, $indices, shape);\n\n  const inputs: ScatterNdInputs = {indices: $indices, updates: $updates};\n  const attrs: ScatterNdAttrs = {shape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             ScatterNd, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor<R>;\n}\n\nexport const scatterND = op({scatterND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SparseToDense, SparseToDenseAttrs, SparseToDenseInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ScalarLike, ShapeMap, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. the type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction sparseToDense_<R extends Rank>(\n    sparseIndices: Tensor|TensorLike, sparseValues: Tensor|TensorLike,\n    outputShape: ShapeMap[R], defaultValue: Scalar|ScalarLike = 0): Tensor<R> {\n  const $sparseIndices =\n      convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n  const $sparseValues = convertToTensor(\n      sparseValues, 'sparseValues', 'sparseToDense', 'string_or_numeric');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n\n  sparse_to_dense.validateInput(\n      $sparseIndices, $sparseValues, outputShape, $defaultValue);\n\n  const inputs: SparseToDenseInputs = {\n    sparseIndices: $sparseIndices,\n    sparseValues: $sparseValues,\n    defaultValue: $defaultValue\n  };\n\n  const attrs: SparseToDenseAttrs = {outputShape};\n\n  return ENGINE.runKernel(\n      SparseToDense, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const sparseToDense = op({sparseToDense_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\n\n/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(\n    sparseIndices: Tensor, sparseValues: Tensor, outputShape: number[],\n    defaultValues: Tensor) {\n  if (sparseIndices.dtype !== 'int32') {\n    throw new Error(\n        'tf.sparseToDense() expects the indices to be int32 type,' +\n        ` but the dtype was ${sparseIndices.dtype}.`);\n  }\n  if (sparseIndices.rank > 2) {\n    throw new Error(\n        'sparseIndices should be a scalar, vector, or matrix,' +\n        ` but got shape ${sparseIndices.shape}.`);\n  }\n\n  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n\n  if (outputShape.length !== numDims) {\n    throw new Error(\n        'outputShape has incorrect number of elements:,' +\n        ` ${outputShape.length}, should be: ${numDims}.`);\n  }\n\n  const numValues = sparseValues.size;\n  if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n    throw new Error(\n        'sparseValues has incorrect shape ' +\n        `${sparseValues.shape}, should be [] or [${numElems}]`);\n  }\n\n  if (sparseValues.dtype !== defaultValues.dtype) {\n    throw new Error('sparseValues.dtype must match defaultValues.dtype');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {GatherNd, GatherNdInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  const $x = convertToTensor(x, 'x', 'gatherND', 'string_or_numeric');\n\n  const inputs: GatherNdInputs = {params: $x, indices: $indices};\n\n  return ENGINE.runKernel(GatherNd, inputs as {} as NamedTensorMap);\n}\n\nexport const gatherND = op({gatherND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {add} from './add';\nimport {div} from './div';\nimport {getNoiseShape} from './dropout_util';\nimport {floor} from './floor';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {randomUniform} from './random_uniform';\n\n/**\n * Computes dropout.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 2, 1]);\n * const rate = 0.75;\n * const output = tf.dropout(x, rate);\n * output.print();\n * ```\n *\n * @param x A floating point Tensor or TensorLike.\n * @param rate A float in the range [0, 1). The probability that each element\n *   of x is discarded.\n * @param noiseShape An array of numbers of type int32, representing the\n * shape for randomly generated keep/drop flags. If the noiseShape has null\n * value, it will be automatically replaced with the x's relative dimension\n * size. Optional.\n * @param seed Used to create random seeds. Optional.\n * @returns A Tensor of the same shape of x.\n *\n * @doc {heading: 'Operations', subheading: 'Dropout'}\n */\nfunction dropout_(\n    x: Tensor|TensorLike, rate: number, noiseShape?: number[],\n    seed?: number|string): Tensor {\n  const $x = convertToTensor(x, 'x', 'dropout');\n\n  util.assert(\n      $x.dtype === 'float32',\n      () => `x has to be a floating point tensor since it's going to be ` +\n          `scaled, but got a ${$x.dtype} tensor instead.`);\n  util.assert(\n      rate >= 0 && rate < 1,\n      () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n\n  const $noiseShape = getNoiseShape($x, noiseShape);\n  const keepProb = 1 - rate;\n  const multiplier = div(\n      floor(add(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)),\n      keepProb);\n\n  return mul($x, multiplier);\n}\n\nexport const dropout = op({dropout_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x: Tensor, noiseShape?: number[]): number[] {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n  if (util.arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n  if (x.shape.length === noiseShape.length) {\n    const newDimension: number[] = [];\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n    return newDimension;\n  }\n\n  return noiseShape;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {tensor1d} from './tensor1d';\n\nexport function enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nexport function cosineWindow(\n    windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: Conv2DBackpropFilterAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv2DBackpropFilter, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor4D;\n}\n\nexport const conv2DBackpropFilter = op({conv2DBackpropFilter_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\nimport * as broadcast_util from './broadcast_util';\nimport {elu} from './elu';\nimport {Activation} from './fused_types';\nimport {leakyRelu} from './leaky_relu';\nimport {mul} from './mul';\nimport {prelu} from './prelu';\nimport {relu} from './relu';\nimport {relu6} from './relu6';\nimport {reshape} from './reshape';\nimport {sigmoid} from './sigmoid';\nimport {step} from './step';\nimport {sum} from './sum';\n\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(\n    dy: Tensor, y: Tensor, activation: Activation): Tensor {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(\n      `Cannot compute gradient for fused activation ${activation}.`);\n}\n\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(\n    bias: Tensor, dyActivation: Tensor): Tensor {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\n\nexport function applyActivation(\n    x: Tensor, activation: Activation, preluActivationWeights?: Tensor,\n    leakyreluAlpha?: number): Tensor {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {conv2d as unfusedConv2d} from '../conv2d';\nimport {conv2DBackpropFilter} from '../conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  activation = activation || 'linear';\n\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    // TODO: Transpose bias and preluActivationWeights properly for NCHW\n    // format before computation.\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Error in fused conv2d: got dataFormat of ${dataFormat} but ` +\n            `only NHWC is currently supported for the case of gradient depth ` +\n            `is 0 and the activation is not linear.`);\n\n    let result = unfusedConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n          `${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('fused conv2d', pad, dimRoundingMode);\n  const inputChannels = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      $filter.shape[2] === inputChannels,\n      () => `Error in conv2d: depth of input (${inputChannels}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    // According to TensorFlow, the bias is supposed be a 1-D tensor or a\n    // scalar.\n    //\n    // 3-D or 4-D bias is not disabled for NHWC format, because they are\n    // currently being used in some cases. For examplem in our code base,\n    // https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/fused_conv2d_test.ts#L1972.\n    if (dataFormat === 'NHWC') {\n      broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    } else {\n      util.assert(\n          $bias.shape.length <= 1,\n          () => `Error in fused conv2d: only supports scalar or 1-D Tensor ` +\n              `bias for NCHW format but got the bias of ` +\n              `rank-${$bias.shape.length}.`);\n\n      util.assert(\n          $bias.shape.length === 0 || $bias.shape[0] === convInfo.outChannels ||\n              $bias.shape[0] === 1,\n          () => `Error in fused conv2d: bias shape (${$bias.shape}) is not ` +\n              `compatible with the number of output channels ` +\n              `(${convInfo.outChannels})`);\n    }\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    // PReLU's activation weights could be a scalar, a 1-D tensor or a 3-D\n    // tensor.\n    const alphaShape = preluActivationWeights.shape;\n    util.assert(\n        alphaShape.length <= 1 || alphaShape.length === 3,\n        () => `Error in fused conv2d: only supports scalar, 1-D Tensor or ` +\n            `3-D Tensor PReLU activation weights but got a tensor of ` +\n            `rank-${alphaShape.length}.`);\n\n    if (alphaShape.length === 1) {\n      // Whether the data format is NCHW or NHWC, the 1-D PReLU activation\n      // weights tensor should be aligned with the output channels of conv2d\n      // result.\n      util.assert(\n          alphaShape[0] === 1 || alphaShape[0] === convInfo.outChannels,\n          () => `Error in fused conv2d: PReLU activation weights ` +\n              `(${alphaShape}) is not compatible with the number of output ` +\n              `channels (${convInfo.outChannels}).`);\n    } else if (alphaShape.length === 3) {\n      // Whether the data format is NCHW or NHWC, the PReLU activation weights\n      // tensor should has the compatible shape with the result of conv2d.\n      try {\n        broadcast_util.assertAndGetBroadcastShape(\n            alphaShape, convInfo.outShape);\n      } catch (e) {\n        const errMsg =\n            `Error in fused conv2d: PReLU activation weights (${alphaShape}) ` +\n            `is not compatible with the output shape of the conv2d ` +\n            `(${convInfo.outShape}).`;\n        throw Error(errMsg);\n      }\n    }\n\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Error in gradient of fused conv2D: got dataFormat of ${\n            dataFormat} but only NHWC is currently supported.`);\n\n    const [$filter, x4D, y, $bias] =\n        saved as [Tensor4D, Tensor4D, Tensor4D, Tensor];\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    const xDer =\n        conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n    const filterDer =\n        conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n    const der: Tensor[] = [xDer, filterDer];\n\n    if ($bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      der.push(biasDer);\n    }\n    return der;\n  };\n\n  const inputs: FusedConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n\n  const attrs: FusedConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D =\n              // tslint:disable-next-line: no-unnecessary-type-assertion\n              ENGINE.runKernel(\n                  FusedConv2D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const conv2d = op({fusedConv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: DepthwiseConv2dNativeBackpropFilterAttrs =\n      {strides, pad, dimRoundingMode, dilations, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             DepthwiseConv2dNativeBackpropFilter,\n             inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap) as\n      Tensor4D;\n}\n\nexport const depthwiseConv2dNativeBackpropFilter =\n    op({depthwiseConv2dNativeBackpropFilter_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number], dy: T, filter: Tensor4D,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: DepthwiseConv2dNativeBackpropInputAttrs =\n      {strides, pad, dimRoundingMode, dilations, inputShape: xShape};\n\n  const res =\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(\n          DepthwiseConv2dNativeBackpropInput, inputs as {} as NamedTensorMap,\n          attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const depthwiseConv2dNativeBackpropInput =\n    op({depthwiseConv2dNativeBackpropInput_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport {depthwiseConv2d as unfusedDepthwiseConv2d} from '../depthwise_conv2d';\nimport {depthwiseConv2dNativeBackpropFilter} from '../depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../depthwise_conv2d_native_backprop_input';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedDepthwiseConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedDepthwiseConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n          `but got rank ${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in fused depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n          `be 1. Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode(\n      'fused depthwiseConv2d', pad, dimRoundingMode);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [$filter, x4D, y, bias] = saved;\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    const xDer = depthwiseConv2dNativeBackpropInput(\n        (x4D as Tensor4D).shape, dyActivation, $filter as Tensor4D, strides,\n        pad, dilations, dimRoundingMode);\n    const filterDer = depthwiseConv2dNativeBackpropFilter(\n        x4D as Tensor4D, dyActivation, ($filter as Tensor4D).shape, strides,\n        pad, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [xDer, filterDer, biasDer];\n    }\n    return [xDer, filterDer];\n  };\n\n  const inputs: FusedDepthwiseConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs: FusedDepthwiseConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const depthwiseConv2d = op({fusedDepthwiseConv2d_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {matMul as unfusedMatMul} from '../mat_mul';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n * - `leakyreluAlpha` Alpha of leakyrelu.\n */\nfunction fusedMatMul_({\n  a,\n  b,\n  transposeA = false,\n  transposeB = false,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha = 0.2,\n}: {\n  a: Tensor|TensorLike,\n  b: Tensor|TensorLike,\n  transposeA?: boolean,\n  transposeB?: boolean,\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n  leakyreluAlpha?: number\n}): Tensor {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n      let result = unfusedMatMul(a, b, transposeA, transposeB);\n      if (bias != null) {\n        result = add(result, bias);\n      }\n\n      return applyActivation(\n                 result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n\n    let $a = convertToTensor(a, 'a', 'fused matMul');\n    let $b = convertToTensor(b, 'b', 'fused matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n\n    const innerShapeA =\n        transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB =\n        transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n    const outerShapeA =\n        transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB =\n        transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n\n    util.assert(\n        innerShapeA === innerShapeB,\n        () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n            `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n            `${$b.shape} and transposeA=${transposeA}` +\n            ` and transposeB=${transposeB} must match.`);\n\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n        $a.shape.slice(0, -2), $b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n    const a3D: Tensor3D = transposeA ?\n        reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D: Tensor3D = transposeB ?\n        reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n\n    let $bias: Tensor;\n    if (bias != null) {\n      $bias = convertToTensor(bias, 'bias', 'fused matMul');\n      [$bias] = makeTypesMatch($bias, $a);\n\n      broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n    }\n\n    let $preluActivationWeights: Tensor;\n    if (preluActivationWeights != null) {\n      $preluActivationWeights = convertToTensor(\n          preluActivationWeights, 'prelu weights', 'fused matMul');\n    }\n\n    const grad = (dy: Tensor3D, saved: Tensor[]) => {\n      const [a3D, b3D, y, $bias] = saved;\n      // we reshape dy because the result of the forward is not\n      // necessarily going to be a 3d tensor due to a reshape done at the end of\n      // the customOp.\n      const dyActivation =\n          getFusedDyActivation(reshape(dy, y.shape), y, activation);\n      let aDer: Tensor;\n      let bDer: Tensor;\n\n      if (!transposeA && !transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, true, false);\n      } else if (!transposeA && transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, false);\n        bDer = unfusedMatMul(dyActivation, a3D, true, false);\n      } else if (transposeA && !transposeB) {\n        aDer = unfusedMatMul(b3D, dyActivation, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, false, false);\n      } else {\n        aDer = unfusedMatMul(b3D, dyActivation, true, true);\n        bDer = unfusedMatMul(dyActivation, a3D, true, true);\n      }\n\n      if (bias != null) {\n        const biasDer = getFusedBiasGradient($bias, dyActivation);\n        return [aDer, bDer, biasDer];\n      } else {\n        return [aDer, bDer];\n      }\n    };\n\n    const inputs: _FusedMatMulInputs = {\n      a: a3D,\n      b: b3D,\n      bias: $bias,\n      preluActivationWeights: $preluActivationWeights\n    };\n    const attrs: _FusedMatMulAttrs =\n        {transposeA, transposeB, activation, leakyreluAlpha};\n\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n      const customOp =\n          customGrad((a3D: Tensor3D, b3D: Tensor3D, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as {} as NamedTensorMap,\n                    attrs as {} as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n      return customOp(a3D, b3D);\n    } else {\n      const customOpWithBias = customGrad(\n          (a3D: Tensor3D, b3D: Tensor3D, $bias: Tensor, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as {} as NamedTensorMap,\n                    attrs as {} as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res, $bias]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n\n      return customOpWithBias(a3D, b3D, $bias);\n    }\n  }\n\n  export const matMul = op({fusedMatMul_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../../tensor';\nimport {op} from '../operation';\nimport {cosineWindow} from '../signal_ops_util';\n\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.54, 0.46);\n}\nexport const hammingWindow = op({hammingWindow_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../../tensor';\nimport {op} from '../operation';\nimport {cosineWindow} from '../signal_ops_util';\n\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\n\nexport const hannWindow = op({hannWindow_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {concat} from '../concat';\nimport {fill} from '../fill';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {tensor2d} from '../tensor2d';\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat([\n        slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n      ]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({frame_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {enclosingPowerOfTwo} from '../signal_ops_util';\nimport {rfft} from '../spectral/rfft';\n\nimport {frame} from './frame';\nimport {hannWindow} from './hann_window';\n\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(\n    signal: Tensor1D, frameLength: number, frameStep: number,\n    fftLength?: number,\n    windowFn: (length: number) => Tensor1D = hannWindow): Tensor {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  return rfft(windowedSignal, fftLength);\n}\nexport const stft = op({stft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor1D, Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method: 'bilinear'|'nearest' = 'bilinear',\n    extrapolationValue = 0,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const inputs:\n      CropAndResizeInputs = {image: $image, boxes: $boxes, boxInd: $boxInd};\n  const attrs: CropAndResizeAttrs = {method, extrapolationValue, cropSize};\n  const res = ENGINE.runKernel(\n      CropAndResize, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const cropAndResize = op({cropAndResize_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FlipLeftRight, FlipLeftRightInputs} from '../../kernel_names';\nimport {Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {op} from '../operation';\n\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image: Tensor4D|TensorLike): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in flipLeftRight: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  const inputs: FlipLeftRightInputs = {image: $image};\n  const res =\n      ENGINE.runKernel(FlipLeftRight, inputs as {} as NamedTensorMap, {});\n  return res as Tensor4D;\n}\n\nexport const flipLeftRight = op({flipLeftRight_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {tile} from '../tile';\n\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_<T extends Tensor2D|Tensor3D|Tensor4D|Tensor5D|\n                         Tensor6D>(image: T|TensorLike): T {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n\n  util.assert(\n      $image.rank >= 2,\n      () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      lastDims === 1,\n      () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n          `should be size 1, but got size ${lastDims}.`);\n\n  const reps = new Array($image.rank);\n\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = op({grayscaleToRGB_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Rotates the input image tensor counter-clockwise with an optional offset\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param radians The amount of rotation.\n * @param fillValue The value to fill in the empty space leftover\n *     after rotation. Can be either a single grayscale value (0-255), or an\n *     array of three numbers `[red, green, blue]` specifying the red, green,\n *     and blue channels. Defaults to `0` (black).\n * @param center The center of rotation. Can be either a single value (0-1), or\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\n *     the image around its center).\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rotateWithOffset_(\n    image: Tensor4D|TensorLike, radians: number,\n    fillValue: number|[number, number, number] = 0,\n    center: number|[number, number] = 0.5): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in rotateWithOffset: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  const inputs: RotateWithOffsetInputs = {image: $image};\n  const attrs: RotateWithOffsetAttrs = {radians, fillValue, center};\n  const res = ENGINE.runKernel(\n      RotateWithOffset, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const rotateWithOffset = op({rotateWithOffset_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\nexport {nonMaxSuppSanityCheck};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV3} from '../../kernel_names';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppression_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Tensor1D {\n  const $boxes =\n      convertToTensor(boxes, 'boxes', 'nonMaxSuppression', 'float32');\n  const $scores =\n      convertToTensor(scores, 'scores', 'nonMaxSuppression', 'float32');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const attrs = {maxOutputSize, iouThreshold, scoreThreshold};\n  return ENGINE.runKernel(\n      NonMaxSuppressionV3, {boxes: $boxes, scores: $scores}, attrs);\n}\n\nexport const nonMaxSuppression = op({nonMaxSuppression_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert<T>(\n    arr: T[], element: T, comparator?: (a: T, b: T) => number) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch<T>(\n    arr: T[], target: T, comparator?: (a: T, b: T) => number) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator<T>(a: T, b: T): number {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction binarySearch_<T>(\n    arr: T[], target: T, comparator: (a: T, b: T) => number) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + ((right - left) >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n      found = !compareResult;\n    }\n  }\n\n  return found ? left : -left - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\nimport {binaryInsert} from './non_max_suppression_util';\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\ninterface Candidate {\n  score: number;\n  boxIndex: number;\n  suppressBeginIndex: number;\n}\n\ninterface NonMaxSuppressionResult {\n  selectedIndices: number[];\n  selectedScores?: number[];\n  validOutputs?: number;\n}\n\nexport function nonMaxSuppressionV3Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */);\n}\n\nexport function nonMaxSuppressionV4Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    padToMaxOutputSize: boolean): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */, false /* returnScoresTensor */,\n      padToMaxOutputSize /* padToMaxOutputSize */, true\n      /* returnValidOutputs */);\n}\n\nexport function nonMaxSuppressionV5Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    softNmsSigma: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma,\n      true /* returnScoresTensor */);\n}\n\nfunction nonMaxSuppressionImpl_(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma: number,\n    returnScoresTensor = false, padToMaxOutputSize = false,\n    returnValidOutputs = false): NonMaxSuppressionResult {\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({score: scores[i], boxIndex: i, suppressBeginIndex: 0});\n    }\n  }\n\n  candidates.sort(ascendingComparator);\n\n  // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n  const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n\n  const selectedIndices: number[] = [];\n  const selectedScores: number[] = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {score: originalScore, boxIndex, suppressBeginIndex} = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    }\n\n    // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n    let ignoreCandidate = false;\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score =\n          candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    }\n\n    // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  }\n\n  // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0.0));\n  }\n\n  const result: NonMaxSuppressionResult = {selectedIndices};\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = selectedScores;\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = validOutputs;\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes: TypedArray, i: number, j: number) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold: number, scale: number, iou: number) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1: Candidate, c2: Candidate) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return (c1.score - c2.score) ||\n      ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionV3Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return tensor1d(selectedIndices, 'int32');\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): NamedTensorMap {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const inputs: NonMaxSuppressionV5Inputs = {boxes: $boxes, scores: $scores};\n  const attrs: NonMaxSuppressionV5Attrs =\n      {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     NonMaxSuppressionV5, inputs as {} as NamedTensorMap,\n                     attrs as {} as NamedAttrMap) as Tensor[];\n\n  return {selectedIndices: result[0], selectedScores: result[1]};\n}\n\nexport const nonMaxSuppressionWithScore = op({nonMaxSuppressionWithScore_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV5Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionPadded_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    padToMaxOutputSize = false): NamedTensorMap {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      null /* softNmsSigma */);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n\n  const inputs: NonMaxSuppressionV4Inputs = {boxes: $boxes, scores: $scores};\n  const attrs: NonMaxSuppressionV4Attrs = {\n    maxOutputSize: $maxOutputSize,\n    iouThreshold: $iouThreshold,\n    scoreThreshold: $scoreThreshold,\n    padToMaxOutputSize\n  };\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     NonMaxSuppressionV4, inputs as {} as NamedTensorMap,\n                     attrs as {} as NamedAttrMap) as Tensor[];\n\n  return {selectedIndices: result[0], validOutputs: result[1]};\n}\n\nexport const nonMaxSuppressionPadded = op({nonMaxSuppressionPadded_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV4Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {scalar} from '../scalar';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    padToMaxOutputSize = false): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      null /* softNmsSigma */);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n\n  const [boxesVals, scoresVals] =\n      await Promise.all([$boxes.data(), $scores.data()]);\n\n  // We call a cpu based impl directly with the typedarray data here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold,\n      padToMaxOutputSize);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    validOutputs: scalar(validOutputs, 'int32')\n  };\n}\n\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeBilinear');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeBilinear: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [] = size;\n\n  const inputs: ResizeBilinearInputs = {images: batchImages};\n  const attrs: ResizeBilinearAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeBilinear, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeBilinear = op({resizeBilinear_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of\n *      half the actual dimensions, and yields more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () =>\n          `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      $images.dtype === 'float32' || $images.dtype === 'int32',\n      () => '`images` must have `int32` or `float32` as dtype');\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  const [] = size;\n\n  const inputs: ResizeNearestNeighborInputs = {images: batchImages};\n  const attrs:\n      ResizeNearestNeighborAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeNearestNeighbor, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeNearestNeighbor = op({resizeNearestNeighbor_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { Tensor1D, Tensor3D } from '../../tensor';\nimport { tensor1d } from '../tensor1d';\nimport { TensorLike } from '../../types';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport {slice} from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(\n    image: Tensor3D | TensorLike,\n    method = 'binary',\n    inverted = false,\n    threshValue = 0.5\n): Tensor3D {\n    const $image = convertToTensor(image, 'image', 'threshold');\n\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n\tReference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n\n    util.assert(\n        $image.rank === 3,\n        () => 'Error in threshold: image must be rank 3,' +\n            `but got rank ${$image.rank}.`);\n\n    util.assert(\n        $image.shape[2] === 3 || $image.shape[2]=== 1,\n        () => 'Error in threshold: ' +\n            'image color channel must be equal to 3 or 1' +\n            `but got ${$image.shape[2]}.`);\n\n    util.assert(\n      $image.dtype === 'int32' || $image.dtype === 'float32',\n      () => 'Error in dtype: image dtype must be int32 or float32,' +\n          `but got dtype ${$image.dtype}.`);\n\n    util.assert(\n      method === 'otsu' || method === 'binary',\n      () => `Method must be binary or otsu, but was ${method}`);\n\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r,RED_INTENCITY_COEF);\n        const $g = mul(g,GREEN_INTENCITY_COEF);\n        const $b = mul(b,BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    } else {\n        grayscale = image;\n    }\n\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32') as Tensor1D,\n            tensor([]),\n            256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n\n    const result = cast(mul(invCondition,255), 'int32');\n\n    return result as Tensor3D;\n}\n\nfunction otsu(histogram: Tensor1D, total: number):Tensor1D {\n\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst,\n        meanSec, weightForeground, weightBack;\n\n    for (let index = 0; index < histogram.size-1; index++) {\n\n        classFirst = slice(histogram, 0, index + 1);\n\n        classSecond = slice(histogram,index + 1);\n\n        weightForeground = div(sum(classFirst),total);\n\n        weightBack = div(sum(classSecond),total);\n\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n\n        meanFirst = div(meanFirstDivA, sum(classFirst) );\n\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0,classSecond.size),meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul,cInBetVarSubA), cInBetVarSubB);\n\n        const condition = greater(cInBetVar, bestInBetVar);\n\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n\n    }\n    return bestThresh;\n}\n\nexport const threshold = op({ threshold_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../../engine';\nimport {Transform, TransformAttrs, TransformInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Applies the given transform(s) to the image(s).\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param transforms Projective transform matrix/matrices. A tensor1d of length\n *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0\n *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed\n *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),\n *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the\n *     transform mapping input points to output points.\n * @param interpolation Interpolation mode.\n *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.\n * @param fillMode Points outside the boundaries of the input are filled\n *     according to the given mode, one of 'constant', 'reflect', 'wrap',\n *     'nearest'. Default to 'constant'.\n *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by\n *     reflecting about the edge of the last pixel.\n *     'constant': (k k k k | a b c d | k k k k) The input is extended by\n *     filling all values beyond the edge with the same constant value k.\n *     'wrap': (a b c d | a b c d | a b c d) The input is extended by\n *     wrapping around to the opposite edge.\n *     'nearest': (a a a a | a b c d | d d d d) The input is extended by\n *     the nearest pixel.\n * @param fillValue A float represents the value to be filled outside the\n *     boundaries when fillMode is 'constant'.\n * @param Output dimension after the transform, [height, width]. If undefined,\n *     output is the same size as input image.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction transform_(\n    image: Tensor4D|TensorLike, transforms: Tensor2D|TensorLike,\n    interpolation: 'nearest'|'bilinear' = 'nearest',\n    fillMode: 'constant'|'reflect'|'wrap'|'nearest' = 'constant', fillValue = 0,\n    outputShape?: [number, number]): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'transform', 'float32');\n  const $transforms =\n      convertToTensor(transforms, 'transforms', 'transform', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in transform: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      $transforms.rank === 2 &&\n          ($transforms.shape[0] === $image.shape[0] ||\n           $transforms.shape[0] === 1) &&\n          $transforms.shape[1] === 8,\n      () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);\n\n  util.assert(\n      outputShape == null || outputShape.length === 2,\n      () =>\n          'Error in transform: outputShape must be [height, width] or null, ' +\n          `but got ${outputShape}.`);\n\n  const inputs: TransformInputs = {image: $image, transforms: $transforms};\n  const attrs:\n      TransformAttrs = {interpolation, fillMode, fillValue, outputShape};\n\n  return ENGINE.runKernel(\n      Transform, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const transform = op({transform_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assert} from '../../util';\n\nimport {greaterEqual} from '../greater_equal';\nimport {lessEqual} from '../less_equal';\nimport {logicalAnd} from '../logical_and';\nimport {op} from '../operation';\nimport {range} from '../range';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {unstack} from '../unstack';\nimport {where} from '../where';\nimport {zeros} from '../zeros';\n\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_<T extends Tensor>(\n    a: T|TensorLike, numLower: number, numUpper: number): T {\n  assert(\n      numLower % 1 === 0,\n      () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(\n      numUpper % 1 === 0,\n      () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n\n  const $a = convertToTensor(a, 'a', 'bandPart');\n\n  assert(\n      $a.rank >= 2,\n      () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n\n  if (!(numLower <= M)) {\n    throw new Error(\n        `bandPart(): numLower (${numLower})` +\n        ` must not be greater than the number of rows (${M}).`);\n  }\n  if (!(numUpper <= N)) {\n    throw new Error(\n        `bandPart(): numUpper (${numUpper})` +\n        ` must not be greater than the number of columns (${N}).`);\n  }\n\n  if (numLower < 0) {\n    numLower = M;\n  }\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n\n  const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  const j = range(0, N, 1, 'int32');\n  const ij = sub(i, j);\n\n  const inBand = logicalAnd(\n      lessEqual(ij, scalar(+numLower, 'int32')),\n      greaterEqual(ij, scalar(-numUpper, 'int32')));\n\n  const zero = zeros([M, N], $a.dtype);\n\n  return reshape(\n             stack(unstack(reshape($a, [-1, M, N]))\n                       .map(mat => where(inBand, mat, zero))),\n             shape) as T;\n}\n\nexport const bandPart = op({bandPart_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {assert} from '../../util';\n\nimport {div} from '../div';\nimport {mul} from '../mul';\nimport {norm} from '../norm';\nimport {op} from '../operation';\nimport {split} from '../split';\nimport {squeeze} from '../squeeze';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs: Tensor1D[]|Tensor2D): Tensor1D[]|Tensor2D {\n  let inputIsTensor2D: boolean;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(\n        xs != null && xs.length > 0,\n        () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(\n          xs[i].shape[0] === dim,\n          () =>\n              'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n              `(${(xs as Tensor1D[])[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(\n      xs.length <= xs[0].shape[0],\n      () => `Gram-Schmidt: Number of vectors (${\n                (xs as Tensor1D[]).length}) exceeds ` +\n          `number of dimensions (${(xs as Tensor1D[])[0].shape[0]}).`);\n\n  const ys: Tensor1D[] = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n      return div(x, norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0) as Tensor2D;\n  } else {\n    return ys;\n  }\n}\n\nexport const gramSchmidt = op({gramSchmidt_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../../engine';\nimport {dispose} from '../../globals';\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {assert} from '../../util';\n\nimport {clone} from '../clone';\nimport {concat} from '../concat';\nimport {div} from '../div';\nimport {eye} from '../eye';\nimport {greater} from '../greater';\nimport {matMul} from '../mat_mul';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {norm} from '../norm';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {tensor2d} from '../tensor2d';\nimport {transpose} from '../transpose';\nimport {unstack} from '../unstack';\nimport {where} from '../where';\n\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x: Tensor, fullMatrices = false): [Tensor, Tensor] {\n  assert(\n      x.rank >= 2,\n      () => `qr() requires input tensor to have a rank >= 2, but got rank ${\n          x.rank}`);\n\n  if (x.rank === 2) {\n    return qr2d(x as Tensor2D, fullMatrices);\n  } else {\n    // Rank > 2.\n    // TODO(cais): Below we split the input into individual 2D tensors,\n    //   perform QR decomposition on them and then stack the results back\n    //   together. We should explore whether this can be parallelized.\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n                              .reduce((value, prev) => value * prev);\n    const x2ds = unstack(\n        reshape(\n            x,\n            [\n              outerDimsProd, x.shape[x.shape.length - 2],\n              x.shape[x.shape.length - 1]\n            ]),\n        0);\n    const q2ds: Tensor2D[] = [];\n    const r2ds: Tensor2D[] = [];\n    x2ds.forEach(x2d => {\n      const [q2d, r2d] = qr2d(x2d as Tensor2D, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = reshape(stack(q2ds, 0), x.shape);\n    const r = reshape(stack(r2ds, 0), x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x: Tensor2D, fullMatrices = false): [Tensor2D, Tensor2D] {\n  return ENGINE.tidy(() => {\n    assert(\n        x.shape.length === 2,\n        () => `qr2d() requires a 2D Tensor, but got a ${\n            x.shape.length}D Tensor.`);\n\n    const m = x.shape[0];\n    const n = x.shape[1];\n\n    let q = eye(m);    // Orthogonal transform so far.\n    let r = clone(x);  // Transformed matrix so far.\n\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w: Tensor2D = clone(one2D);\n\n    const iters = m >= n ? n : m;\n    for (let j = 0; j < iters; ++j) {\n      // This tidy within the for-loop ensures we clean up temporary\n      // tensors as soon as they are no longer needed.\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy((): [Tensor2D, Tensor2D, Tensor2D] => {\n        // Find H = I - tau * w * w', to put zeros below R(j, j).\n        const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n        const normX = norm(rjEnd1);\n        const rjj = slice(r, [j, j], [1, 1]);\n\n        // The sign() function returns 0 on 0, which causes division by zero.\n        const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n\n        const u1 = sub(rjj, mul(s, normX));\n        const wPre = div(rjEnd1, u1);\n        if (wPre.shape[0] === 1) {\n          w = clone(one2D);\n        } else {\n          w = concat(\n              [\n                one2D,\n                slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]]) as\n                    Tensor2D\n              ],\n              0);\n        }\n        const tau = neg(div(matMul(s, u1), normX)) as Tensor2D;\n\n        // -- R := HR, Q := QH.\n        const rjEndAll = slice(r, [j, 0], [m - j, n]);\n        const tauTimesW: Tensor2D = mul(tau, w);\n        const wT: Tensor2D = transpose(w);\n        if (j === 0) {\n          r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n        } else {\n          const rTimesTau: Tensor2D =\n              sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n          r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n        }\n        const tawTimesWT: Tensor2D = transpose(tauTimesW);\n        const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n          q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n        } else {\n          const qTimesTau: Tensor2D =\n              sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n          q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n        }\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = slice(q, [0, 0], [m, n]);\n      r = slice(r, [0, 0], [n, n]);\n    }\n\n    return [q, r];\n  }) as [Tensor2D, Tensor2D];\n}\n\nexport const qr = op({qr_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum Reduction {\n  NONE,\n  MEAN,\n  SUM,\n  SUM_BY_NONZERO_WEIGHTS\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {Reduction} from '../loss_ops_utils';\nimport {mean} from '../mean';\nimport {mul} from '../mul';\nimport {notEqual} from '../not_equal';\nimport {ones} from '../ones';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sum} from '../sum';\n\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_<T extends Tensor, O extends Tensor>(\n    losses: T|TensorLike, weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss as O;\n  }\n  if (reduction === Reduction.SUM) {\n    return sum(weightedLoss);\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = div(sum(weightedLoss), sum($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                                   result as O;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum(weightedLoss), scalar($losses.size));\n    } else {\n      const broadcastedWeights = mul($weights, ones($losses.shape));\n\n      const numNonZeros =\n          cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n      return div(sum(weightedLoss), numNonZeros);\n    }\n  }\n\n  throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = op({computeWeightedLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {Reduction} from '../loss_ops_utils';\nimport {op} from '../operation';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n\n  const losses = abs(sub($labels, $predictions));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = op({absoluteDifference_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike, axis: number,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'cosineDistance');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n\n  const one = scalar(1);\n  const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = op({cosineDistance_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {relu} from '../relu';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n\n  const one = scalar(1);\n  // Convert binary labels to (-1, 1)\n  $labels = sub(mul(scalar(2), $labels), one);\n  const losses = relu(sub(one, mul($labels, $predictions)));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({hingeLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {Reduction} from '../loss_ops_utils';\nimport {minimum} from '../minimum';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {square} from '../square';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, delta = 1.0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n\n  const deltaScalar = scalar(delta);\n  const error = abs(sub($predictions, $labels));\n  const quadratic = minimum(error, deltaScalar);\n  const linear = sub(error, quadratic);\n\n  const losses =\n      add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = op({huberLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {add} from '../add';\nimport {log} from '../log';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, epsilon = 1e-7,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'logLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon);\n\n  const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n  const l2 =\n      mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n  const losses = sub(l1, l2);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = op({logLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {op} from '../operation';\nimport {squaredDifference} from '../squared_difference';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction meanSquaredError_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'meanSquaredError');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n\n  const losses = squaredDifference($labels, $predictions);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const meanSquaredError = op({meanSquaredError_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {exp} from '../exp';\nimport {log1p} from '../log1p';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {relu} from '../relu';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\nfunction sigmoidCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, logits: T|TensorLike): O {\n  const $labels =\n      convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits =\n      convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch(\n      $labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n  const maxOutput = relu($logits);\n  const outputXTarget = mul($logits, $labels);\n  const sigmoidOutput = log1p(exp(neg(abs($logits))));\n\n  return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_<T extends Tensor, O extends Tensor>(\n    multiClassLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $multiClassLabels = convertToTensor(\n      multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n  assertShapesMatch(\n      $multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n\n    $multiClassLabels =\n        add(mul($multiClassLabels, sub(one, labelSmoothingScalar)),\n            mul(half, labelSmoothingScalar));\n  }\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const sigmoidCrossEntropy = op({sigmoidCrossEntropy_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {customGrad} from '../../gradients';\nimport {Tensor} from '../../tensor';\nimport {GradSaveFunc} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {add} from '../add';\nimport {expandShapeToKeepDim} from '../axis_util';\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {exp} from '../exp';\nimport {logSumExp} from '../log_sum_exp';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T, logits: T, dim = -1): O {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n\n  if (dim !== logits.rank - 1) {\n    throw Error(\n        `Softmax cross entropy along a non-last dimension is not yet ` +\n        `supported. Labels / logits was rank ${logits.rank} ` +\n        `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp =\n      customGrad((labels: Tensor, logits: Tensor, save: GradSaveFunc) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n\n        const costVector = neg(mul(logResult, labels));\n        const value: O = sum(costVector, [dim]);\n\n        const gradFunc = (dy: O, saved: Tensor[]) => {\n          const [labels, logResult] = saved;\n          const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n          return [\n            mul(reshape(dy, dyShape),\n                sub(cast(labels, 'float32'), exp(logResult))),\n            mul(reshape(dy, dyShape),\n                sub(exp(logResult), cast(labels, 'float32'))),\n          ];\n        };\n        return {value, gradFunc};\n      });\n\n  return customOp(labels, logits);\n}\n\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_<T extends Tensor, O extends Tensor>(\n    onehotLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $onehotLabels =\n      convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights: Tensor = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n\n  assertShapesMatch(\n      $onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n\n    $onehotLabels =\n        add(mul($onehotLabels, sub(one, labelSmoothingScalar)),\n            div(labelSmoothingScalar, numClasses));\n  }\n\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const softmaxCrossEntropy = op({softmaxCrossEntropy_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseFillEmptyRows, SparseFillEmptyRowsInputs} from '../../kernel_names';\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {ScalarLike, TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. the indices of the sparse tensor.\n * @param values: 1-D. the values of the sparse tensor.\n * @param denseShape: 1-D. the shape of the sparse tensor.\n * @param defaultValue: 0-D. default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. the values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. a map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseFillEmptyRows_(\n    indices: Tensor2D|TensorLike, values: Tensor1D|TensorLike,\n    denseShape: Tensor1D|TensorLike,\n    defaultValue: Scalar|ScalarLike): NamedTensorMap {\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n  const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n  const $denseShape =\n      convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n\n  if ($indices.rank !== 2) {\n    throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n  }\n  if ($values.rank !== 1) {\n    throw new Error(\n        `Values should be Tensor1D but received shape ${$values.shape}`);\n  }\n  if ($denseShape.rank !== 1) {\n    throw new Error(`Dense shape should be Tensor1D but received shape ${\n        $denseShape.shape}`);\n  }\n  if ($defaultValue.rank !== 0) {\n    throw new Error(`Default value should be a scalar but received shape ${\n        $defaultValue.shape}`);\n  }\n\n  const inputs: SparseFillEmptyRowsInputs = {\n    indices: $indices,\n    values: $values,\n    denseShape: $denseShape,\n    defaultValue: $defaultValue\n  };\n\n  const result: Tensor[] = ENGINE.runKernel(SparseFillEmptyRows, inputs as {});\n  return {\n    outputIndices: result[0],\n    outputValues: result[1],\n    emptyRowIndicator: result[2],\n    reverseIndexMap: result[3]\n  };\n}\n\nexport const sparseFillEmptyRows = op({sparseFillEmptyRows_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseReshape, SparseReshapeInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * This operation has the same semantics as reshape on the represented dense\n * tensor. The `inputIndices` are recomputed based on the requested `newShape`.\n * If one component of `newShape` is the special value -1, the size of that\n * dimension is computed so that the total dense size remains constant. At most\n * one component of `newShape` can be -1. The number of dense elements implied\n * by `newShape` must be the same as the number of dense elements originally\n * implied by `inputShape`. Reshaping does not affect the order of values in the\n * SparseTensor. If the input tensor has rank R_in and N non-empty values, and\n * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],\n * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and\n * `outputShape` has length R_out.\n *\n * ```js\n * const result = tf.sparse.sparseReshape(\n *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],\n *   [2, 3, 6], [9, -1]);\n * console.log(result);\n * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]\n * result['outputShape'].print(); // [9, 4]\n * ```\n * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty\n * values in a SparseTensor.\n * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense\n * shape.\n * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.\n * @return A map with the following properties:\n *     - outputIndices: 2-D. N x R_out matrix with the updated indices of\n *       non-empty values in the output SparseTensor.\n *     - outputShape: 1-D. R_out vector with the full dense shape of the output\n *       SparseTensor. This is the same as newShape but with any -1 dimensions\n *        filled in.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseReshape_(\n    inputIndices: Tensor2D|TensorLike, inputShape: Tensor1D|TensorLike,\n    newShape: Tensor1D|TensorLike): NamedTensorMap {\n  const $inputIndices =\n      convertToTensor(inputIndices, 'inputIndices', 'sparseReshape', 'int32');\n  const $inputShape =\n      convertToTensor(inputShape, 'inputShape', 'sparseReshape', 'int32');\n  const $newShape =\n      convertToTensor(newShape, 'newShape', 'sparseReshape', 'int32');\n\n  if ($inputIndices.rank !== 2) {\n    throw new Error(`Input indices should be Tensor2D but received shape\n        ${$inputIndices.shape}`);\n  }\n  if ($inputShape.rank !== 1) {\n    throw new Error(`Input shape should be Tensor1D but received shape ${\n        $inputShape.shape}`);\n  }\n  if ($newShape.rank !== 1) {\n    throw new Error(\n        `New shape should be Tensor1D but received shape ${$newShape.shape}`);\n  }\n\n  const inputs: SparseReshapeInputs = {\n    inputIndices: $inputIndices,\n    inputShape: $inputShape,\n    newShape: $newShape\n  };\n  const result: Tensor[] = ENGINE.runKernel(SparseReshape, inputs as {});\n  return {outputIndices: result[0], outputShape: result[1]};\n}\n\nexport const sparseReshape = op({sparseReshape_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseSegmentMean, SparseSegmentMeanInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(\n    data: Tensor|TensorLike, indices: Tensor1D|TensorLike,\n    segmentIds: Tensor1D|TensorLike): Tensor {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n\n  if ($data.rank < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n  }\n\n  const inputs: SparseSegmentMeanInputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n\n  return ENGINE.runKernel(SparseSegmentMean, inputs as {});\n}\n\nexport const sparseSegmentMean = op({sparseSegmentMean_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseSegmentSum, SparseSegmentSumInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Computes the sum along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segment.\n * const result2 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1, 2], 'int32'),\n *                                           tf.tensor1d([0, 0, 1], 'int32'));\n * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentSum_(\n    data: Tensor|TensorLike, indices: Tensor1D|TensorLike,\n    segmentIds: Tensor1D|TensorLike): Tensor {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentSum');\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseSegmentSum', 'int32');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentSum', 'int32');\n\n  if ($data.rank < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n         ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n         ${$segmentIds.shape}`);\n  }\n\n  const inputs: SparseSegmentSumInputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n\n  return ENGINE.runKernel(SparseSegmentSum, inputs as {});\n}\n\nexport const sparseSegmentSum = op({sparseSegmentSum_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringNGrams, StringNGramsAttrs, StringNGramsInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1 , then add max(`nGramWidths)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(\n    data: Tensor1D|TensorLike, dataSplits: Tensor|TensorLike, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): NamedTensorMap {\n  const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n  if ($data.dtype !== 'string') {\n    throw new Error('Data must be of datatype string');\n  }\n  if ($data.shape.length !== 1) {\n    throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n  }\n\n  const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n  if ($dataSplits.dtype !== 'int32') {\n    throw new Error('Data splits must be of datatype int32');\n  }\n\n  const attrs: StringNGramsAttrs = {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  };\n\n  const inputs: StringNGramsInputs = {data: $data, dataSplits: $dataSplits};\n  const result: Tensor[] =\n      ENGINE.runKernel(StringNGrams, inputs as {}, attrs as {});\n  return {nGrams: result[0], nGramsSplits: result[1]};\n}\n\nexport const stringNGrams = op({stringNGrams_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringSplit, StringSplitAttrs, StringSplitInputs} from '../../kernel_names';\nimport {Scalar, Tensor, Tensor1D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {ScalarLike, TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Split elements of `input` based on `delimiter` into a SparseTensor .\n *\n * Let N be the size of source (typically N will be the batch size). Split each\n * element of `input` based on `delimiter` and return a SparseTensor containing\n * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.\n *\n * `delimiter` can be empty, or a string of split characters. If `delimiter` is\n * an empty string, each element of `input` is split into individual\n * character strings. Otherwise every character of `delimiter` is a potential\n * split point.\n *\n * ```js\n * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');\n * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]\n * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']\n * result['shape'].print(); // [2, 3]\n * ```\n * @param input: 1-D. Strings to split.\n * @param delimiter: 0-D. Delimiter characters, or empty string.\n * @param skipEmpty: Optional. If true, skip the empty strings from the result.\n *     Defaults to true.\n * @return A map with the following properties:\n *     - indices: A dense matrix of int32 representing the indices of the sparse\n *       tensor.\n *     - values: A vector of strings corresponding to the splited values.\n *     - shape: a length-2 vector of int32 representing the shape of the sparse\n * tensor, where the first value is N and the second value is the maximum number\n * of tokens in a single input entry.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringSplit_(\n    input: Tensor1D|TensorLike, delimiter: Scalar|ScalarLike,\n    skipEmpty = true): NamedTensorMap {\n  const $input = convertToTensor(input, 'input', 'stringSplit', 'string');\n  const $delimiter =\n      convertToTensor(delimiter, 'delimiter', 'stringSplit', 'string');\n\n  if ($input.rank !== 1) {\n    throw new Error(\n        `Input should be Tensor1D but received shape ${$input.shape}`);\n  }\n  if ($delimiter.rank !== 0) {\n    throw new Error(\n        `Delimiter should be a scalar but received shape ${$delimiter.shape}`);\n  }\n\n  const attrs: StringSplitAttrs = {skipEmpty};\n  const inputs: StringSplitInputs = {input: $input, delimiter: $delimiter};\n  const result: Tensor[] =\n      ENGINE.runKernel(StringSplit, inputs as {}, attrs as {});\n  return {indices: result[0], values: result[1], shape: result[2]};\n}\n\nexport const stringSplit = op({stringSplit_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringToHashBucketFast_(\n    input: Tensor|TensorLike, numBuckets: number): Tensor {\n  const $input =\n      convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n  const attrs: StringToHashBucketFastAttrs = {numBuckets};\n\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const inputs: StringToHashBucketFastInputs = {input: $input};\n  return ENGINE.runKernel(StringToHashBucketFast, inputs as {}, attrs as {});\n}\n\nexport const stringToHashBucketFast = op({stringToHashBucketFast_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Modularized ops.\nexport {abs} from './abs';\nexport {acos} from './acos';\nexport {acosh} from './acosh';\nexport {add} from './add';\nexport {addN} from './add_n';\nexport {all} from './all';\nexport {any} from './any';\nexport {argMax} from './arg_max';\nexport {argMin} from './arg_min';\nexport {asin} from './asin';\nexport {asinh} from './asinh';\nexport {atan} from './atan';\nexport {atan2} from './atan2';\nexport {atanh} from './atanh';\nexport {avgPool} from './avg_pool';\nexport {avgPool3d} from './avg_pool_3d';\nexport {basicLSTMCell} from './basic_lstm_cell';\nexport {batchToSpaceND} from './batch_to_space_nd';\nexport {batchNorm} from './batchnorm';\nexport {batchNorm2d} from './batchnorm2d';\nexport {batchNorm3d} from './batchnorm3d';\nexport {batchNorm4d} from './batchnorm4d';\nexport {bincount} from './bincount';\nexport {broadcastArgs} from './broadcast_args';\nexport {broadcastTo} from './broadcast_to';\nexport {buffer} from './buffer';\nexport {cast} from './cast';\nexport {ceil} from './ceil';\nexport {clipByValue} from './clip_by_value';\nexport {clone} from './clone';\nexport {complex} from './complex';\nexport {concat} from './concat';\nexport {concat1d} from './concat_1d';\nexport {concat2d} from './concat_2d';\nexport {concat3d} from './concat_3d';\nexport {concat4d} from './concat_4d';\nexport {conv1d} from './conv1d';\nexport {conv2d} from './conv2d';\nexport {conv2dTranspose} from './conv2d_transpose';\nexport {conv3d} from './conv3d';\nexport {conv3dTranspose} from './conv3d_transpose';\nexport {cos} from './cos';\nexport {cosh} from './cosh';\nexport {cumprod} from './cumprod';\nexport {cumsum} from './cumsum';\nexport {denseBincount} from './dense_bincount';\nexport {depthToSpace} from './depth_to_space';\nexport {depthwiseConv2d} from './depthwise_conv2d';\nexport {diag} from './diag';\nexport {dilation2d} from './dilation2d';\nexport {div} from './div';\nexport {divNoNan} from './div_no_nan';\nexport {dot} from './dot';\nexport {einsum} from './einsum';\nexport {elu} from './elu';\nexport {equal} from './equal';\nexport {erf} from './erf';\nexport {euclideanNorm} from './euclidean_norm';\nexport {exp} from './exp';\nexport {expandDims} from './expand_dims';\nexport {expm1} from './expm1';\nexport {eye} from './eye';\nexport {fill} from './fill';\nexport {floor} from './floor';\nexport {floorDiv} from './floorDiv';\nexport {gather} from './gather';\nexport {greater} from './greater';\nexport {greaterEqual} from './greater_equal';\nexport {imag} from './imag';\nexport {isFinite} from './is_finite';\nexport {isInf} from './is_inf';\nexport {isNaN} from './is_nan';\nexport {leakyRelu} from './leaky_relu';\nexport {less} from './less';\nexport {lessEqual} from './less_equal';\nexport {linspace} from './linspace';\nexport {localResponseNormalization} from './local_response_normalization';\nexport {log} from './log';\nexport {log1p} from './log1p';\nexport {logSigmoid} from './log_sigmoid';\nexport {logSoftmax} from './log_softmax';\nexport {logSumExp} from './log_sum_exp';\nexport {logicalAnd} from './logical_and';\nexport {logicalNot} from './logical_not';\nexport {logicalOr} from './logical_or';\nexport {logicalXor} from './logical_xor';\nexport {lowerBound} from './lower_bound';\nexport {matMul} from './mat_mul';\nexport {max} from './max';\nexport {maxPool} from './max_pool';\nexport {maxPool3d} from './max_pool_3d';\nexport {maxPoolWithArgmax} from './max_pool_with_argmax';\nexport {maximum} from './maximum';\nexport {mean} from './mean';\nexport {meshgrid} from './meshgrid';\nexport {min} from './min';\nexport {minimum} from './minimum';\nexport {mirrorPad} from './mirror_pad';\nexport {mod} from './mod';\nexport {moments} from './moments';\nexport {mul} from './mul';\nexport {LSTMCellFunc, multiRNNCell} from './multi_rnn_cell';\nexport {multinomial} from './multinomial';\nexport {neg} from './neg';\nexport {notEqual} from './not_equal';\nexport {oneHot} from './one_hot';\nexport {ones} from './ones';\nexport {onesLike} from './ones_like';\nexport {outerProduct} from './outer_product';\nexport {pad} from './pad';\nexport {pad1d} from './pad1d';\nexport {pad2d} from './pad2d';\nexport {pad3d} from './pad3d';\nexport {pad4d} from './pad4d';\nexport {pool} from './pool';\nexport {pow} from './pow';\nexport {prelu} from './prelu';\nexport {print} from './print';\nexport {prod} from './prod';\nexport {raggedTensorToTensor} from './ragged_tensor_to_tensor';\nexport {rand} from './rand';\nexport {randomGamma} from './random_gamma';\nexport {randomNormal} from './random_normal';\nexport {randomStandardNormal} from './random_standard_normal';\nexport {randomUniform} from './random_uniform';\nexport {range} from './range';\nexport {real} from './real';\nexport {reciprocal} from './reciprocal';\nexport {relu} from './relu';\nexport {relu6} from './relu6';\nexport {reshape} from './reshape';\nexport {reverse} from './reverse';\nexport {reverse1d} from './reverse_1d';\nexport {reverse2d} from './reverse_2d';\nexport {reverse3d} from './reverse_3d';\nexport {reverse4d} from './reverse_4d';\nexport {round} from './round';\nexport {rsqrt} from './rsqrt';\nexport {scalar} from './scalar';\nexport {selu} from './selu';\nexport {separableConv2d} from './separable_conv2d';\nexport {setdiff1dAsync} from './setdiff1d_async';\nexport {sigmoid} from './sigmoid';\nexport {sign} from './sign';\nexport {sin} from './sin';\nexport {sinh} from './sinh';\nexport {slice} from './slice';\nexport {slice1d} from './slice1d';\nexport {slice2d} from './slice2d';\nexport {slice3d} from './slice3d';\nexport {slice4d} from './slice4d';\nexport {softmax} from './softmax';\nexport {softplus} from './softplus';\nexport {spaceToBatchND} from './space_to_batch_nd';\nexport {fft} from './spectral/fft';\nexport {ifft} from './spectral/ifft';\nexport {irfft} from './spectral/irfft';\nexport {rfft} from './spectral/rfft';\nexport {split} from './split';\nexport {sqrt} from './sqrt';\nexport {square} from './square';\nexport {squaredDifference} from './squared_difference';\nexport {squeeze} from './squeeze';\nexport {stack} from './stack';\nexport {step} from './step';\nexport {stridedSlice} from './strided_slice';\nexport {sub} from './sub';\nexport {sum} from './sum';\nexport {tan} from './tan';\nexport {tanh} from './tanh';\nexport {tensor} from './tensor';\nexport {tensor1d} from './tensor1d';\nexport {tensor2d} from './tensor2d';\nexport {tensor3d} from './tensor3d';\nexport {tensor4d} from './tensor4d';\nexport {tensor5d} from './tensor5d';\nexport {tensor6d} from './tensor6d';\nexport {tile} from './tile';\nexport {topk} from './topk';\nexport {truncatedNormal} from './truncated_normal';\nexport {unique} from './unique';\nexport {unsortedSegmentSum} from './unsorted_segment_sum';\nexport {unstack} from './unstack';\nexport {upperBound} from './upper_bound';\nexport {variable} from './variable';\nexport {where} from './where';\nexport {whereAsync} from './where_async';\nexport {zeros} from './zeros';\nexport {zerosLike} from './zeros_like';\n\nexport * from './boolean_mask';\nexport * from './transpose';\nexport * from './norm';\nexport * from './moving_average';\nexport * from './scatter_nd';\nexport * from './search_sorted';\nexport * from './sparse_to_dense';\nexport * from './gather_nd';\nexport * from './dropout';\nexport * from './signal_ops_util';\nexport * from './in_top_k';\n\nexport {op, OP_SCOPE_SUFFIX} from './operation';\n\nimport {rfft} from './spectral/rfft';\nimport {fft} from './spectral/fft';\nimport {ifft} from './spectral/ifft';\nimport {irfft} from './spectral/irfft';\nconst spectral = {\n  fft,\n  ifft,\n  rfft,\n  irfft\n};\n\nimport * as fused from './fused_ops';\n\nimport {hammingWindow} from './signal/hamming_window';\nimport {hannWindow} from './signal/hann_window';\nimport {frame} from './signal/frame';\nimport {stft} from './signal/stft';\nconst signal = {\n  hammingWindow,\n  hannWindow,\n  frame,\n  stft,\n};\n\n// Image Ops namespace\nimport {cropAndResize} from './image/crop_and_resize';\nimport {flipLeftRight} from './image/flip_left_right';\nimport {grayscaleToRGB} from './image/grayscale_to_rgb';\nimport {rotateWithOffset} from './image/rotate_with_offset';\nimport {nonMaxSuppression} from './image/non_max_suppression';\nimport {nonMaxSuppressionAsync} from './image/non_max_suppression_async';\nimport {nonMaxSuppressionWithScore} from './image/non_max_suppression_with_score';\nimport {nonMaxSuppressionWithScoreAsync} from './image/non_max_suppression_with_score_async';\nimport {nonMaxSuppressionPadded} from './image/non_max_suppression_padded';\nimport {nonMaxSuppressionPaddedAsync} from './image/non_max_suppression_padded_async';\nimport {resizeBilinear} from './image/resize_bilinear';\nimport {resizeNearestNeighbor} from './image/resize_nearest_neighbor';\nimport {threshold} from './image/threshold';\nimport {transform} from './image/transform';\nconst image = {\n  flipLeftRight,\n  grayscaleToRGB,\n  resizeNearestNeighbor,\n  resizeBilinear,\n  rotateWithOffset,\n  cropAndResize,\n  nonMaxSuppression,\n  nonMaxSuppressionAsync,\n  nonMaxSuppressionWithScore,\n  nonMaxSuppressionWithScoreAsync,\n  nonMaxSuppressionPadded,\n  nonMaxSuppressionPaddedAsync,\n  threshold,\n  transform\n};\n\n// linalg namespace\nimport {bandPart} from './linalg/band_part';\nimport {gramSchmidt} from './linalg/gram_schmidt';\nimport {qr} from './linalg/qr';\nconst linalg = {\n  bandPart,\n  gramSchmidt,\n  qr\n};\n\n// losses namespace;\nimport {absoluteDifference} from './losses/absolute_difference';\nimport {computeWeightedLoss} from './losses/compute_weighted_loss';\nimport {cosineDistance} from './losses/cosine_distance';\nimport {hingeLoss} from './losses/hinge_loss';\nimport {huberLoss} from './losses/huber_loss';\nimport {logLoss} from './losses/log_loss';\nimport {meanSquaredError} from './losses/mean_squared_error';\nimport {sigmoidCrossEntropy} from './losses/sigmoid_cross_entropy';\nimport {softmaxCrossEntropy} from './losses/softmax_cross_entropy';\nconst losses = {\n  absoluteDifference,\n  computeWeightedLoss,\n  cosineDistance,\n  hingeLoss,\n  huberLoss,\n  logLoss,\n  meanSquaredError,\n  sigmoidCrossEntropy,\n  softmaxCrossEntropy\n};\n\nimport {sparseFillEmptyRows} from './sparse/sparse_fill_empty_rows';\nimport {sparseReshape} from './sparse/sparse_reshape';\nimport {sparseSegmentMean} from './sparse/sparse_segment_mean';\nimport {sparseSegmentSum} from './sparse/sparse_segment_sum';\nconst sparse = {\n  sparseFillEmptyRows,\n  sparseReshape,\n  sparseSegmentMean,\n  sparseSegmentSum\n};\n\nimport {stringNGrams} from './string/string_n_grams';\nimport {stringSplit} from './string/string_split';\nimport {stringToHashBucketFast} from './string/string_to_hash_bucket_fast';\n// tslint:disable-next-line:variable-name\nconst string = {\n  stringNGrams,\n  stringSplit,\n  stringToHashBucketFast\n};\n\n// Second level exports.\nexport {image, linalg, losses, spectral, fused, signal, sparse, string};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose} from '../globals';\nimport {variableGrads} from '../gradients';\nimport {scalar} from '../ops/ops';\nimport {Serializable} from '../serialization';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\n/**\n * A variable that belongs to an optimizer.\n *\n * The `originalName` field is required for keeping track of the canonical\n * name of the variable, which is usually the name of the model weight that\n * the variable is related to plus a suffix, e.g., 'dense1/kernel/momentum'.\n * The name of the `Variable` object itself cannot be used directly due to\n * possible deduplication: Every `Variable` must have a unique name but more\n * than one optimizer objects of the same type may be created for the same model\n * or the same `Variable`.\n */\nexport interface OptimizerVariable {\n  originalName: string;\n  variable: Variable;\n}\n\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport abstract class Optimizer extends Serializable {\n  protected iterations_: number;\n\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  minimize(f: () => Scalar, returnCost = false, varList?: Variable[]): Scalar\n      |null {\n    const {value, grads} = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray: NamedTensor[] =\n          varList.map(v => ({name: v.name, tensor: grads[v.name]}));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n\n    // Dispose gradients.\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n  get iterations(): number {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n\n  protected incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  computeGradients(f: () => Scalar, varList?: Variable[]):\n      {value: Scalar, grads: NamedTensorMap} {\n    return variableGrads(f, varList);\n  }\n\n  /**\n   * Updates variables by using the computed gradients.\n   *\n   * @param variableGradients A mapping of variable name to its gradient value.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  abstract applyGradients(variableGradients: NamedTensorMap|\n                          NamedTensor[]): void;\n\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n  dispose(): void {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations(): Promise<NamedTensor> {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',  // Named for Python compatibility.\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error(\n        `setWeights() is not implemented for this optimizer class ` +\n        `${this.getClassName()}`);\n  }\n\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n  protected async extractIterations(weightValues: NamedTensor[]):\n      Promise<NamedTensor[]> {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\n\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance: Optimizer) => {\n    return instance.minimize != null && instance.computeGradients != null &&\n        instance.applyGradients != null;\n  }\n});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/ops';\nimport {square} from '../ops/square';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adadelta';  // Name matters for Python compatibility.\n  private accumulatedGrads: OptimizerVariable[] = [];\n  private accumulatedUpdates: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected rho: number,\n      protected epsilon: number = null) {\n    super();\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad =\n            add(mul(accumulatedGrad, this.rho),\n                mul(square(gradient), 1 - this.rho));\n\n        const updates =\n            mul(div(sqrt(add(accumulatedUpdate, this.epsilon)),\n                    sqrt(add(accumulatedGrad, this.epsilon))),\n                gradient);\n\n        const newAccumulatedUpdate =\n            add(mul(accumulatedUpdate, this.rho),\n                mul(square(updates), 1 - this.rho));\n\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n\n        const newValue = add(mul(updates, -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedUpdates =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}\nregisterClass(AdadeltaOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {fill} from '../ops/fill';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adagrad';  // Note: Name matters for Python compatibility.\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue = add(\n            mul(div(gradient,\n                    sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))),\n                -this.learningRate),\n            value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\nregisterClass(AdagradOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adam';  // Note: Name matters for Python compatibility.\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment =\n            add(mul(secondMoment, this.beta2),\n                mul(square(gradient), 1 - this.beta2));\n\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment =\n            div(newSecondMoment, oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            add(mul(div(biasCorrectedFirstMoment,\n                        add(sqrt(biasCorrectedSecondMoment), this.epsilon)),\n                    -this.learningRate),\n                value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\nregisterClass(AdamOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {abs} from '../ops/abs';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {maximum} from '../ops/maximum';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adamax';  // Note: Name matters for Python compatbility.\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr =\n          div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n\n        const newWeightedInfNorm = maximum(ut0, ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            add(mul(div(lr, oneMinusAccBeta1),\n                    div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))),\n                value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\nregisterClass(AdamaxOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {keep, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'SGD';  // Note: Name matters for Python compatibility.\n  protected c: Scalar;\n\n  constructor(protected learningRate: number) {\n    super();\n    this.setLearningRate(learningRate);\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = add(mul(this.c, gradient), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  /**\n   * Sets the learning rate of the optimizer.\n   */\n  setLearningRate(learningRate: number) {\n    this.learningRate = learningRate;\n    if (this.c != null) {\n      this.c.dispose();\n    }\n    this.c = keep(scalar(-learningRate));\n  }\n\n  dispose() {\n    this.c.dispose();\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    return [await this.saveIterations()];\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    if (weightValues.length !== 0) {\n      throw new Error('SGD optimizer does not have settable weights.');\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {'learningRate': this.learningRate};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate']);\n  }\n}\nregisterClass(SGDOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(\n              mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'RMSProp';  // Note: Name matters for Python compatibility.\n  private centered: boolean;\n\n  private accumulatedMeanSquares: OptimizerVariable[] = [];\n  private accumulatedMoments: OptimizerVariable[] = [];\n  private accumulatedMeanGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected decay = 0.9,\n      protected momentum = 0.0, protected epsilon: number = null,\n      centered = false) {\n    super();\n\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            add(mul(accumulatedMeanSquare, this.decay),\n                mul(square(gradient), 1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          // Centered gradient\n          const newAccumulatedMeanGrad =\n              add(mul(accumulatedMeanGrad, this.decay),\n                  mul(gradient, 1 - this.decay));\n\n          const gradContribution =\n              div(mul(gradient, this.learningRate),\n                  sqrt(\n                      sub(newAccumulatedMeanSquare,\n                          add(square(newAccumulatedMeanGrad), this.epsilon))));\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum), gradContribution);\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              add(mul(accumulatedMeanSquare, this.decay),\n                  mul(square(gradient), 1 - this.decay));\n\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum),\n                  div(mul(gradient, this.learningRate),\n                      sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount =\n        this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedMoments =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n    if (this.centered) {\n      this.accumulatedMeanGrads =\n          weightValues.slice(variableCount * 2, variableCount * 3)\n              .map(v => ({\n                     originalName: v.name,\n                     variable: v.tensor.variable(trainable)\n                   }));\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['decay'], config['momentum'],\n        config['epsilon'], config['centered']);\n  }\n}\nregisterClass(RMSPropOptimizer);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AdadeltaOptimizer} from './adadelta_optimizer';\nimport {AdagradOptimizer} from './adagrad_optimizer';\nimport {AdamOptimizer} from './adam_optimizer';\nimport {AdamaxOptimizer} from './adamax_optimizer';\nimport {MomentumOptimizer} from './momentum_optimizer';\nimport {RMSPropOptimizer} from './rmsprop_optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\nexport class OptimizerConstructors {\n  /**\n   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\n   *\n   * ```js\n   * // Fit a quadratic function by learning the coefficients a, b, c.\n   * const xs = tf.tensor1d([0, 1, 2, 3]);\n   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n   *\n   * const a = tf.scalar(Math.random()).variable();\n   * const b = tf.scalar(Math.random()).variable();\n   * const c = tf.scalar(Math.random()).variable();\n   *\n   * // y = a * x^2 + b * x + c.\n   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);\n   * const loss = (pred, label) => pred.sub(label).square().mean();\n   *\n   * const learningRate = 0.01;\n   * const optimizer = tf.train.sgd(learningRate);\n   *\n   * // Train the model.\n   * for (let i = 0; i < 10; i++) {\n   *   optimizer.minimize(() => loss(f(xs), ys));\n   * }\n   *\n   * // Make predictions.\n   * console.log(\n   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\n   * const preds = f(xs).dataSync();\n   * preds.forEach((pred, i) => {\n   *   console.log(`x: ${i}, pred: ${pred}`);\n   * });\n   * ```\n   *\n   * @param learningRate The learning rate to use for the SGD algorithm.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static sgd(learningRate: number): SGDOptimizer {\n    return new SGDOptimizer(learningRate);\n  }\n\n  /**\n   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient\n   * descent.\n   *\n   * See\n   * [http://proceedings.mlr.press/v28/sutskever13.pdf](\n   * http://proceedings.mlr.press/v28/sutskever13.pdf)\n   *\n   * @param learningRate The learning rate to use for the Momentum gradient\n   * descent algorithm.\n   * @param momentum The momentum to use for the momentum gradient descent\n   * algorithm.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static momentum(learningRate: number, momentum: number, useNesterov = false):\n      MomentumOptimizer {\n    return new MomentumOptimizer(learningRate, momentum, useNesterov);\n  }\n\n  /**\n   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\n   * descent. This implementation uses plain momentum and is not centered\n   * version of RMSProp.\n   *\n   * See\n   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\n   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\n   *\n   * @param learningRate The learning rate to use for the RMSProp gradient\n   * descent algorithm.\n   * @param decay The discounting factor for the history/coming gradient.\n   * @param momentum The momentum to use for the RMSProp gradient descent\n   * algorithm.\n   * @param epsilon Small value to avoid zero denominator.\n   * @param centered If true, gradients are normalized by the estimated\n   * variance of the gradient.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static rmsprop(\n      learningRate: number, decay = .9, momentum = 0.0, epsilon: number = null,\n      centered = false): RMSPropOptimizer {\n    return new RMSPropOptimizer(\n        learningRate, decay, momentum, epsilon, centered);\n  }\n\n  /**\n   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adam gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adam(\n      learningRate = 0.001, beta1 = 0.9, beta2 = 0.999,\n      epsilon: number = null): AdamOptimizer {\n    return new AdamOptimizer(learningRate, beta1, beta2, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\n   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)\n   *\n   * @param learningRate The learning rate to use for the Adadelta gradient\n   * descent algorithm.\n   * @param rho The learning rate decay over each update.\n   * @param epsilon A constant epsilon used to better condition the grad\n   * update.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adadelta(learningRate = .001, rho = .95, epsilon: number = null):\n      AdadeltaOptimizer {\n    return new AdadeltaOptimizer(learningRate, rho, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adamax gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   * @param decay The learning rate decay over each update.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adamax(\n      learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon: number = null,\n      decay = 0.0): AdamaxOptimizer {\n    return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);\n  }\n\n  /**\n   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\n   * See\n   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\n   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\n   * or\n   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\n   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)\n   *\n   * @param learningRate The learning rate to use for the Adagrad gradient\n   * descent algorithm.\n   * @param initialAccumulatorValue Starting value for the accumulators, must be\n   * positive.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adagrad(learningRate: number, initialAccumulatorValue = 0.1):\n      AdagradOptimizer {\n    return new AdagradOptimizer(learningRate, initialAccumulatorValue);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// So typings can propagate.\nimport {AdadeltaOptimizer} from './optimizers/adadelta_optimizer';\nimport {AdagradOptimizer} from './optimizers/adagrad_optimizer';\nimport {AdamOptimizer} from './optimizers/adam_optimizer';\nimport {AdamaxOptimizer} from './optimizers/adamax_optimizer';\nimport {MomentumOptimizer} from './optimizers/momentum_optimizer';\nimport {OptimizerConstructors} from './optimizers/optimizer_constructors';\nimport {RMSPropOptimizer} from './optimizers/rmsprop_optimizer';\nimport {SGDOptimizer} from './optimizers/sgd_optimizer';\n\n// tslint:disable-next-line:no-unused-expression\n[MomentumOptimizer, SGDOptimizer, AdadeltaOptimizer, AdagradOptimizer,\n RMSPropOptimizer, AdamaxOptimizer, AdamOptimizer];\n\nexport const train = {\n  sgd: OptimizerConstructors.sgd,\n  momentum: OptimizerConstructors.momentum,\n  adadelta: OptimizerConstructors.adadelta,\n  adagrad: OptimizerConstructors.adagrad,\n  rmsprop: OptimizerConstructors.rmsprop,\n  adamax: OptimizerConstructors.adamax,\n  adam: OptimizerConstructors.adam\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst delayCallback: Function = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return (f: Function) => f();  // no delays\n})();\n\n/**\n * Returns a promise that resolve when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame(): Promise<void> {\n  return new Promise<void>(resolve => delayCallback(() => resolve()));\n}\n\nexport {nextFrame};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum RowPartitionType {\n  FIRST_DIM_SIZE,\n  VALUE_ROWIDS,\n  ROW_LENGTHS,\n  ROW_SPLITS,\n  ROW_LIMITS,\n  ROW_STARTS\n}\n\nexport function combineRaggedTensorToTensorShapes(\n    raggedRank: number, shape: number[], valueShape: number[]) {\n  // Test for consistency of valueShape and shape specified.\n  // If shape is unspecified and valueShape is specified, then copy\n  // over the size from the valueShape dimension.\n\n  let outputShape: number[] = new Array();\n  if (valueShape == null && shape == null) {\n    return outputShape;\n  }\n\n  if (shape == null) {\n    // Here, value_shape must be of known size.\n    while (outputShape.length < raggedRank + valueShape.length) {\n      outputShape.push(-1);\n    }\n  } else {\n    outputShape = shape.slice();\n  }\n  if (valueShape == null) {\n    return outputShape;\n  }\n  // At this point, valueShape and output_shape have known ranks.\n  if (raggedRank + valueShape.length !== outputShape.length) {\n    throw new Error(\n        `rt input.shape and shape=${shape} are incompatible: rt input.rank = ${\n            raggedRank +\n            valueShape.length}, but shape.rank = ${outputShape.length}`);\n  }\n\n  for (let i = 1; i < valueShape.length; ++i) {\n    const valueDim = valueShape[i];\n    const outputShapeDimIndex =\n        outputShape[outputShape.length - valueShape.length + i];\n    const outputShapeDim = outputShape[outputShapeDimIndex];\n\n    if (valueDim >= 0) {\n      if (outputShapeDim >= 0) {\n        if (outputShapeDim !== valueDim) {\n          throw new Error(`rt input.shape and shape=${\n              shape} are incompatible: rt input.shape[${i + raggedRank}] = ${\n              valueDim} but shape[${i + raggedRank}] = ${outputShapeDim}`);\n        }\n      } else {\n        outputShape[outputShapeDimIndex] = valueDim;\n      }\n    }\n  }\n  return outputShape;\n}\n\nexport function getRowPartitionTypesHelper(rowPartitionTypeStrings: string[]) {\n  const stringToType = {\n    'FIRST_DIM_SIZE': RowPartitionType.FIRST_DIM_SIZE,\n    'VALUE_ROWIDS': RowPartitionType.VALUE_ROWIDS,\n    'ROW_LENGTHS': RowPartitionType.ROW_LENGTHS,\n    'ROW_SPLITS': RowPartitionType.ROW_SPLITS,\n    'ROW_LIMITS': RowPartitionType.ROW_LIMITS,\n    'ROW_STARTS': RowPartitionType.ROW_STARTS\n  };\n\n  const result: RowPartitionType[] = [];\n  for (const typeStr of rowPartitionTypeStrings) {\n    if (typeStr in stringToType) {\n      result.push(stringToType[typeStr as keyof typeof stringToType]);\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n\nexport function getRaggedRank(rowPartitionTypes: RowPartitionType[]) {\n  if (rowPartitionTypes.length === 0) {\n    return 0;\n  }\n  if (rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n    return rowPartitionTypes.length - 1;\n  }\n  return rowPartitionTypes.length;\n}\n\nexport function validateDefaultValueShape(\n    defaultValueShape: number[], valueShape: number[]) {\n  if (defaultValueShape == null || valueShape == null) {\n    return;\n  }\n\n  const defaultNDims = defaultValueShape.length;\n  const valuesNDims = valueShape.length;\n  if (defaultNDims >= valuesNDims) {\n    throw new Error(`defaultValue.shape=${\n        defaultValueShape} and ragged tensor flatValues.shape=${\n        valueShape}, are incompatible: defaultValue.rank = ${\n        defaultNDims} must be less than ragged tensor input flatValues.rank = ${\n        valuesNDims})`);\n  }\n  for (let i = 0; i < Math.min(defaultNDims, valuesNDims - 1); ++i) {\n    const defaultDim = defaultValueShape[i];\n    const valueDim = valueShape[i + 1];\n    if (defaultDim >= 0 && valueDim >= 0 && defaultDim !== 1 &&\n        defaultDim !== valueDim) {\n      throw new Error(`defaultValue.shape=${\n          defaultValueShape}, and ragged tensor input flatValues.shape=${\n          valueShape} are incompatible: defaultValue.shape[${\n          i - defaultValueShape.length}] = ${\n          defaultDim} but ragged tensor input.flatValues.shape[${\n          i - defaultValueShape.length}] = ${valueDim}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../kernel_registry';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport {nearestDivisor} from '../util';\n\nexport const PARALLELIZE_THRESHOLD = 30;\n\nexport interface ReduceInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  outSize: number;\n}\n\nexport function computeOptimalWindowSize(inSize: number): number {\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    return inSize;\n  }\n  return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {decodeString, encodeString} from '../util';\n\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/fused_types';\nexport * from '../ops/ragged_to_dense_util';\nexport * from '../ops/reduce_util';\n\nimport * as slice_util from '../ops/slice_util';\nexport {slice_util};\n\nexport {BackendValues, TypedArray, upcastType, PixelData} from '../types';\nexport {MemoryInfo, TimingInfo} from '../engine';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../backends/einsum_util';\nexport * from '../ops/split_util';\nexport * from '../ops/sparse/sparse_fill_empty_rows_util';\nexport * from '../ops/sparse/sparse_reshape_util';\nexport * from '../ops/sparse/sparse_segment_reduction_util';\n\nimport * as segment_util from '../ops/segment_util';\nexport {segment_util};\n\nexport function fromUint8ToStringArray(vals: Uint8Array[]) {\n  try {\n    // Decode the bytes into string.\n    return vals.map(val => decodeString(val));\n  } catch (err) {\n    throw new Error(\n        `Failed to decode encoded string bytes into utf-8, error: ${err}`);\n  }\n}\n\nexport function fromStringArrayToUint8(strings: string[]) {\n  return strings.map(s => encodeString(s));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParamsConsistent(shapes: number[][], axis: number) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(\n        shape.length === rank,\n        () =>\n            `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n  });\n\n  util.assert(\n      axis >= 0 && axis < rank,\n      () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(\n          (r === axis) || (shape[r] === firstShape[r]),\n          () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n              `does not match the shape of the rest (${firstShape}) ` +\n              `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\n\nexport function computeOutShape(shapes: number[][], axis: number): number[] {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Returns the image center in pixels.\nexport function getImageCenter(\n    center: number|[number, number], imageHeight: number,\n    imageWidth: number): [number, number] {\n  const centerX =\n      imageWidth * (typeof center === 'number' ? center : center[0]);\n  const centerY =\n      imageHeight * (typeof center === 'number' ? center : center[1]);\n  return [centerX, centerY];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  let reshaped: number[] = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped =\n          reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(\n    reshapedRank: number, blockShapeRank: number,\n    batchToSpace = true): number[] {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(\n    crops: number[][], blockShape: number): number[] {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(\n    uncroppedShape: number[], crops: number[][], blockShape: number): number[] {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(\n    real: Float32Array, imag: Float32Array): Float32Array {\n  if (real.length !== imag.length) {\n    throw new Error(\n        `Cannot merge real and imag arrays of different lengths. real:` +\n        `${real.length}, imag: ${imag.length}.`);\n  }\n  const result = new Float32Array(real.length * 2);\n  for (let i = 0; i < result.length; i += 2) {\n    result[i] = real[i / 2];\n    result[i + 1] = imag[i / 2];\n  }\n  return result;\n}\n\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(complex.length / 2);\n  const imag = new Float32Array(complex.length / 2);\n  for (let i = 0; i < complex.length; i += 2) {\n    real[i / 2] = complex[i];\n    imag[i / 2] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.ceil(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 0; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.floor(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 2; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(\n    complex: Float32Array, index: number): {real: number, imag: number} {\n  const real = complex[index * 2];\n  const imag = complex[index * 2 + 1];\n  return {real, imag};\n}\n\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(\n    data: TypedArray, real: number, imag: number, index: number) {\n  data[index * 2] = real;\n  data[index * 2 + 1] = imag;\n}\n\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(\n    n: number, inverse: boolean): {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(n / 2);\n  const imag = new Float32Array(n / 2);\n  for (let i = 0; i < Math.ceil(n / 2); i++) {\n    const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n    real[i] = Math.cos(x);\n    imag[i] = Math.sin(x);\n  }\n  return {real, imag};\n}\n\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(\n    k: number, n: number, inverse: boolean): {real: number, imag: number} {\n  const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n  const real = Math.cos(x);\n  const imag = Math.sin(x);\n  return {real, imag};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {assert} from '../util';\n\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(\n    x: Tensor|TensorInfo, numOrSizeSplits: number[]|number,\n    axis = 0): number[] {\n  let splitSizes = [];\n  if (typeof (numOrSizeSplits) === 'number') {\n    assert(\n        x.shape[axis] % numOrSizeSplits === 0,\n        () => 'Number of splits must evenly divide the axis.');\n    splitSizes =\n        new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n      if (value === -1) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n    assert(\n        numOfNegs <= 1,\n        () => 'There should be only one negative value in split array.');\n    const negIndex = numOrSizeSplits.indexOf(-1);\n    // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n    assert(\n        x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b),\n        () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Generates sparse fill empty rows indices, dense shape mismatch error message.\n *\n * @param indicesLength The first dimension of indices.\n */\nexport function getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n    indicesLength: number) {\n  return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${indicesLength}`;\n}\n\n/**\n * Generates sparse fill empty rows negative index error message.\n *\n * @param index The index with a negative value.\n * @param value The negative value.\n */\nexport function getSparseFillEmptyRowsNegativeIndexErrorMessage(\n    index: number, value: number) {\n  return `indices(${index}, 0) is invalid: ${value} < 0`;\n}\n\n/**\n * Generates sparse fill empty rows out of range index error message.\n *\n * @param index The index with an out of range value.\n * @param value The out of range value.\n * @param limit The upper limit for indices.\n */\nexport function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n    index: number, value: number, limit: number) {\n  return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {sizeFromShape} from '../../util';\n\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n    dim1: number, dim2: number) {\n  return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\nexport function getSparseReshapeNegativeOutputDimErrorMessage(\n    dim: number, value: number) {\n  return `size ${dim} must be non-negative, not ${value}`;\n}\n\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n  return 'reshape cannot infer the missing input size for an empty tensor ' +\n      'unless all specified input sizes are non-zero';\n}\n\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMultipleErrorMessage(\n    inputShape: number[], outputShape: number[]) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${\n      outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMismatchErrorMessage(\n    inputShape: number[], outputShape: number[]) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a tensor with ${\n      inputSize} dense values, but the requested shape has ${\n      outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n  return `segment ids must be >= 0`;\n}\n\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n  return `segment ids are not increasing`;\n}\n\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n    segmentId: number, outputRows: number) {\n  return `Segment id ${segmentId} out of range [0, ${\n      outputRows}), possibly because segmentIds input is not sorted.`;\n}\n\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n    index: number, indexValue: number, inputRows: number) {\n  return `Bad: indices[${index}] == ${indexValue} out of range [0, ${\n      inputRows})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LinSpace, LinSpaceAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\n\n/**\n * Return an evenly spaced sequence of numbers over the given interval.\n *\n * ```js\n * tf.linspace(0, 9, 10).print();\n * ```\n * @param start The start value of the sequence.\n * @param stop The end value of the sequence.\n * @param num The number of values to generate.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function linspace(start: number, stop: number, num: number): Tensor1D {\n  if (num <= 0) {\n    throw new Error('The number of values should be positive.');\n  }\n\n  const attrs: LinSpaceAttrs = {start, stop, num};\n  return ENGINE.runKernel(LinSpace, {}, attrs as {} as NamedAttrMap);\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\nimport {searchSorted} from './search_sorted';\n\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than or equal to the\n * value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'lowerBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.lowerBound(edges, values);\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.lowerBound(seq, values);\n * result2.print(); // [0, 2, 3]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result3 = tf.lowerBound(sortedSequence, values);\n * result3.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying lower bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function lowerBound(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike): Tensor {\n  return searchSorted(sortedSequence, values, 'left');\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {matMul} from './mat_mul';\nimport {ones} from './ones';\nimport {reshape} from './reshape';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {sizeFromShape} from '../util_base';\n\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nexport function meshgrid<T extends Tensor>(\n    x?: T|TensorLike, y?: T|TensorLike, {indexing = 'xy'} = {}): T[] {\n  if (indexing !== 'xy' && indexing !== 'ij') {\n    throw new TypeError(\n        `${indexing} is not a valid third argument to meshgrid`);\n  }\n  if (x === undefined) {\n    return [];\n  }\n  let $x = convertToTensor(\n      x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n\n  if (y === undefined) {\n    return [$x];\n  }\n  let $y = convertToTensor(\n      y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n\n  if (indexing === 'xy') {\n    $x = reshape($x, [1, -1]) as T;\n    $y = reshape($y, [-1, 1]) as T;\n    return [\n      matMul(ones([h, 1], $x.dtype), $x),\n      matMul($y, ones([1, w], $y.dtype)),\n    ];\n  }\n\n  $x = reshape($x, [-1, 1]) as T;\n  $y = reshape($y, [1, -1]) as T;\n  return [\n    matMul($x, ones([1, h], $x.dtype)),\n    matMul(ones([w, 1], $y.dtype), $y),\n  ];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike4D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor4d(\n    values: TensorLike4D, shape?: [number, number, number, number],\n    dtype?: DataType): Tensor4D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 4) {\n    throw new Error('tensor4d() requires shape to have four numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor4d() requires values to be number[][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor4d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor4D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor5D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike5D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor5d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor5d(\n    values: TensorLike5D, shape?: [number, number, number, number, number],\n    dtype?: DataType): Tensor5D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 5) {\n    throw new Error('tensor5d() requires shape to have five numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor5d() requires values to be ' +\n        'number[][][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor5d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor5D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor6D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike6D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor6d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor6d(\n    values: TensorLike6D,\n    shape?: [number, number, number, number, number, number],\n    dtype?: DataType): Tensor6D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 6) {\n    throw new Error('tensor6d() requires shape to have six numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor6d() requires values to be number[][][][][][] or ' +\n        'flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor6d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  shape = shape ||\n      inferredShape as [number, number, number, number, number, number];\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor6D;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\nimport {searchSorted} from './search_sorted';\n\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than the value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'upperBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * const values = tf.tensor1d([0, 4, 10]);\n * const result = tf.upperBound(seq, values);\n * result.print(); // [1, 2, 5]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying upper bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function upperBound(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike): Tensor {\n  return searchSorted(sortedSequence, values, 'right');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Variable} from '../tensor';\nimport {DataType, Rank} from '../types';\n\n/**\n * Creates a new variable with the provided initial value.\n * ```js\n * const x = tf.variable(tf.tensor([1, 2, 3]));\n * x.assign(tf.tensor([4, 5, 6]));\n *\n * x.print();\n * ```\n *\n * @param initialValue Initial value for the tensor.\n * @param trainable If true, optimizers are allowed to update it.\n * @param name Name of the variable. Defaults to a unique id.\n * @param dtype If set, initialValue will be converted to the given type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function variable<R extends Rank>(\n    initialValue: Tensor<R>, trainable = true, name?: string,\n    dtype?: DataType): Variable<R> {\n  return ENGINE.makeVariable(initialValue, trainable, name, dtype) as\n      Variable<R>;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.20.0';\nexport {version};\n"],"names":["KernelBackend","refCount","dataId","notYetImplemented","incRef","timerAvailable","time","f","read","readSync","readToGPU","options","numDataIds","disposeData","force","write","values","shape","dtype","move","memory","floatPrecision","epsilon","this","dispose","kernelName","Error","shuffle","array","counter","length","index","Math","random","swap","clamp","min","x","max","object","left","right","temp","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","a","flatten","arr","result","skipTypedArray","Array","isArray","isTypedArray","i","push","sizeFromShape","size","n1","n2","isInt","rightPad","repeat","parseAxisParam","axis","rank","map","s","concat","every","ax","squeezeShape","newShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","Float32Array","Int32Array","Uint8Array","getArrayFromDType","checkConversionForErrors","vals","num","isNaN","isFinite","isValidDtype","Uint8ClampedArray","bytesPerElement","bytesFromStringArray","bytes","forEach","isString","value","String","isBoolean","isNumber","inferDtype","isFunction","constructor","call","apply","nearestDivisor","start","computeStrides","strides","createNestedArray","offset","isComplex","ret","d","rest","slice","len","reduce","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","assertNonNegativeIntegerDimensions","dimSize","Number","isInteger","isPromise","then","TENSORFLOWJS_FLAGS_PREFIX","Environment","global","getQueryParams","populateURLFlags","setPlatform","platformName","platform","env","getBool","console","warn","registerFlag","flagName","evaluationFn","setHook","flagRegistry","urlFlags","flagValue","set","async","flags","evaluateFlag","get","getNumber","getFlags","features","setFlags","Object","assign","reset","location","search","urlParams","split","keyValue","key","toLowerCase","parseValue","queryString","params","replace","t","name","decodeURIComponent","decodeParam","join","ENV","globalNameSpace","getGlobalNamespace","ns","window","process","self","getGlobal","init","globalMap","_tfGlobals","Map","getGlobalMap","has","singleton","Acos","Acosh","Add","AddN","ArgMax","ArgMin","Asin","Asinh","Atan","Atanh","Atan2","AvgPool","AvgPool3D","BatchMatMul","BatchToSpaceND","Bincount","BroadcastArgs","Cast","Ceil","ClipByValue","Complex","ComplexAbs","Concat","Conv2D","Conv2DBackpropFilter","Conv2DBackpropInput","Conv3D","Conv3DBackpropInputV2","Cosh","Cumprod","Cumsum","CropAndResize","DenseBincount","DepthToSpace","DepthwiseConv2dNative","DepthwiseConv2dNativeBackpropFilter","DepthwiseConv2dNativeBackpropInput","Diag","Dilation2D","RealDiv","Einsum","Equal","ExpandDims","Expm1","Fill","FlipLeftRight","Floor","FloorDiv","FusedBatchNorm","GatherV2","GatherNd","Greater","GreaterEqual","Identity","IFFT","Imag","IsFinite","IsInf","IsNan","LeakyRelu","Less","LessEqual","LinSpace","Log1p","LogicalAnd","LogicalNot","LogicalOr","Maximum","MaxPool","MaxPool3D","MaxPoolWithArgmax","Mean","Minimum","MirrorPad","Multinomial","Multiply","NotEqual","NonMaxSuppressionV3","NonMaxSuppressionV4","NonMaxSuppressionV5","OnesLike","OneHot","Pack","PadV2","Prelu","Prod","RaggedTensorToTensor","Range","Real","Reciprocal","Relu","Reshape","ResizeNearestNeighbor","ResizeBilinear","Relu6","Reverse","Round","Rsqrt","ScatterNd","SearchSorted","Select","Selu","Slice","Sinh","Sign","Sigmoid","Softplus","Sqrt","SpaceToBatchND","SplitV","Softmax","SparseFillEmptyRows","SparseReshape","SparseSegmentMean","SparseSegmentSum","SparseToDense","SquaredDifference","StridedSlice","StringNGrams","StringSplit","StringToHashBucketFast","Tanh","Tile","TopK","Transform","Transpose","Unique","Unpack","UnsortedSegmentSum","ZerosLike","Step","FromPixels","RotateWithOffset","_FusedMatMul","FusedConv2D","FusedDepthwiseConv2D","kernelRegistry","gradRegistry","getKernel","backendName","makeKey","getGradient","getKernelsForBackend","it","entries","done","next","config","backend","registerKernel","log.warn","Long","wasm","WebAssembly","Instance","Module","exports","e","low","high","unsigned","isLong","obj","prototype","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","RangeError","p","indexOf","substring","radixToPower","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","hexToLong","hex","k0","k1","k2","shiftMix","fetch","numBytes","from","fetch64","fetch32","rotate64","shift","hashLen16","u","v","b","weakHashLen32WithSeedsStr","w","y","z","weakHashLen32WithSeeds","toTypedArray","base.flatten","base.checkConversionForErrors","noConversionNeeded","bool","round","now","encodeString","encoding","encode","decodeString","decode","path","requestInits","array2","sum","r","diff","tanh","Infinity","e2x","exp","width","sqrt","n","shuffledIndices","Uint32Array","checkFn","delayFn","maxCounter","Promise","resolve","reject","tryCount","tryFn","nextBackoff","setTimeout","shapeProd","implicitIdx","oldType","newType","prev","curr","locs","seed","hashLen0to16","hashLen17to32","g","h","hashLen33to64","end","last64","Profiler","backendTimer","logger","Logger","profileKernel","inputs","outputs","holdResultWrapperFn","timer","util.now","output","dataSync","kernelMs","data","tensorVals","checkComputationForErrors","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","kernelProfile","all","valueContainer","util.rightPad","paddedName","inputShapesDescription","input","inputShape","inputRank","tensorToString","verbose","padPerCol","numCols","fill","valuesOrTuples","createComplexTuples","row","valToString","computeMaxSizePerColumn","valsLines","subTensorToString","lines","l","pad","valStr","parseFloat","toFixed","boolNumToString","isLast","storagePerElement","firstValsSize","firstVals","lastVals","subshape","substrides","stride","sep","newLineSep","complexTuples","TensorBuffer","util.sizeFromShape","util.assert","util.getArrayFromDType","locToIndex","loc","indexToLoc","toTensor","trackerFn","makeTensor","opHandler","Tensor","id","rankType","buffer","bufferSync","arraySync","throwIfDisposed","util.decodeString","dataToGPU","isDisposed","disposeTensor","isDisposedInternal","print","clone","cast","variable","trainable","makeVariable","Symbol","hasInstance","instance","Variable","initialValue","tensorId","super","newValue","util.arraysEqual","disposeVariable","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","Function","upcastTypeMap","float32","int32","complex64","upcastType","typeA","typeB","makeTypesMatch","assertTypesMatch","getTensorsInContainer","list","walkTensorContainer","Set","container","seen","iterable","k","tensor","tensorList","some","isRegisteredKernelInvocation","kernelInvocation","EngineState","WeakMap","newBytes","newTensors","peakBytes","kernels","kernelNames","variableName","registeredVariables","Engine","state","pendingBackendInit","backendInstance","sortedBackends","getSortedBackends","initializeBackend","success","setBackend","asyncInit","initializeBackendsAndReturnBest","backendNames","keys","registryFactory","findBackend","registry","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","kernel","setupFunc","disposeRegisteredKernels","disposeFunc","registryFactoryEntry","promiseId","pendingBackendInitId","catch","err","stack","message","removeBackend","moveData","info","tensorInfo","srcBackend","shouldCheckForMemLeaks","numDataMovesStack","tidy","nameOrFn","fn","scopedRun","startScope","endScope","error","ex","nextTensorId","nextVariableId","ENGINE","runKernel","addTapeNode","activeScope","dy","gradInputs","attrs","runKernelFunc","checkKernelForMemLeak","numDataIdsBefore","outInfos","numDataIdsAfter","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","saved","isTapeOn","startingBytecount","startingNumTensors","numTensors","kernelFunc","out","kernelOrScopeName","outTensors","outInfo","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","keep","outs","backwardsFunc","kernelDepth","profiling","activeProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","item","kernelTimeMs","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","filter","_","backendVals","util.isString","util.encodeString","trackTensor","makeTensorFromDataId","numStringTensors","util.bytesPerElement","numDataBuffers","track","removeDataId","delete","disposeVariables","varName","unreliable","reasons","query","startBytes","startNumTensors","gradientDepth","gradientsFunc","tapeNode","nextTapeNodeId","gradFunc","gradient","dys","util.makeZerosTypedArray","activeTape","kept","startTape","endTape","scopeInfo","nextScopeId","scopeStack","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","pop","scopeId","gradients","xs","allowNoGradients","filteredTape","tape","tensorsFromX","nodesFromX","node","nodeInputs","anyInputFromX","tensorsLeadToY","nodesToY","prunedInputs","nodeInput","prunedNode","getFilteredNodesXToY","accumulatedGradientMap","ones","tensorAccumulatedGradientMap","o","gradTensor","inputGradients","dx","curGradient","backpropagateGradients","grads","customGrad","util.isFunction","inputMap","save","gradRes","gradMap","grad","timingInfo","wallMs","getOrMakeEngine","_tfengine","environment","isMobileMockValue","isBrowser","document","WorkerGlobalScope","nav","undefined","navigator","product","userAgent","vendor","opera","navAny","userAgentData","mobile","test","substr","inferShape","firstElem","deepAssertShapeConsistency","indices","subShape","assertDtype","expectedDtype","actualDType","argName","functionName","convertToTensor","parseAsDtype","inferredDtype","type","inferredShape","convertToTensorArray","arg","debugValue","device_util.isBrowser","versions","OP_SCOPE_SUFFIX","op","opName","endsWith","f2","args","configurable","complex","complex_","real","imag","$real","$imag","util.assertShapesMatch","providedSize","inferredSize","inferred","flatDimsDontMatch","DTYPE_VALUE_SIZE_MAP","float16","uint16","uint8","decodeWeights","specs","float16Decode","spec","quantization","quantizationSizeFactor","byteBuffer","quantizedArray","Uint16Array","scale","getFloat16Decoder","byteLength","dtypeFactor","image","realTensor","imageTensor","concatenateTypedArrays","JSON","stringify","totalByteLength","normalizedXs","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","concatenateArrayBuffers","buffers","basename","trim","items","getModelJSONForModelArtifacts","artifacts","manifest","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","trainingConfig","getModelArtifactsForJSON","modelJSON","loadWeights","modelArtifacts","weightSpecs","weightData","getModelArtifactsInfoForJSON","ArrayBuffer","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","mantisaTable","convertMantissa","m","computeFloat16MantisaTable","exponentTable","computeFloat16ExponentTable","offsetTable","computeFloat16OffsetTable","bufferUint32View","float16Bits","float32Bits","IORouterRegistry","saveRouters","loadRouters","static","saveRouter","getInstance","loadRouter","url","getHandlers","loadOptions","handlerType","validHandlers","router","handler","DATABASE_NAME","MODEL_STORE_NAME","INFO_STORE_NAME","getIndexedDBFactory","theWindow","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","createObjectStore","keyPath","BrowserIndexedDB","modelPath","databaseAction","open","onupgradeneeded","onsuccess","modelTx","transaction","getRequest","objectStore","close","onerror","oncomplete","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","indexedDBRouter","startsWith","URL_SCHEME","registerSaveRouter","registerLoadRouter","BrowserIndexedDBManager","tx","getAllInfoRequest","getAll","getInfoRequest","deleteModelData","deleteModelRequest","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","getModelKeys","topology","modelMetadata","removeItems","localStorage","removeItem","getModelPathFromKey","BrowserLocalStorage","LS","setItem","buf","fromCharCode","arrayBufferToBase64String","metadata","parse","getItem","metadataString","weightDataBase64","byteOffset","charCodeAt","base64StringToArrayBuffer","localStorageRouter","BrowserLocalStorageManager","prefix","suffix","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","managers","scheme","manager","parseURL","getSchemes","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","getLoadHandlers","loadHandler","saveHandlers","getSaveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","load","getManager","removeModel","saveResult","PlatformBrowser","performance","text","textEncoder","TextEncoder","TextDecoder","registerManager","getNodeFetch","require","systemFetch","PlatformNode","util","hrtime","util.assertNonNegativeIntegerDimensions","cast_","$x","util.isValidDtype","clone_","defer","BrowserDownloads","fileNamePrefix","modelJsonFileName","weightDataFileName","weightsURL","URL","createObjectURL","paths","weights","modelJsonURL","jsonAnchor","modelJsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","BrowserFiles","files","jsonFile","weightsFiles","jsonReader","FileReader","onload","event","target","modelArtifactsPromise","readAsText","entry","pathToFile","checkManifestAndWeightFiles","promises","loadWeightsFile","file","weightFileReader","readAsArrayBuffer","basenames","fileNames","group","pathBasename","monitorPromisesProgress","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","promise","fraction","loadWeightsAsArrayBuffer","fetchURLs","fetchFunc","requests","fetchURL","requestInit","isBinary","bufferPromises","response","arrayBuffer","weightsLoaderFactory","fetchWeightsFunction","filePathPrefix","weightNames","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","manifestGroupConfig","groupIndex","groupOffset","weightsEntry","rawDtype","weightsBytes","enqueueWeightsForFetchingFn","manifestEntry","sizeBytes","weightName","weightIndex","found","weightsNotFound","groupIndicesToFetch","accumulator","shouldFetch","fetchUrls","filepath","fetchUrl","weightsTensorMap","bufferIndexOffset","numBuffers","groupBytes","groupBuffer","groupByteBuffer","groupBufferOffset","nameToTensorMap","browserDownloads","HTTPRequest","weightPathPrefix","weightUrlConverter","body","method","DEFAULT_METHOD","FormData","modelTopologyAndWeightManifest","append","ok","responses","status","modelConfigRequest","json","weightPath","lastSlash","lastIndexOf","lastSearchParam","parseUrl","pathPrefix","urlPromises","weightsGroup","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","isHTTP","urlItem","http","PassthroughLoader","PassthroughSaver","PassthroughAsync","fromMemorySync","arguments","dataPromises","names","utf8bytes","totalNumBytes","bytesOfLength","loudRouter","schemes","schemeOut","listModels","schemeAndPath","matMul","matMul_","transposeA","transposeB","$a","$b","oneHot","oneHot_","depth","onValue","offValue","imag_","neg_","real_","transpose","transpose_","perm","conjugate","reverse","confusionMatrix_","labels","predictions","numClasses","$labels","$predictions","oneHotLabels","oneHotPredictions","oneHotLabelsT","getBroadcastDims","inShape","outShape","inRank","dims","dim","unshift","getReductionAxes","inDim","outAxis","outDim","assertAndGetBroadcastShape","tensor3d","fromPixels2DContext","fromPixels_","pixels","numChannels","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","height","videoWidth","videoHeight","getImageData","OffscreenCanvas","OffscreenCanvasRenderingContext2D","willReadFrequently","canvas","drawImage","numPixels","channel","canWrapPixelsToImageBitmap","hasOwnProperty","isNonEmptyPixels","imageBitmap","createImageBitmap","premultiplyAlpha","img","$img","originalImgTensor","rgba","ctx","imageData","putImageData","prepareAndValidate","tensorRank","indicesRank","indicesShape","sliceRank","nResult","resultShape","sliceSize","validateUpdateShape","updates","sliceDim","batchDim","shapeError","validateInput","calculateShapes","totalNd","safeSliceDim","numUpdates","outputSize","stridesWithElidedDims","ellipsisInsertionIndex","numElidedAxes","newStrides","splice","unnormalizeAxis","normalizedAxis","getElidedAxes","elidedAxes","startIndicesWithElidedDims","beginMask","originalBegin","newIndices","originalAxis","originalValue","stopIndicesWithElidedDims","endMask","originalEnd","MAX_SAFE_INTEGER","axisSize","util.clamp","stridesForAxis","ellipsisMask","startForAxis","startIndices","MIN_SAFE_INTEGER","stopForAxis","stopIndices","stop","canonical","strideI","dimI","masks","validRange","xFwd","begin","mask","ellipsisAxes","numInterpolatedAxes","normalizedBegin","normalizedEnd","normalizedStrides","fullIndex","firstNonOneAxis","flatOffset","begin_","xRank","size_","xShape","newAxisMask","shrinkAxisMask","stridesNonNull","ellipsisSeen","sparseSpec","numAddAxisAfterEllipsis","denseSpec","beginValid","endValid","sparse","dense","finalShapeGatherIndices","finalShapeGatherIndicesSparse","inputShapeGatherIndicesSparse","nextIndex","buildDenseSpec","isIdentity","sliceDim0","isSimpleSlice","processingShape","finalShape","shrinkI","beginAndEndMasked","takeAllInDimension","intervalLength","knownInterval","sizeI","trunc","denseDim","gatherIndex","finalShapeSparse","Serializable","getClassName","className","cls","SerializationMap","classNameMap","getMap","fromConfig","registerClass","register","testEpsilon","expectArraysPredicate","actual","expected","predicate","checkClassType","aType","bType","actualShape","expectedShape","actualFlat","expectedFlat","expect","nothing","areClose","abs","fail","actualArray","expectedArray","encodeStrings","source","video","playsInline","muted","loop","style","position","top","preload","appendChild","addEventListener","play","requestVideoFrameCallback","add_","floorDiv","floorDiv_","div_","mul_","abs_","acos","acos_","acosh","acosh_","addN","addN_","$tensors","firstTensor","all_","keepDims","any","any_","argMax","argMax_","argMin","argMin_","asin","asin_","asinh","asinh_","atan","atan_","atan2","atan2_","atanh","atanh_","computePool2DInfo","filterSize","dilations","roundingMode","dataFormat","filterHeight","filterWidth","parseTupleParam","filterShape","computeConv2DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","padInfo","outHeight","outWidth","bottom","fieldSize","zeroPad","computeDefaultPad","inputRows","inputCols","outputRows","outputCols","computeOutputShape2D","padAlongHeight","padAlongWidth","getPadAndOutInfo","outChannels","computeConv3DInfo","inDepth","filterDepth","strideDepth","parse3TupleParam","dilationDepth","effectiveFilterDepth","outDepth","front","back","inputDepth","outputDepths","computeOutputShape4D","padAlongDepth","get3DPadAndOutInfo","dilation","effectiveFieldSize","param","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","convertConv2DDataFormat","checkPadOnDimRoundingMode","opDesc","dimRoundingMode","util.isInt","reshape","reshape_","avgPool","avgPool_","conv_util.eitherStridesOrDilationsAreOne","x4D","reshapedTo4D","conv_util.checkPadOnDimRoundingMode","avgPool3d","avgPool3d_","x5D","reshapedTo5D","concat_","attr","sigmoid","sigmoid_","slice_","tanh_","basicLSTMCell","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","combined","weighted","sliceCols","newC","batchToSpaceND","batchToSpaceND_","blockShape","crops","prod","batchNorm","batchNorm_","mean","variance","varianceEpsilon","$mean","$variance","$scale","$offset","xAs4D","batchNorm2d","batchNorm2d_","batchNorm3d","batchNorm3d_","batchNorm4d","batchNorm4d_","bincount","bincount_","$weights","broadcastArgs","broadcastArgs_","s0","s1","shape1Input","shape2Input","broadcastTo","broadcastTo_","reps","ceil_","clipByValue","clipByValue_","clipValueMin","clipValueMax","concat1d","concat1d_","concat2d","concat2d_","concat3d","concat3d_","concat4d","concat4d_","conv2d","conv2d_","$filter","conv1d","conv1d_","x3D","reshapedTo3D","filter4D","input4D","conv2DBackpropInput","conv2DBackpropInput_","xShape4D","dy4D","conv2dTranspose","conv2dTranspose_","outputShape","conv3d","conv3d_","conv3DBackpropInput","conv3DBackpropInput_","xShape5D","dy5D","conv3dTranspose","conv3dTranspose_","cos","cos_","cosh","cosh_","cumprod","cumprod_","exclusive","cumsum","cumsum_","denseBincount","denseBincount_","binaryOutput","depthToSpace","depthToSpace_","blockSize","inputHeight","inputWidth","depthwiseConv2d","depthwiseConv2d_","diag","diag_","dilation2d","dilation2d_","equal","equal_","where","where_","condition","$condition","broadcastShape","zerosLike","zerosLike_","divNoNan","divNoNan_","divResult","zeros","bEqualsZero","dot","dot_","t1","t2","$t1","$t2","t1Inner","t2Inner","t12D","t22D","t1t2","einsum","einsum_","equation","elu","elu_","erf","erf_","axesAreInnerMostDims","combineLocations","outputLoc","reduceLoc","outIdx","reduceIdx","expandShapeToKeepDim","max_","reductionIndices","min_","pow_","base","$base","$exp","scalar","sqrt_","square","square_","sum_","normImpl","norm","norm_","ord","keepDimsShape","axis_util.expandShapeToKeepDim","euclideanNorm","euclideanNorm_","exp_","expandDims","expandDims_","expm1","expm1_","tile","tile_","eye","eye_","numRows","numColumns","batchShape","buff","floor_","gather","gather_","batchDims","greater","greater_","greaterEqual","greaterEqual_","isFinite_","isInf","isInf_","isNaN_","leakyRelu","leakyRelu_","alpha","less","less_","lessEqual","lessEqual_","localResponseNormalization","localResponseNormalization_","depthRadius","bias","beta","log_","log1p","log1p_","variableGrads","varList","specifiedVarList","specifiedNonTrainable","originalVarCount","namedGrads","checkGrads","softplus","softplus_","logSigmoid","logSigmoid_","customOp","sub_","logSoftmax","logSoftmax_","logits","$logits","xMax","shifted","softmax","logSumExp","logSumExp_","logicalAnd","logicalAnd_","logicalNot","logicalNot_","logicalOr","logicalOr_","logicalXor","logicalXor_","INT32_MAX","searchSorted","searchSorted_","sortedSequence","side","$sortedSequence","$values","sequenceSize","valuesSize","$sortedSequence2D","$values2D","maxPool","maxPool_","maxPool3d","maxPool3d_","maxPoolWithArgmax","maxPoolWithArgmax_","includeBatchInIndex","indexes","maximum","maximum_","mean_","minimum","minimum_","mirrorPad","mirrorPad_","paddings","mode","shapeOffset","mod_","moments","moments_","xMean","devSquared","multiRNNCell","multiRNNCell_","lstmCells","newStates","newH","multinomial","multinomial_","numSamples","normalized","numOutcomes","origRank","notEqual","notEqual_","onesLike","onesLike_","outerProduct","outerProduct_","v1","v2","$v1","$v2","v12D","v22D","pad_","constantValue","pad1d","pad1d_","pad2d","pad2d_","pad3d","pad3d_","pad4d","pad4d_","spaceToBatchND","spaceToBatchND_","pool","pool_","windowShape","poolingType","convInfo","conv_util.computePool2DInfo","basePadding","padExtraShape","padExtraStart","padExtraEnd","withSpaceToBatchBasePaddings","isDilationOne","adjustedPadding","adjustedCrops","padStart","origPadEnd","fullInputShape","padEndExtra","padEnd","requiredSpaceToBatchPaddings","convertedPad","convertedX","prelu","prelu_","prod_","raggedTensorToTensor","raggedTensorToTensor_","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","rand","rand_","randFunction","module","define","Alea","me","mash","s2","copy","impl","opts","xg","prng","double","quick","amd","alea","XorGen","strseed","xor128","xorwow","X","xorshift7","limit","xor4096","tychei","math","nodecrypto","startdenom","significance","overflow","seedrandom","callback","shortseed","mixkey","entropy","tostring","randomBytes","crypto","msCrypto","getRandomValues","browser","plugins","screen","autoseed","arc4","ARC4","S","pass","is_math_call","keylen","count","prop","typ","smear","stringseed","sr","MPRandGauss","stdDeviation","truncated","stdDev","nextVal","NaN","upper","lower","seedValue","seedrandom.alea","nextValue","resultX","resultY","isValid","isValidTruncated","convertValue","RandGamma","randu","randn","x2","v0","UniformRandom","range","canReturnFloat","randomGamma","randomGamma_","rgamma","randomNormal","randomNormal_","randGauss","randomStandardNormal","randomStandardNormal_","randomUniform","randomUniform_","minval","maxval","step","reciprocal","reciprocal_","relu","relu_","relu6","relu6_","reverse_","reverse1d","reverse1d_","reverse2d","reverse2d_","reverse3d","reverse3d_","reverse4d","reverse4d_","round_","rsqrt","rsqrt_","selu","selu_","separableConv2d","separableConv2d_","depthwiseFilter","pointwiseFilter","$depthwiseFilter","$pointwiseFilter","channelMultiplier","setdiff1dAsync","$y","xVals","yVals","ySet","sign","sign_","sin","sin_","sinh","sinh_","slice1d","slice1d_","slice2d","slice2d_","slice3d","slice3d_","slice4d","slice4d_","softmax_","fft","fft_","ifft","ifft_","irfft","irfft_","innerDimensionSize","batch","complexInput","realInput","imagInput","realConjugate","imagConjugate","split_","numOrSizeSplits","rfft","rfft_","fftLength","adjustedInput","zerosShape","zerosInput","half","realValues","imagValues","realComplexConjugate","imagComplexConjugate","squaredDifference","squaredDifference_","squeeze","squeeze_","stack_","step_","stridedSlice","stridedSlice_","tan","tan_","tensor1d","tensor2d","topk","topk_","sorted","lastDim","truncatedNormal","truncatedNormal_","unique","unique_","unsortedSegmentSum","unsortedSegmentSum_","segmentIds","numSegments","$segmentIds","unstack","unstack_","whereImpl","condShape","condVals","inBuffer","whereAsync","booleanMaskAsync","$tensor","$mask","axisFrom","maskDim","tensorShape","leadingSize","targetTensorShape","reshapedTensor","reshapedMask","positivePositions","movingAverage","movingAverage_","decay","zeroDebias","$v","$decay","one","oneMinusDecay","update","$step","scatterND","scatterND_","$indices","$updates","scatter_nd_util.validateInput","sparseToDense","sparseToDense_","sparseIndices","sparseValues","$sparseIndices","$sparseValues","$defaultValue","defaultValues","numElems","numDims","numValues","sparse_to_dense.validateInput","gatherND","gatherND_","dropout","dropout_","rate","noiseShape","$noiseShape","newDimension","getNoiseShape","keepProb","enclosingPowerOfTwo","cosineWindow","windowLength","even","newValues","cosArg","PI","inTopKAsync","targets","$targets","predictionsVals","targetsVals","precision","subarray","valAndInd","conv2DBackpropFilter","conv2DBackpropFilter_","getFusedDyActivation","activation","getFusedBiasGradient","dyActivation","reduceAxes","broadcast_util.getReductionAxes","applyActivation","preluActivationWeights","leakyreluAlpha","shouldFuse","fusedConv2d_","unfusedConv2d","inputChannels","conv_util.computeConv2DInfo","$bias","$preluActivationWeights","broadcast_util.assertAndGetBroadcastShape","alphaShape","errMsg","conv_util.tupleValuesAreOne","der","biasDer","customOpWithBias","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropFilter_","depthwiseConv2dNativeBackpropInput","depthwiseConv2dNativeBackpropInput_","fusedDepthwiseConv2d_","unfusedDepthwiseConv2d","xDer","filterDer","fusedMatMul_","unfusedMatMul","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","a3D","b3D","aDer","bDer","hammingWindow","hammingWindow_","hannWindow","hannWindow_","frame","frame_","signal","frameLength","frameStep","padValue","padLen","stft","stft_","windowFn","framedSignal","windowedSignal","cropAndResize","cropAndResize_","boxes","boxInd","cropSize","extrapolationValue","$image","$boxes","$boxInd","numBoxes","flipLeftRight","flipLeftRight_","grayscaleToRGB","grayscaleToRGB_","lastDimsIdx","lastDims","rotateWithOffset","rotateWithOffset_","radians","fillValue","center","nonMaxSuppSanityCheck","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","NEGATIVE_INFINITY","nonMaxSuppression","nonMaxSuppression_","$scores","binaryInsert","element","comparator","middle","compareResult","binarySearch_","defaultComparator","binarySearch","insertionPoint","nonMaxSuppressionV3Impl","nonMaxSuppressionImpl_","nonMaxSuppressionV4Impl","padToMaxOutputSize","nonMaxSuppressionV5Impl","returnScoresTensor","returnValidOutputs","candidates","score","boxIndex","suppressBeginIndex","ascendingComparator","selectedIndices","selectedScores","candidate","originalScore","ignoreCandidate","iou","intersectionOverUnion","suppressWeight","validOutputs","elemsToPad","iCoord","jCoord","yminI","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","weight","c1","c2","nonMaxSuppressionAsync","boxesAndScores","boxesVals","scoresVals","nonMaxSuppressionWithScore","nonMaxSuppressionWithScore_","nonMaxSuppressionWithScoreAsync","nonMaxSuppressionPadded","nonMaxSuppressionPadded_","nonMaxSuppressionPaddedAsync","$maxOutputSize","$iouThreshold","$scoreThreshold","resizeBilinear","resizeBilinear_","images","alignCorners","halfPixelCenters","$images","batchImages","resizeNearestNeighbor","resizeNearestNeighbor_","threshold","threshold_","inverted","threshValue","totalPixelsInImage","grayscale","$threshold","$r","$g","histogram","total","classFirst","classSecond","meanFirst","meanSec","weightForeground","weightBack","bestThresh","bestInBetVar","cInBetVar","meanFirstDivA","meanSecFill","meanSecAdd","meanSecMul","cInBetVarSubA","cInBetVarSubB","cInBetVarMul","otsu","invCondition","transform","transform_","transforms","interpolation","fillMode","$transforms","bandPart","bandPart_","numLower","numUpper","M","N","ij","inBand","zero","mat","gramSchmidt","gramSchmidt_","inputIsTensor2D","ys","xs1d","proj","qr2d","fullMatrices","q","one2D","iters","rTemp","wTemp","qTemp","rjEnd1","normX","rjj","u1","wPre","tau","rjEndAll","tauTimesW","wT","rTimesTau","tawTimesWT","qAllJEnd","qTimesTau","qr","qr_","outerDimsProd","x2ds","q2ds","r2ds","x2d","q2d","r2d","Reduction","computeWeightedLoss","computeWeightedLoss_","losses","reduction","SUM_BY_NONZERO_WEIGHTS","$losses","weightedLoss","NONE","SUM","MEAN","broadcastFactor","broadcastedWeights","numNonZeros","absoluteDifference","absoluteDifference_","cosineDistance","cosineDistance_","hingeLoss","hingeLoss_","huberLoss","huberLoss_","deltaScalar","quadratic","linear","logLoss","logLoss_","epsilonScalar","l1","l2","meanSquaredError","meanSquaredError_","sigmoidCrossEntropy","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","maxOutput","outputXTarget","sigmoidOutput","sigmoidCrossEntropyWithLogits_","softmaxCrossEntropy","softmaxCrossEntropy_","onehotLabels","$onehotLabels","lse","logResult","costVector","dyShape","softmaxCrossEntropyWithLogits_","sparseFillEmptyRows","sparseFillEmptyRows_","denseShape","$denseShape","outputIndices","outputValues","emptyRowIndicator","reverseIndexMap","sparseReshape","sparseReshape_","inputIndices","$inputIndices","$inputShape","$newShape","sparseSegmentMean","sparseSegmentMean_","sparseSegmentSum","sparseSegmentSum_","stringNGrams","stringNGrams_","dataSplits","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","$dataSplits","nGrams","nGramsSplits","stringSplit","stringSplit_","delimiter","skipEmpty","$input","$delimiter","stringToHashBucketFast","stringToHashBucketFast_","numBuckets","spectral","linalg","string","Optimizer","minimize","returnCost","computeGradients","gradArray","applyGradients","iterations","iterations_","incrementIterations","weightValues","AdadeltaOptimizer","learningRate","rho","variableGradients","accumulatedGrads","originalName","accumulatedUpdates","accumulatedGrad","accumulatedUpdate","newAccumulatedGrad","newAccumulatedUpdate","variables","saveIterations","variableCount","extractIterations","getConfig","AdagradOptimizer","initialAccumulatorValue","AdamOptimizer","beta1","beta2","accBeta1","accBeta2","varNames","oneMinusAccBeta1","oneMinusAccBeta2","accumulatedFirstMoment","accumulatedSecondMoment","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","AdamaxOptimizer","iteration","variableNames","lr","accumulatedWeightedInfNorm","weightedInfNorm","ut0","ut1","newWeightedInfNorm","SGDOptimizer","setLearningRate","MomentumOptimizer","momentum","useNesterov","accumulations","accumulation","newAccumulation","setMomentum","RMSPropOptimizer","centered","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","accumulatedMeanSquare","newAccumulatedMeanSquare","accumulatedMeanGrad","newAccumulatedMeanGrad","gradContribution","newAccumulatedMoments","OptimizerConstructors","train","sgd","adadelta","adagrad","rmsprop","adamax","adam","delayCallback","requestAnimationFrame","setImmediate","RowPartitionType","ARROW","ARROW_REGEX","findTermsWithDim","idDims","termIndices","inSize","aShape","outerSize","strings","numAxes","shapes","firstShape","$dataFormat","raggedRank","valueShape","valueDim","outputShapeDimIndex","outputShapeDim","rowPartitionTypeStrings","stringToType","FIRST_DIM_SIZE","VALUE_ROWIDS","ROW_LENGTHS","ROW_SPLITS","ROW_LIMITS","ROW_STARTS","typeStr","defaultValueShape","defaultNDims","valuesNDims","defaultDim","imageHeight","imageWidth","batchToSpace","reshaped","spatialLength","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","reshapedPermuted","sliceBeginCoords","uncroppedShape","inverse","numArrows","inputString","outputString","inputTerms","numInputs","allDims","dimName","inputTerm","summedDims","nDims","permutationIndices","dimSizes","steps","nSteps","computedTermIndices","termIndex","splitSizes","negIndex","indicesLength","dim1","dim2","segmentId","indexValue","dataMover","dataIdsCount","registeredBackendName","newBackendName","kernelConfig","$dy","$args","indexing","TypeError","profile","ready"],"mappings":"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"}